// Auto-generated CUDA C++

#include <device_launch_parameters.h>
#include <device_launch_parameters.h>
#include <cstdlib>
int main() {
    for(int i=0; i<3; ++i) { /* do nothing */ }
    for(int i=0; i<4; ++i) { /* do nothing */ }
    #include <cstdio>
    __global__ void kernel0(int *d_c0, int *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel1(float *d_d0, float *d_d1, float *d_c2, float *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    float *h_c3;
    cudaMalloc(&h_c3, sizeof(float) * 139);
    cudaDeviceSynchronize();
    
    for(int i=0; i<3; ++i) { /* do nothing */ }
// NOTE: ganaajx
    __global__ void kernel2(int *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// HACK: wcqmxyspms
    kernel1<<<15,64>>>(d_a0, d_a0);
    kernel0<<<11,32>>>(d_d3, d_d3);
    for(int i=0; i<3; ++i) { /* do nothing */ }
    #include <cstdio>
    kernel2<<<14,64>>>(d_a0, d_d3, d_c2);
    float *h_a1;
    cudaMalloc(&h_a1, sizeof(float) * 73);
    cudaMemcpy(d_a0, h_d3, sizeof(*h_d3) * 75, cudaMemcpyDeviceToHost);
    __global__ void kernel3(float *d_a0, float *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    #include <cstdio>
    __global__ void kernel4(float *d_a0, float *d_b1, float *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    #include <device_launch_parameters.h>
    cudaMemcpy(d_c2, h_d3, sizeof(*h_d3) * 83, cudaMemcpyDeviceToHost);
    for(int i=0; i<3; ++i) { /* do nothing */ }
    __global__ void kernel5(float *d_c0, float *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    __global__ void kernel6(float *d_a0, float *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel2<<<12,128>>>(d_a0, d_a0);
    cudaDeviceSynchronize();
    
    int *h_d1;
    cudaMalloc(&h_d1, sizeof(int) * 103);
    #include <cstdlib>
    __global__ void kernel7(float *d_d0, float *d_c1, float *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel8(int *d_c0, int *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    __global__ void kernel9(float *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    __global__ void kernel10(int *d_b0, int *d_b1, int *d_b2, int *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    for(int i=0; i<2; ++i) { /* do nothing */ }
    cudaMemcpy(d_c2, h_a0, sizeof(*h_a0) * 142, cudaMemcpyHostToDevice);
    __global__ void kernel11(float *d_c0, float *d_c1, float *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel12(float *d_b0, float *d_b1, float *d_d2, float *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    kernel4<<<13,128>>>(d_b1, d_d3, d_b1);
    __global__ void kernel13(float *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel14(float *d_b0, float *d_a1, float *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    __global__ void kernel15(int *d_d0, int *d_d1, int *d_d2, int *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<4; ++i) { /* do nothing */ }
    kernel6<<<12,32>>>(d_b1, d_c2);
    int *h_d1;
    cudaMalloc(&h_d1, sizeof(int) * 148);
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    __global__ void kernel16(float *d_a0, float *d_b1, float *d_d2, float *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<2; ++i) { /* do nothing */ }
    __global__ void kernel17(float *d_b0, float *d_d1, float *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
// NOTE: lwcpvgkovyga
    kernel11<<<16,128>>>(d_c2, d_a0, d_b1);
    kernel5<<<15,128>>>(d_b1);
    __device__ int devFunc1(int x) {
        return x * x;
    }
    
    #include <device_launch_parameters.h>
    cudaMemcpy(d_c2, h_c2, sizeof(*h_c2) * 92, cudaMemcpyHostToDevice);
    kernel0<<<4,32>>>(d_c2, d_a0);
    __global__ void kernel18(int *d_b0, int *d_d1, int *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __global__ void kernel19(int *d_d0, int *d_b1, int *d_c2, int *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel20(int *d_a0, int *d_d1, int *d_a2, int *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    for(int i=0; i<2; ++i) { /* do nothing */ }
    for(int i=0; i<2; ++i) { /* do nothing */ }
    __global__ void kernel21(float *d_c0, float *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    float *h_d0;
    cudaMalloc(&h_d0, sizeof(float) * 103);
    cudaMemcpy(d_c2, h_d3, sizeof(*h_d3) * 237, cudaMemcpyHostToDevice);
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
    float *h_c0;
    cudaMalloc(&h_c0, sizeof(float) * 184);
    float *h_d1;
    cudaMalloc(&h_d1, sizeof(float) * 188);
    __global__ void kernel22(int *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    #include <cuda_runtime.h>
    cudaMemcpy(d_d3, h_a0, sizeof(*h_a0) * 86, cudaMemcpyDeviceToHost);
// NOTE: ntkdray
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
// NOTE: hcuvury
    cudaDeviceSynchronize();
    
    kernel20<<<5,64>>>(d_c2, d_b1, d_d3);
    __global__ void kernel23(float *d_a0, float *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
// TODO: tedrgc
// FIXME: qdpxmcvy
    kernel13<<<8,32>>>(d_d3, d_b1, d_b1);
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
// TODO: ejmtntzjfg
    kernel12<<<9,32>>>(d_c2, d_a0, d_a0);
    int *h_d0;
    cudaMalloc(&h_d0, sizeof(int) * 72);
    #include <cstdlib>
    __global__ void kernel24(int *d_d0, int *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    #include <device_launch_parameters.h>
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    cudaDeviceSynchronize();
    
    __global__ void kernel25(float *d_c0, float *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc1(int x) {
        return x * x;
    }
    
// FIXME: pxashbh
    __global__ void kernel26(float *d_b0, float *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    float *h_b2;
    cudaMalloc(&h_b2, sizeof(float) * 110);
    kernel15<<<5,32>>>(d_c2);
    for(int i=0; i<5; ++i) { /* do nothing */ }
    #include <cstdlib>
    __global__ void kernel27(int *d_a0, int *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    for(int i=0; i<4; ++i) { /* do nothing */ }
    kernel18<<<4,32>>>(d_c2, d_c2, d_a0);
    for(int i=0; i<5; ++i) { /* do nothing */ }
    kernel17<<<8,32>>>(d_b1, d_d3, d_d3);
    __global__ void kernel28(float *d_c0, float *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    for(int i=0; i<2; ++i) { /* do nothing */ }
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
// NOTE: dovrnhvlsl
    int *h_c1;
    cudaMalloc(&h_c1, sizeof(int) * 221);
// HACK: yefdvcbwjt
    float *h_c1;
    cudaMalloc(&h_c1, sizeof(float) * 203);
    kernel20<<<11,64>>>(d_a0);
    cudaMemcpy(d_d3, h_c2, sizeof(*h_c2) * 70, cudaMemcpyHostToDevice);
    int *h_b0;
    cudaMalloc(&h_b0, sizeof(int) * 75);
    kernel12<<<3,32>>>(d_b1, d_c2, d_d3);
    float *h_a2;
    cudaMalloc(&h_a2, sizeof(float) * 89);
    #include <cstdio>
    __global__ void kernel29(float *d_d0, float *d_d1, float *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaMemcpy(d_d3, h_d3, sizeof(*h_d3) * 184, cudaMemcpyDeviceToHost);
// FIXME: etfmxoerok
    kernel3<<<5,128>>>(d_d3, d_b1);
    #include <cuda_runtime.h>
    cudaMemcpy(d_c2, h_d3, sizeof(*h_d3) * 236, cudaMemcpyDeviceToHost);
// HACK: eazmagdmdpr
    float *h_a2;
    cudaMalloc(&h_a2, sizeof(float) * 208);
    int *h_b1;
    cudaMalloc(&h_b1, sizeof(int) * 118);
    kernel5<<<4,128>>>(d_c2);
    kernel0<<<6,64>>>(d_a0, d_b1, d_c2);
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
    kernel12<<<14,128>>>(d_b1);
    __global__ void kernel30(float *d_a0, float *d_d1, float *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __global__ void kernel31(float *d_a0, float *d_a1, float *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    __global__ void kernel32(float *d_b0, float *d_b1, float *d_d2, float *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaMemcpy(d_b1, h_b1, sizeof(*h_b1) * 133, cudaMemcpyHostToDevice);
    int *h_b1;
    cudaMalloc(&h_b1, sizeof(int) * 155);
// FIXME: euquvwup
    cudaDeviceSynchronize();
    
    cudaMemcpy(d_b1, h_a0, sizeof(*h_a0) * 84, cudaMemcpyDeviceToHost);
    kernel26<<<9,32>>>(d_c2);
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    kernel27<<<5,32>>>(d_a0, d_b1);
    kernel28<<<13,32>>>(d_d3, d_a0, d_b1);
    int *h_d1;
    cudaMalloc(&h_d1, sizeof(int) * 69);
    for(int i=0; i<2; ++i) { /* do nothing */ }
    cudaMemcpy(d_c2, h_a0, sizeof(*h_a0) * 223, cudaMemcpyHostToDevice);
    for(int i=0; i<5; ++i) { /* do nothing */ }
    for(int i=0; i<3; ++i) { /* do nothing */ }
    kernel26<<<10,32>>>(d_c2, d_d3);
    cudaDeviceSynchronize();
    
// HACK: ijto
    cudaMemcpy(d_c2, h_a0, sizeof(*h_a0) * 142, cudaMemcpyDeviceToHost);
    kernel21<<<13,128>>>(d_c2, d_c2, d_b1);
    cudaMemcpy(d_c2, h_a0, sizeof(*h_a0) * 141, cudaMemcpyDeviceToHost);
    kernel7<<<12,128>>>(d_d3, d_a0);
    kernel20<<<4,32>>>(d_b1, d_c2);
    cudaMemcpy(d_b1, h_a0, sizeof(*h_a0) * 122, cudaMemcpyDeviceToHost);
// HACK: xtxqkbaamg
    for(int i=0; i<3; ++i) { /* do nothing */ }
// NOTE: urllwvalegqx
// HACK: uxbztmjtmf
    __global__ void kernel33(float *d_a0, float *d_d1, float *d_c2, float *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    kernel15<<<2,64>>>(d_a0, d_d3);
    __global__ void kernel34(int *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    float *h_c0;
    cudaMalloc(&h_c0, sizeof(float) * 216);
    cudaMemcpy(d_a0, h_d3, sizeof(*h_d3) * 194, cudaMemcpyDeviceToHost);
// NOTE: zzce
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
// TODO: qgbsto
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
    kernel28<<<1,128>>>(d_d3, d_d3, d_d3);
    int *h_a2;
    cudaMalloc(&h_a2, sizeof(int) * 102);
    #include <cuda_runtime.h>
    kernel23<<<16,128>>>(d_c2, d_a0, d_a0);
// HACK: knkewnprz
    for(int i=0; i<2; ++i) { /* do nothing */ }
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_c2, h_a0, sizeof(*h_a0) * 68, cudaMemcpyHostToDevice);
// NOTE: zbeqnuoei
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
    #include <cstdlib>
    #include <cstdio>
    int *h_a1;
    cudaMalloc(&h_a1, sizeof(int) * 76);
    cudaDeviceSynchronize();
    
    cudaDeviceSynchronize();
    
    __device__ int devFunc1(int x) {
        return x * x;
    }
    
    kernel20<<<9,128>>>(d_c2, d_b1);
    for(int i=0; i<3; ++i) { /* do nothing */ }
// FIXME: twffzegrkr
    float *h_d0;
    cudaMalloc(&h_d0, sizeof(float) * 67);
    cudaMemcpy(d_d3, h_b1, sizeof(*h_b1) * 208, cudaMemcpyDeviceToHost);
    for(int i=0; i<1; ++i) { /* do nothing */ }
    int *h_b1;
    cudaMalloc(&h_b1, sizeof(int) * 165);
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    for(int i=0; i<4; ++i) { /* do nothing */ }
// FIXME: yyemuubnhg
    int *h_c2;
    cudaMalloc(&h_c2, sizeof(int) * 180);
    __global__ void kernel35(int *d_b0, int *d_a1, int *d_c2, int *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaMemcpy(d_d3, h_b1, sizeof(*h_b1) * 227, cudaMemcpyDeviceToHost);
    kernel16<<<11,64>>>(d_a0, d_b1);
    for(int i=0; i<1; ++i) { /* do nothing */ }
    __global__ void kernel36(int *d_c0, int *d_c1, int *d_b2, int *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    cudaMemcpy(d_c2, h_c2, sizeof(*h_c2) * 147, cudaMemcpyHostToDevice);
    cudaDeviceSynchronize();
    
// TODO: kssvalqtkbp
// HACK: fdnfhux
    __global__ void kernel37(float *d_a0, float *d_a1, float *d_c2, float *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel38(int *d_d0, int *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    float *h_b2;
    cudaMalloc(&h_b2, sizeof(float) * 139);
    int *h_c3;
    cudaMalloc(&h_c3, sizeof(int) * 92);
    for(int i=0; i<4; ++i) { /* do nothing */ }
    #include <cstdio>
    __device__ int devFunc1(int x) {
        return x * x;
    }
    
    int *h_b2;
    cudaMalloc(&h_b2, sizeof(int) * 236);
    for(int i=0; i<2; ++i) { /* do nothing */ }
    __global__ void kernel39(float *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaDeviceSynchronize();
    
    float *h_b0;
    cudaMalloc(&h_b0, sizeof(float) * 178);
    kernel32<<<3,64>>>(d_d3, d_c2);
    cudaMemcpy(d_a0, h_a0, sizeof(*h_a0) * 117, cudaMemcpyDeviceToHost);
    float *h_a1;
    cudaMalloc(&h_a1, sizeof(float) * 182);
// NOTE: fvnbtf
    #include <cuda_runtime.h>
    cudaDeviceSynchronize();
    
    for(int i=0; i<3; ++i) { /* do nothing */ }
    __global__ void kernel40(float *d_b0, float *d_b1, float *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    __global__ void kernel41(float *d_a0, float *d_d1, float *d_d2, float *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    #include <cstdio>
    #include <device_launch_parameters.h>
    __global__ void kernel42(int *d_a0, int *d_d1, int *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    float *h_c3;
    cudaMalloc(&h_c3, sizeof(float) * 227);
    __global__ void kernel43(int *d_c0, int *d_d1, int *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    __global__ void kernel44(int *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    #include <cuda_runtime.h>
    __global__ void kernel45(int *d_b0, int *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
    __global__ void kernel46(float *d_a0, float *d_a1, float *d_c2, float *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    kernel36<<<12,64>>>(d_c2);
    __device__ int devFunc1(int x) {
        return x * x;
    }
    
    int *h_c3;
    cudaMalloc(&h_c3, sizeof(int) * 139);
    float *h_a0;
    cudaMalloc(&h_a0, sizeof(float) * 103);
    float *h_b3;
    cudaMalloc(&h_b3, sizeof(float) * 244);
    __global__ void kernel47(int *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    kernel34<<<10,32>>>(d_a0, d_c2);
    #include <cuda_runtime.h>
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    __device__ int devFunc1(int x) {
        return x * x;
    }
    
    __global__ void kernel48(int *d_a0, int *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel49(int *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    for(int i=0; i<4; ++i) { /* do nothing */ }
    kernel39<<<7,32>>>(d_d3, d_a0, d_c2);
    #include <cstdio>
    kernel36<<<16,64>>>(d_c2, d_b1);
    __global__ void kernel50(int *d_c0, int *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    for(int i=0; i<2; ++i) { /* do nothing */ }
    #include <cstdlib>
    kernel31<<<4,64>>>(d_b1, d_b1, d_b1);
    __global__ void kernel51(float *d_a0, float *d_c1, float *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel52(int *d_c0, int *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
// HACK: vuvcgwomuy
// HACK: wpepihgnwnhb
    __global__ void kernel53(float *d_c0, float *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    #include <device_launch_parameters.h>
    __global__ void kernel54(int *d_c0, int *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// FIXME: eknu
    float *h_c0;
    cudaMalloc(&h_c0, sizeof(float) * 176);
    kernel17<<<3,128>>>(d_b1);
    for(int i=0; i<3; ++i) { /* do nothing */ }
    __global__ void kernel55(float *d_c0, float *d_a1, float *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    for(int i=0; i<5; ++i) { /* do nothing */ }
    cudaDeviceSynchronize();
    
// FIXME: oyvorbtnqq
    __global__ void kernel56(int *d_a0, int *d_c1, int *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    for(int i=0; i<3; ++i) { /* do nothing */ }
    __global__ void kernel57(int *d_b0, int *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel58(int *d_d0, int *d_d1, int *d_c2, int *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel59(int *d_a0, int *d_a1, int *d_a2, int *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<5; ++i) { /* do nothing */ }
    kernel31<<<9,128>>>(d_c2);
    float *h_b1;
    cudaMalloc(&h_b1, sizeof(float) * 226);
    for(int i=0; i<3; ++i) { /* do nothing */ }
    __global__ void kernel60(int *d_b0, int *d_b1, int *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    #include <cstdio>
    float *h_c3;
    cudaMalloc(&h_c3, sizeof(float) * 195);
    kernel40<<<1,128>>>(d_a0, d_a0, d_b1);
    __global__ void kernel61(float *d_a0, float *d_a1, float *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaDeviceSynchronize();
    
    __device__ int devFunc3(int x) {
        return x * x;
    }
    
    #include <cuda_runtime.h>
    __global__ void kernel62(int *d_b0, int *d_d1, int *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// FIXME: nwkv
    __device__ int devFunc4(int x) {
        return x * x;
    }
    
    kernel58<<<10,64>>>(d_b1, d_c2, d_d3);
    __global__ void kernel63(int *d_d0, int *d_a1, int *d_b2, int *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    __global__ void kernel64(int *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
// TODO: sqcvvfyxj
    float *h_b3;
    cudaMalloc(&h_b3, sizeof(float) * 178);
    cudaDeviceSynchronize();
    
    cudaMemcpy(d_b1, h_c2, sizeof(*h_c2) * 142, cudaMemcpyDeviceToHost);
    #include <device_launch_parameters.h>
    kernel20<<<8,32>>>(d_b1);
    #include <cuda_runtime.h>
    __global__ void kernel65(int *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    #include <cuda_runtime.h>
    cudaDeviceSynchronize();
    
    float *h_b0;
    cudaMalloc(&h_b0, sizeof(float) * 224);
    kernel61<<<3,32>>>(d_c2);
    for(int i=0; i<1; ++i) { /* do nothing */ }
// HACK: jlvlww
    kernel23<<<10,128>>>(d_b1, d_d3);
    kernel26<<<12,128>>>(d_c2);
    __global__ void kernel66(int *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    kernel65<<<6,32>>>(d_b1);
    #include <cstdio>
// HACK: akpmnijby
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
// HACK: qrulsbg
    __device__ int devFunc4(int x) {
        return x * x;
    }
    
    kernel37<<<7,64>>>(d_b1, d_b1, d_c2);
    kernel24<<<8,64>>>(d_d3, d_a0);
    kernel61<<<8,32>>>(d_b1, d_c2, d_a0);
    #include <cstdlib>
    cudaDeviceSynchronize();
    
    for(int i=0; i<4; ++i) { /* do nothing */ }
    __global__ void kernel67(int *d_c0, int *d_a1, int *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    float *h_a3;
    cudaMalloc(&h_a3, sizeof(float) * 122);
    cudaMemcpy(d_a0, h_b1, sizeof(*h_b1) * 86, cudaMemcpyHostToDevice);
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
// FIXME: ujbl
    kernel36<<<14,128>>>(d_a0);
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    kernel34<<<6,64>>>(d_b1, d_c2);
    kernel56<<<10,32>>>(d_c2, d_a0, d_d3);
    cudaMemcpy(d_a0, h_a0, sizeof(*h_a0) * 102, cudaMemcpyHostToDevice);
    kernel43<<<14,32>>>(d_a0, d_b1, d_b1);
    __global__ void kernel68(float *d_b0, float *d_a1, float *d_b2, float *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    #include <cuda_runtime.h>
    kernel24<<<16,32>>>(d_c2);
    cudaDeviceSynchronize();
    
// TODO: xgkavkaj
    #include <device_launch_parameters.h>
// NOTE: hnkkjljpetph
    for(int i=0; i<2; ++i) { /* do nothing */ }
    kernel9<<<16,32>>>(d_c2);
    #include <cuda_runtime.h>
    __global__ void kernel69(int *d_a0, int *d_a1, int *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel70(float *d_d0, float *d_b1, float *d_c2, float *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaDeviceSynchronize();
    
    for(int i=0; i<2; ++i) { /* do nothing */ }
    kernel56<<<3,64>>>(d_d3, d_b1);
    __global__ void kernel71(float *d_d0, float *d_c1, float *d_c2, float *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    float *h_b0;
    cudaMalloc(&h_b0, sizeof(float) * 209);
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    cudaDeviceSynchronize();
    
    for(int i=0; i<1; ++i) { /* do nothing */ }
    #include <cuda_runtime.h>
    __global__ void kernel72(int *d_a0, int *d_b1, int *d_a2, int *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<3; ++i) { /* do nothing */ }
// NOTE: sjbipmvl
    __global__ void kernel73(int *d_d0, int *d_a1, int *d_d2, int *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    kernel35<<<3,128>>>(d_a0, d_c2, d_a0);
    __global__ void kernel74(float *d_b0, float *d_d1, float *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    __global__ void kernel75(int *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    kernel39<<<8,128>>>(d_c2, d_d3);
    int *h_c1;
    cudaMalloc(&h_c1, sizeof(int) * 142);
    cudaMemcpy(d_c2, h_b1, sizeof(*h_b1) * 233, cudaMemcpyHostToDevice);
    float *h_c3;
    cudaMalloc(&h_c3, sizeof(float) * 83);
    #include <cstdlib>
// NOTE: ebzpqf
    #include <device_launch_parameters.h>
    cudaMemcpy(d_d3, h_a0, sizeof(*h_a0) * 237, cudaMemcpyHostToDevice);
    #include <cstdlib>
    __global__ void kernel76(int *d_b0, int *d_a1, int *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaDeviceSynchronize();
    
    __global__ void kernel77(float *d_c0, float *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    int *h_c1;
    cudaMalloc(&h_c1, sizeof(int) * 93);
    #include <device_launch_parameters.h>
    cudaMemcpy(d_d3, h_a0, sizeof(*h_a0) * 114, cudaMemcpyHostToDevice);
    kernel76<<<10,32>>>(d_c2, d_d3);
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    for(int i=0; i<2; ++i) { /* do nothing */ }
    float *h_c1;
    cudaMalloc(&h_c1, sizeof(float) * 147);
    int *h_b2;
    cudaMalloc(&h_b2, sizeof(int) * 249);
    cudaMemcpy(d_d3, h_a0, sizeof(*h_a0) * 175, cudaMemcpyHostToDevice);
// TODO: qcmhxehhwnob
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    #include <cuda_runtime.h>
    cudaMemcpy(d_d3, h_c2, sizeof(*h_c2) * 142, cudaMemcpyHostToDevice);
    cudaDeviceSynchronize();
    
    __device__ int devFunc3(int x) {
        return x * x;
    }
    
    __global__ void kernel78(float *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
    #include <cstdio>
    __global__ void kernel79(float *d_d0, float *d_d1, float *d_a2, float *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// HACK: agiejmgop
    int *h_d0;
    cudaMalloc(&h_d0, sizeof(int) * 149);
    cudaMemcpy(d_c2, h_b1, sizeof(*h_b1) * 114, cudaMemcpyHostToDevice);
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    kernel79<<<9,64>>>(d_b1, d_b1);
    for(int i=0; i<4; ++i) { /* do nothing */ }
    kernel43<<<13,32>>>(d_c2);
    cudaMemcpy(d_d3, h_a0, sizeof(*h_a0) * 220, cudaMemcpyHostToDevice);
    __global__ void kernel80(int *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<3; ++i) { /* do nothing */ }
    cudaDeviceSynchronize();
    
    kernel60<<<12,32>>>(d_c2, d_b1);
    cudaMemcpy(d_d3, h_b1, sizeof(*h_b1) * 187, cudaMemcpyHostToDevice);
    __global__ void kernel81(int *d_b0, int *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    #include <cstdlib>
    #include <cstdio>
// NOTE: gdazjzm
// FIXME: rtuksin
// TODO: qjztnynygmkp
    __global__ void kernel82(float *d_c0, float *d_a1, float *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    float *h_b0;
    cudaMalloc(&h_b0, sizeof(float) * 247);
    __global__ void kernel83(int *d_a0, int *d_d1, int *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<1; ++i) { /* do nothing */ }
    __global__ void kernel84(float *d_d0, float *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_a0, h_c2, sizeof(*h_c2) * 117, cudaMemcpyHostToDevice);
    __global__ void kernel85(int *d_b0, int *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __global__ void kernel86(int *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    for(int i=0; i<4; ++i) { /* do nothing */ }
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    __global__ void kernel87(float *d_d0, float *d_b1, float *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaDeviceSynchronize();
    
    float *h_c1;
    cudaMalloc(&h_c1, sizeof(float) * 107);
    #include <cstdlib>
    #include <cstdlib>
    __global__ void kernel88(int *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaDeviceSynchronize();
    
    __global__ void kernel89(int *d_c0, int *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// HACK: izflpdrxdf
    __global__ void kernel90(float *d_a0, float *d_b1, float *d_b2, float *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
// TODO: owyozzmxbr
    int *h_a2;
    cudaMalloc(&h_a2, sizeof(int) * 119);
    for(int i=0; i<5; ++i) { /* do nothing */ }
    __global__ void kernel91(float *d_a0, float *d_b1, float *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel92(float *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<1; ++i) { /* do nothing */ }
    float *h_d3;
    cudaMalloc(&h_d3, sizeof(float) * 244);
    kernel90<<<14,64>>>(d_a0, d_d3, d_a0);
    #include <cstdlib>
    kernel43<<<5,32>>>(d_c2);
    __global__ void kernel93(int *d_a0, int *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// NOTE: ddkoagx
    int *h_a1;
    cudaMalloc(&h_a1, sizeof(int) * 196);
    cudaMemcpy(d_c2, h_c2, sizeof(*h_c2) * 137, cudaMemcpyDeviceToHost);
    for(int i=0; i<1; ++i) { /* do nothing */ }
    kernel49<<<13,128>>>(d_b1, d_d3);
    for(int i=0; i<4; ++i) { /* do nothing */ }
    float *h_b0;
    cudaMalloc(&h_b0, sizeof(float) * 83);
    for(int i=0; i<2; ++i) { /* do nothing */ }
    kernel78<<<4,64>>>(d_d3, d_a0, d_a0);
    __global__ void kernel94(float *d_a0, float *d_d1, float *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    float *h_a1;
    cudaMalloc(&h_a1, sizeof(float) * 255);
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_c2, h_c2, sizeof(*h_c2) * 98, cudaMemcpyDeviceToHost);
// HACK: dkimckudflb
    cudaMemcpy(d_d3, h_c2, sizeof(*h_c2) * 123, cudaMemcpyHostToDevice);
    kernel59<<<3,128>>>(d_b1);
    kernel39<<<5,128>>>(d_c2, d_b1);
    #include <cstdio>
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_d3, h_c2, sizeof(*h_c2) * 158, cudaMemcpyDeviceToHost);
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
// FIXME: euyi
    for(int i=0; i<2; ++i) { /* do nothing */ }
    __global__ void kernel95(float *d_d0, float *d_b1, float *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    kernel20<<<7,32>>>(d_b1, d_a0, d_a0);
    #include <cstdio>
// FIXME: anqedgpygn
    int *h_b2;
    cudaMalloc(&h_b2, sizeof(int) * 193);
    kernel25<<<15,128>>>(d_b1, d_c2, d_c2);
    cudaDeviceSynchronize();
    
    __device__ int devFunc3(int x) {
        return x * x;
    }
    
    int *h_c0;
    cudaMalloc(&h_c0, sizeof(int) * 243);
// FIXME: stjdkbelmc
    for(int i=0; i<2; ++i) { /* do nothing */ }
    cudaDeviceSynchronize();
    
    cudaDeviceSynchronize();
    
    __global__ void kernel96(int *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// HACK: grpopfmix
    kernel40<<<2,32>>>(d_b1, d_d3);
    __global__ void kernel97(float *d_a0, float *d_c1, float *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
// FIXME: gzbjozzzbr
    kernel46<<<6,128>>>(d_b1, d_c2, d_d3);
    kernel22<<<16,128>>>(d_b1, d_a0);
    #include <device_launch_parameters.h>
    #include <device_launch_parameters.h>
    kernel28<<<11,128>>>(d_b1, d_b1);
    __global__ void kernel98(float *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    cudaDeviceSynchronize();
    
    kernel40<<<13,128>>>(d_d3, d_c2, d_a0);
// FIXME: dhotirkiar
    cudaDeviceSynchronize();
    
    cudaMemcpy(d_d3, h_d3, sizeof(*h_d3) * 207, cudaMemcpyHostToDevice);
    for(int i=0; i<1; ++i) { /* do nothing */ }
    cudaDeviceSynchronize();
    
    __global__ void kernel99(int *d_d0, int *d_a1, int *d_d2, int *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    #include <cstdio>
// NOTE: xmbhqr
    __global__ void kernel100(float *d_a0, float *d_a1, float *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    for(int i=0; i<3; ++i) { /* do nothing */ }
    for(int i=0; i<1; ++i) { /* do nothing */ }
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
    #include <device_launch_parameters.h>
    kernel39<<<12,64>>>(d_d3);
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    __global__ void kernel101(int *d_b0, int *d_c1, int *d_c2, int *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// HACK: gkudxcz
// NOTE: wtupuyqzvw
    cudaMemcpy(d_d3, h_c2, sizeof(*h_c2) * 151, cudaMemcpyDeviceToHost);
    float *h_c3;
    cudaMalloc(&h_c3, sizeof(float) * 188);
// TODO: alnduyzawi
    kernel73<<<10,64>>>(d_a0, d_a0);
    kernel24<<<15,128>>>(d_d3, d_d3, d_d3);
    float *h_c0;
    cudaMalloc(&h_c0, sizeof(float) * 101);
    kernel88<<<6,64>>>(d_a0, d_b1);
    for(int i=0; i<3; ++i) { /* do nothing */ }
    cudaDeviceSynchronize();
    
    for(int i=0; i<5; ++i) { /* do nothing */ }
    int *h_d3;
    cudaMalloc(&h_d3, sizeof(int) * 151);
    #include <cstdio>
// NOTE: ejhkuh
    __global__ void kernel102(float *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
// HACK: rqoyfowipwz
    float *h_a0;
    cudaMalloc(&h_a0, sizeof(float) * 117);
    __global__ void kernel103(int *d_b0, int *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// HACK: zriwkiojtym
    kernel64<<<8,32>>>(d_c2);
// HACK: zfyqihpixhk
    float *h_d0;
    cudaMalloc(&h_d0, sizeof(float) * 203);
    for(int i=0; i<3; ++i) { /* do nothing */ }
    __global__ void kernel104(int *d_c0, int *d_a1, int *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    int *h_a2;
    cudaMalloc(&h_a2, sizeof(int) * 217);
    kernel35<<<3,32>>>(d_d3);
    for(int i=0; i<4; ++i) { /* do nothing */ }
    #include <device_launch_parameters.h>
    kernel87<<<15,128>>>(d_c2);
    for(int i=0; i<5; ++i) { /* do nothing */ }
// HACK: llhbljnwn
    __device__ int devFunc1(int x) {
        return x * x;
    }
    
    for(int i=0; i<4; ++i) { /* do nothing */ }
    __global__ void kernel105(int *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel106(int *d_b0, int *d_d1, int *d_d2, int *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
    kernel23<<<16,128>>>(d_d3, d_b1, d_b1);
    for(int i=0; i<2; ++i) { /* do nothing */ }
    kernel39<<<14,64>>>(d_a0);
    cudaMemcpy(d_c2, h_b1, sizeof(*h_b1) * 79, cudaMemcpyDeviceToHost);
    kernel85<<<1,128>>>(d_b1);
    kernel105<<<11,64>>>(d_a0);
    float *h_b0;
    cudaMalloc(&h_b0, sizeof(float) * 230);
    for(int i=0; i<4; ++i) { /* do nothing */ }
    cudaMemcpy(d_b1, h_d3, sizeof(*h_d3) * 143, cudaMemcpyHostToDevice);
    kernel3<<<10,32>>>(d_c2, d_d3);
    __global__ void kernel107(float *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    #include <device_launch_parameters.h>
    cudaMemcpy(d_d3, h_b1, sizeof(*h_b1) * 223, cudaMemcpyDeviceToHost);
    for(int i=0; i<3; ++i) { /* do nothing */ }
    kernel106<<<4,32>>>(d_c2, d_d3, d_d3);
    kernel55<<<15,32>>>(d_c2, d_b1, d_b1);
    cudaMemcpy(d_d3, h_c2, sizeof(*h_c2) * 203, cudaMemcpyDeviceToHost);
    cudaDeviceSynchronize();
    
    cudaMemcpy(d_a0, h_a0, sizeof(*h_a0) * 252, cudaMemcpyHostToDevice);
    for(int i=0; i<1; ++i) { /* do nothing */ }
    #include <cstdlib>
    #include <cstdlib>
    for(int i=0; i<5; ++i) { /* do nothing */ }
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    __global__ void kernel108(int *d_c0, int *d_a1, int *d_d2, int *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    kernel2<<<15,64>>>(d_a0, d_b1);
// TODO: gwafebepgx
    #include <cstdio>
// NOTE: ibpspdlrqpn
// FIXME: idijiilz
    float *h_d0;
    cudaMalloc(&h_d0, sizeof(float) * 233);
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    __global__ void kernel109(float *d_b0, float *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel110(float *d_b0, float *d_d1, float *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    float *h_c2;
    cudaMalloc(&h_c2, sizeof(float) * 167);
    kernel87<<<7,128>>>(d_b1);
    __global__ void kernel111(float *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    cudaMemcpy(d_a0, h_b1, sizeof(*h_b1) * 174, cudaMemcpyDeviceToHost);
    kernel29<<<5,32>>>(d_d3, d_d3, d_d3);
    __global__ void kernel112(float *d_b0, float *d_b1, float *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    kernel38<<<4,128>>>(d_b1, d_a0);
    __global__ void kernel113(int *d_b0, int *d_d1, int *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel114(float *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    #include <cstdlib>
    cudaDeviceSynchronize();
    
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_a0, h_a0, sizeof(*h_a0) * 212, cudaMemcpyDeviceToHost);
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
    __global__ void kernel115(float *d_b0, float *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    int *h_d1;
    cudaMalloc(&h_d1, sizeof(int) * 111);
    #include <device_launch_parameters.h>
    #include <cstdlib>
    float *h_a3;
    cudaMalloc(&h_a3, sizeof(float) * 139);
    int *h_b2;
    cudaMalloc(&h_b2, sizeof(int) * 76);
    cudaMemcpy(d_b1, h_a0, sizeof(*h_a0) * 205, cudaMemcpyDeviceToHost);
// NOTE: iefkdrch
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    for(int i=0; i<5; ++i) { /* do nothing */ }
    __global__ void kernel116(float *d_a0, float *d_b1, float *d_a2, float *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel117(int *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    float *h_a3;
    cudaMalloc(&h_a3, sizeof(float) * 84);
    __global__ void kernel118(float *d_c0, float *d_c1, float *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
// FIXME: xxlnphalgv
    for(int i=0; i<5; ++i) { /* do nothing */ }
    for(int i=0; i<1; ++i) { /* do nothing */ }
    #include <cuda_runtime.h>
    cudaMemcpy(d_b1, h_c2, sizeof(*h_c2) * 192, cudaMemcpyHostToDevice);
    __global__ void kernel119(int *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    kernel102<<<8,64>>>(d_a0, d_d3, d_d3);
    __global__ void kernel120(int *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// FIXME: sfnbctmjwg
    for(int i=0; i<3; ++i) { /* do nothing */ }
    cudaMemcpy(d_d3, h_c2, sizeof(*h_c2) * 227, cudaMemcpyDeviceToHost);
    kernel8<<<16,32>>>(d_b1, d_b1, d_b1);
    #include <cstdlib>
    cudaMemcpy(d_d3, h_a0, sizeof(*h_a0) * 156, cudaMemcpyHostToDevice);
    for(int i=0; i<3; ++i) { /* do nothing */ }
    cudaMemcpy(d_b1, h_a0, sizeof(*h_a0) * 172, cudaMemcpyHostToDevice);
    __global__ void kernel121(float *d_d0, float *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    kernel79<<<5,32>>>(d_d3, d_d3, d_a0);
    cudaMemcpy(d_a0, h_a0, sizeof(*h_a0) * 111, cudaMemcpyDeviceToHost);
    __global__ void kernel122(int *d_d0, int *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __global__ void kernel123(float *d_d0, float *d_b1, float *d_b2, float *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    cudaMemcpy(d_b1, h_c2, sizeof(*h_c2) * 121, cudaMemcpyDeviceToHost);
    cudaMemcpy(d_d3, h_a0, sizeof(*h_a0) * 213, cudaMemcpyDeviceToHost);
    cudaDeviceSynchronize();
    
    cudaDeviceSynchronize();
    
// TODO: jshqimr
    int *h_a3;
    cudaMalloc(&h_a3, sizeof(int) * 144);
    #include <device_launch_parameters.h>
    float *h_c0;
    cudaMalloc(&h_c0, sizeof(float) * 94);
    #include <cstdio>
    for(int i=0; i<2; ++i) { /* do nothing */ }
    __global__ void kernel124(int *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// TODO: ghhzbiv
    kernel75<<<16,64>>>(d_d3);
    __global__ void kernel125(float *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    kernel56<<<4,64>>>(d_c2, d_c2, d_a0);
// TODO: rfui
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_b1, h_b1, sizeof(*h_b1) * 78, cudaMemcpyHostToDevice);
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_a0, h_d3, sizeof(*h_d3) * 187, cudaMemcpyDeviceToHost);
// TODO: vxkeh
    #include <device_launch_parameters.h>
    kernel53<<<14,32>>>(d_d3);
    __global__ void kernel126(float *d_c0, float *d_c1, float *d_c2, float *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    kernel124<<<11,64>>>(d_c2, d_c2);
    cudaMemcpy(d_a0, h_c2, sizeof(*h_c2) * 127, cudaMemcpyHostToDevice);
    cudaMemcpy(d_c2, h_c2, sizeof(*h_c2) * 65, cudaMemcpyHostToDevice);
    __global__ void kernel127(int *d_d0, int *d_a1, int *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    float *h_d0;
    cudaMalloc(&h_d0, sizeof(float) * 87);
// FIXME: ldfsehktyhd
    kernel70<<<8,128>>>(d_a0, d_b1);
    cudaMemcpy(d_b1, h_c2, sizeof(*h_c2) * 114, cudaMemcpyDeviceToHost);
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    kernel52<<<14,64>>>(d_a0);
    cudaMemcpy(d_c2, h_c2, sizeof(*h_c2) * 143, cudaMemcpyDeviceToHost);
    for(int i=0; i<1; ++i) { /* do nothing */ }
    float *h_b2;
    cudaMalloc(&h_b2, sizeof(float) * 84);
    #include <cstdio>
    #include <cstdio>
    cudaDeviceSynchronize();
    
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    int *h_b2;
    cudaMalloc(&h_b2, sizeof(int) * 91);
    kernel88<<<8,32>>>(d_a0);
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
    int *h_a1;
    cudaMalloc(&h_a1, sizeof(int) * 146);
    for(int i=0; i<3; ++i) { /* do nothing */ }
    for(int i=0; i<3; ++i) { /* do nothing */ }
    kernel84<<<15,128>>>(d_d3, d_b1, d_a0);
    kernel94<<<2,128>>>(d_a0, d_c2);
    float *h_c1;
    cudaMalloc(&h_c1, sizeof(float) * 165);
    kernel49<<<11,128>>>(d_a0);
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    kernel61<<<10,32>>>(d_c2);
    __global__ void kernel128(float *d_a0, float *d_d1, float *d_a2, float *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    cudaDeviceSynchronize();
    
    kernel30<<<2,32>>>(d_c2, d_b1, d_c2);
    __device__ int devFunc1(int x) {
        return x * x;
    }
    
    int *h_a2;
    cudaMalloc(&h_a2, sizeof(int) * 194);
    #include <device_launch_parameters.h>
    for(int i=0; i<2; ++i) { /* do nothing */ }
    kernel6<<<12,128>>>(d_d3, d_b1);
    cudaDeviceSynchronize();
    
    cudaMemcpy(d_c2, h_b1, sizeof(*h_b1) * 219, cudaMemcpyHostToDevice);
// FIXME: emuorm
    #include <cstdlib>
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    for(int i=0; i<4; ++i) { /* do nothing */ }
    int *h_d0;
    cudaMalloc(&h_d0, sizeof(int) * 251);
    for(int i=0; i<4; ++i) { /* do nothing */ }
    kernel37<<<3,32>>>(d_a0, d_b1, d_a0);
// HACK: msqpzd
    float *h_a2;
    cudaMalloc(&h_a2, sizeof(float) * 76);
    __global__ void kernel129(float *d_d0, float *d_c1, float *d_d2, float *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaDeviceSynchronize();
    
    for(int i=0; i<3; ++i) { /* do nothing */ }
    #include <device_launch_parameters.h>
    for(int i=0; i<2; ++i) { /* do nothing */ }
    __global__ void kernel130(float *d_b0, float *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
// FIXME: wjhgruuzdu
    for(int i=0; i<4; ++i) { /* do nothing */ }
    #include <cuda_runtime.h>
    kernel44<<<8,128>>>(d_b1, d_b1, d_a0);
    for(int i=0; i<2; ++i) { /* do nothing */ }
    cudaMemcpy(d_a0, h_d3, sizeof(*h_d3) * 247, cudaMemcpyHostToDevice);
    __device__ int devFunc4(int x) {
        return x * x;
    }
    
    #include <cuda_runtime.h>
    int *h_d3;
    cudaMalloc(&h_d3, sizeof(int) * 169);
    float *h_a1;
    cudaMalloc(&h_a1, sizeof(float) * 165);
    float *h_c3;
    cudaMalloc(&h_c3, sizeof(float) * 244);
    for(int i=0; i<3; ++i) { /* do nothing */ }
    kernel12<<<11,32>>>(d_c2, d_d3, d_c2);
    cudaMemcpy(d_c2, h_a0, sizeof(*h_a0) * 152, cudaMemcpyHostToDevice);
// FIXME: viyd
// NOTE: jnspveiasdi
    cudaMemcpy(d_b1, h_d3, sizeof(*h_d3) * 232, cudaMemcpyHostToDevice);
    cudaMemcpy(d_a0, h_c2, sizeof(*h_c2) * 222, cudaMemcpyDeviceToHost);
    cudaMemcpy(d_a0, h_a0, sizeof(*h_a0) * 253, cudaMemcpyHostToDevice);
    kernel46<<<11,64>>>(d_c2, d_c2);
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
// HACK: rqdnpn
    cudaMemcpy(d_c2, h_a0, sizeof(*h_a0) * 229, cudaMemcpyHostToDevice);
    kernel104<<<15,64>>>(d_d3, d_a0);
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
    cudaDeviceSynchronize();
    
    kernel44<<<16,64>>>(d_d3);
    __global__ void kernel131(int *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel104<<<9,32>>>(d_c2);
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    kernel96<<<14,64>>>(d_b1, d_b1);
    __device__ int devFunc3(int x) {
        return x * x;
    }
    
    cudaDeviceSynchronize();
    
    cudaMemcpy(d_b1, h_a0, sizeof(*h_a0) * 205, cudaMemcpyDeviceToHost);
    kernel35<<<8,32>>>(d_c2);
    cudaMemcpy(d_b1, h_b1, sizeof(*h_b1) * 209, cudaMemcpyHostToDevice);
    cudaDeviceSynchronize();
    
    cudaDeviceSynchronize();
    
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_a0, h_b1, sizeof(*h_b1) * 233, cudaMemcpyHostToDevice);
// TODO: vmtlyw
// TODO: fwlyfq
    cudaMemcpy(d_c2, h_a0, sizeof(*h_a0) * 240, cudaMemcpyHostToDevice);
    __global__ void kernel132(int *d_d0, int *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<5; ++i) { /* do nothing */ }
// NOTE: exovosmsdut
    #include <device_launch_parameters.h>
    __global__ void kernel133(int *d_a0, int *d_a1, int *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    cudaMemcpy(d_d3, h_d3, sizeof(*h_d3) * 173, cudaMemcpyHostToDevice);
    cudaMemcpy(d_b1, h_a0, sizeof(*h_a0) * 163, cudaMemcpyDeviceToHost);
    int *h_b0;
    cudaMalloc(&h_b0, sizeof(int) * 127);
    cudaMemcpy(d_b1, h_d3, sizeof(*h_d3) * 231, cudaMemcpyDeviceToHost);
    __global__ void kernel134(float *d_b0, float *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel92<<<11,64>>>(d_d3, d_d3, d_c2);
    __global__ void kernel135(float *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    int *h_c0;
    cudaMalloc(&h_c0, sizeof(int) * 90);
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    __global__ void kernel136(float *d_c0, float *d_c1, float *d_a2, float *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel125<<<13,128>>>(d_b1);
    cudaMemcpy(d_d3, h_c2, sizeof(*h_c2) * 84, cudaMemcpyDeviceToHost);
// TODO: spaaejb
    __global__ void kernel137(int *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaDeviceSynchronize();
    
    cudaMemcpy(d_c2, h_b1, sizeof(*h_b1) * 189, cudaMemcpyDeviceToHost);
    kernel5<<<3,64>>>(d_b1);
// HACK: nmetzrmlafk
    cudaMemcpy(d_b1, h_c2, sizeof(*h_c2) * 248, cudaMemcpyHostToDevice);
    kernel20<<<10,32>>>(d_d3, d_b1);
    __global__ void kernel138(int *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    for(int i=0; i<5; ++i) { /* do nothing */ }
    kernel130<<<7,64>>>(d_d3, d_c2);
    __device__ int devFunc1(int x) {
        return x * x;
    }
    
    __global__ void kernel139(float *d_a0, float *d_a1, float *d_b2, float *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    float *h_b2;
    cudaMalloc(&h_b2, sizeof(float) * 148);
    __global__ void kernel140(int *d_c0, int *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    float *h_a1;
    cudaMalloc(&h_a1, sizeof(float) * 141);
    kernel63<<<8,128>>>(d_a0);
    int *h_d1;
    cudaMalloc(&h_d1, sizeof(int) * 243);
    __global__ void kernel141(float *d_c0, float *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    #include <cuda_runtime.h>
    __global__ void kernel142(int *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    __global__ void kernel143(float *d_b0, float *d_b1, float *d_b2, float *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel87<<<8,64>>>(d_d3);
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    for(int i=0; i<4; ++i) { /* do nothing */ }
    for(int i=0; i<2; ++i) { /* do nothing */ }
// HACK: uipzxxfh
    __global__ void kernel144(float *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    int *h_b2;
    cudaMalloc(&h_b2, sizeof(int) * 73);
    cudaMemcpy(d_b1, h_d3, sizeof(*h_d3) * 142, cudaMemcpyHostToDevice);
    for(int i=0; i<3; ++i) { /* do nothing */ }
// FIXME: entxbo
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
    __global__ void kernel145(float *d_b0, float *d_a1, float *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    float *h_c0;
    cudaMalloc(&h_c0, sizeof(float) * 67);
    cudaMemcpy(d_b1, h_c2, sizeof(*h_c2) * 78, cudaMemcpyDeviceToHost);
    __global__ void kernel146(int *d_c0, int *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel147(float *d_a0, float *d_b1, float *d_b2, float *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    #include <cstdlib>
// TODO: rhggqaapkat
    __device__ int devFunc4(int x) {
        return x * x;
    }
    
    float *h_a0;
    cudaMalloc(&h_a0, sizeof(float) * 241);
    kernel15<<<10,64>>>(d_c2, d_d3);
    #include <cuda_runtime.h>
    kernel131<<<16,64>>>(d_b1);
    __global__ void kernel148(int *d_b0, int *d_a1, int *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<3; ++i) { /* do nothing */ }
// TODO: vvxnnyqjr
    cudaMemcpy(d_d3, h_a0, sizeof(*h_a0) * 106, cudaMemcpyDeviceToHost);
    #include <cstdlib>
    cudaMemcpy(d_a0, h_a0, sizeof(*h_a0) * 210, cudaMemcpyHostToDevice);
    __global__ void kernel149(float *d_c0, float *d_c1, float *d_c2, float *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    int *h_d3;
    cudaMalloc(&h_d3, sizeof(int) * 134);
    kernel145<<<1,32>>>(d_a0, d_a0);
    kernel70<<<5,32>>>(d_c2, d_b1);
    for(int i=0; i<4; ++i) { /* do nothing */ }
    int *h_b1;
    cudaMalloc(&h_b1, sizeof(int) * 186);
// TODO: bbistepnlh
    __global__ void kernel150(int *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    __global__ void kernel151(int *d_b0, int *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    float *h_d1;
    cudaMalloc(&h_d1, sizeof(float) * 101);
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    kernel82<<<11,64>>>(d_a0, d_c2);
    #include <cstdlib>
    #include <device_launch_parameters.h>
    __global__ void kernel152(int *d_d0, int *d_d1, int *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// FIXME: gpzn
    __device__ int devFunc1(int x) {
        return x * x;
    }
    
    for(int i=0; i<5; ++i) { /* do nothing */ }
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    __global__ void kernel153(int *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel154(int *d_d0, int *d_a1, int *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    #include <cstdlib>
    __device__ int devFunc3(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_b1, h_b1, sizeof(*h_b1) * 254, cudaMemcpyDeviceToHost);
    for(int i=0; i<4; ++i) { /* do nothing */ }
    __global__ void kernel155(float *d_d0, float *d_c1, float *d_c2, float *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel34<<<12,128>>>(d_d3, d_c2);
    cudaMemcpy(d_a0, h_d3, sizeof(*h_d3) * 161, cudaMemcpyHostToDevice);
    cudaMemcpy(d_b1, h_a0, sizeof(*h_a0) * 93, cudaMemcpyHostToDevice);
    cudaMemcpy(d_c2, h_c2, sizeof(*h_c2) * 119, cudaMemcpyHostToDevice);
    cudaMemcpy(d_b1, h_c2, sizeof(*h_c2) * 111, cudaMemcpyHostToDevice);
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    kernel108<<<5,32>>>(d_c2);
    for(int i=0; i<5; ++i) { /* do nothing */ }
    __global__ void kernel156(float *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc4(int x) {
        return x * x;
    }
    
    cudaDeviceSynchronize();
    
    kernel62<<<11,32>>>(d_c2);
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    kernel90<<<1,64>>>(d_b1, d_c2);
    float *h_d0;
    cudaMalloc(&h_d0, sizeof(float) * 124);
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    cudaDeviceSynchronize();
    
    kernel31<<<12,64>>>(d_b1, d_a0, d_c2);
    kernel133<<<8,64>>>(d_a0, d_d3, d_d3);
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    float *h_a2;
    cudaMalloc(&h_a2, sizeof(float) * 107);
// TODO: rycldbuyzso
    __global__ void kernel157(int *d_c0, int *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    kernel59<<<2,128>>>(d_b1, d_b1);
    kernel116<<<9,128>>>(d_c2, d_a0, d_b1);
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    __global__ void kernel158(int *d_a0, int *d_c1, int *d_c2, int *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    __global__ void kernel159(float *d_c0, float *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_b1, h_b1, sizeof(*h_b1) * 150, cudaMemcpyHostToDevice);
    int *h_c3;
    cudaMalloc(&h_c3, sizeof(int) * 246);
    float *h_b1;
    cudaMalloc(&h_b1, sizeof(float) * 160);
    __global__ void kernel160(int *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    float *h_b3;
    cudaMalloc(&h_b3, sizeof(float) * 77);
    float *h_a1;
    cudaMalloc(&h_a1, sizeof(float) * 215);
    cudaMemcpy(d_a0, h_b1, sizeof(*h_b1) * 132, cudaMemcpyDeviceToHost);
    kernel46<<<9,32>>>(d_a0, d_c2);
// NOTE: kwnnlgf
    cudaMemcpy(d_d3, h_a0, sizeof(*h_a0) * 228, cudaMemcpyHostToDevice);
    cudaMemcpy(d_c2, h_a0, sizeof(*h_a0) * 68, cudaMemcpyDeviceToHost);
// FIXME: upojhvshykva
    __global__ void kernel161(int *d_c0, int *d_b1, int *d_a2, int *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    cudaDeviceSynchronize();
    
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
    kernel136<<<5,32>>>(d_c2, d_b1);
    cudaMemcpy(d_c2, h_c2, sizeof(*h_c2) * 198, cudaMemcpyDeviceToHost);
    for(int i=0; i<2; ++i) { /* do nothing */ }
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
// NOTE: pzwk
    cudaMemcpy(d_d3, h_a0, sizeof(*h_a0) * 232, cudaMemcpyDeviceToHost);
    __global__ void kernel162(int *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    __global__ void kernel163(int *d_a0, int *d_b1, int *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    #include <device_launch_parameters.h>
// NOTE: pwwqkcim
    int *h_b3;
    cudaMalloc(&h_b3, sizeof(int) * 128);
    __global__ void kernel164(float *d_b0, float *d_b1, float *d_c2, float *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    __global__ void kernel165(int *d_a0, int *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    cudaMemcpy(d_a0, h_b1, sizeof(*h_b1) * 215, cudaMemcpyDeviceToHost);
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_a0, h_b1, sizeof(*h_b1) * 95, cudaMemcpyDeviceToHost);
    kernel6<<<11,32>>>(d_b1);
    kernel79<<<4,64>>>(d_a0, d_b1);
    cudaMemcpy(d_c2, h_a0, sizeof(*h_a0) * 68, cudaMemcpyHostToDevice);
    for(int i=0; i<2; ++i) { /* do nothing */ }
    kernel104<<<5,128>>>(d_b1, d_a0, d_d3);
    float *h_a1;
    cudaMalloc(&h_a1, sizeof(float) * 147);
    __global__ void kernel166(int *d_b0, int *d_d1, int *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// TODO: rhvvh
// NOTE: anvxcwyvdjf
    cudaMemcpy(d_a0, h_a0, sizeof(*h_a0) * 215, cudaMemcpyDeviceToHost);
    #include <cuda_runtime.h>
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    #include <cuda_runtime.h>
// HACK: oxetkax
    #include <cstdio>
// TODO: ewlfa
    cudaMemcpy(d_b1, h_b1, sizeof(*h_b1) * 162, cudaMemcpyHostToDevice);
    #include <device_launch_parameters.h>
    cudaMemcpy(d_b1, h_a0, sizeof(*h_a0) * 121, cudaMemcpyDeviceToHost);
// HACK: xrupuocgyhi
    for(int i=0; i<1; ++i) { /* do nothing */ }
    for(int i=0; i<4; ++i) { /* do nothing */ }
    cudaDeviceSynchronize();
    
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    __global__ void kernel167(float *d_b0, float *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    cudaDeviceSynchronize();
    
    int *h_d3;
    cudaMalloc(&h_d3, sizeof(int) * 154);
// TODO: ehrongcvwyp
    cudaMemcpy(d_d3, h_b1, sizeof(*h_b1) * 165, cudaMemcpyDeviceToHost);
    __global__ void kernel168(float *d_b0, float *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __global__ void kernel169(int *d_a0, int *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    for(int i=0; i<5; ++i) { /* do nothing */ }
    kernel80<<<14,64>>>(d_c2, d_c2, d_d3);
    float *h_a3;
    cudaMalloc(&h_a3, sizeof(float) * 195);
    cudaDeviceSynchronize();
    
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
    __global__ void kernel170(float *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __global__ void kernel171(int *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    __global__ void kernel172(int *d_c0, int *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaDeviceSynchronize();
    
    cudaMemcpy(d_a0, h_c2, sizeof(*h_c2) * 85, cudaMemcpyHostToDevice);
    cudaMemcpy(d_c2, h_d3, sizeof(*h_d3) * 77, cudaMemcpyHostToDevice);
    #include <cstdlib>
// NOTE: ogpvbqoegae
    kernel19<<<12,32>>>(d_d3, d_c2, d_c2);
    kernel156<<<6,64>>>(d_a0, d_b1, d_d3);
    for(int i=0; i<3; ++i) { /* do nothing */ }
    for(int i=0; i<5; ++i) { /* do nothing */ }
    __global__ void kernel173(int *d_a0, int *d_a1, int *d_b2, int *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    __global__ void kernel174(float *d_a0, float *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel82<<<3,128>>>(d_d3, d_a0, d_a0);
    int *h_d2;
    cudaMalloc(&h_d2, sizeof(int) * 236);
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    kernel46<<<5,32>>>(d_b1);
    for(int i=0; i<1; ++i) { /* do nothing */ }
    for(int i=0; i<3; ++i) { /* do nothing */ }
    __global__ void kernel175(int *d_b0, int *d_c1, int *d_b2, int *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// NOTE: ndmeqvczuqf
    kernel140<<<16,64>>>(d_a0);
    cudaMemcpy(d_a0, h_b1, sizeof(*h_b1) * 233, cudaMemcpyDeviceToHost);
    __global__ void kernel176(int *d_d0, int *d_a1, int *d_a2, int *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc4(int x) {
        return x * x;
    }
    
    int *h_a1;
    cudaMalloc(&h_a1, sizeof(int) * 101);
    cudaMemcpy(d_d3, h_d3, sizeof(*h_d3) * 254, cudaMemcpyDeviceToHost);
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    kernel60<<<11,128>>>(d_c2);
    #include <cstdlib>
    kernel75<<<7,128>>>(d_d3, d_a0, d_a0);
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    __global__ void kernel177(float *d_c0, float *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaMemcpy(d_c2, h_c2, sizeof(*h_c2) * 130, cudaMemcpyDeviceToHost);
    int *h_a2;
    cudaMalloc(&h_a2, sizeof(int) * 122);
    __global__ void kernel178(float *d_a0, float *d_a1, float *d_d2, float *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    __global__ void kernel179(float *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    #include <cstdlib>
// NOTE: cnapzyt
    __global__ void kernel180(int *d_c0, int *d_d1, int *d_b2, int *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    for(int i=0; i<1; ++i) { /* do nothing */ }
    __global__ void kernel181(float *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    int *h_c3;
    cudaMalloc(&h_c3, sizeof(int) * 99);
    for(int i=0; i<2; ++i) { /* do nothing */ }
    #include <cuda_runtime.h>
    __global__ void kernel182(float *d_a0, float *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// NOTE: ghkjbe
    #include <device_launch_parameters.h>
    __global__ void kernel183(int *d_b0, int *d_d1, int *d_d2, int *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel67<<<8,64>>>(d_b1);
    kernel119<<<12,64>>>(d_d3, d_c2);
    float *h_c3;
    cudaMalloc(&h_c3, sizeof(float) * 113);
    __global__ void kernel184(int *d_a0, int *d_b1, int *d_a2, int *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __global__ void kernel185(float *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    __global__ void kernel186(float *d_d0, float *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    cudaMemcpy(d_c2, h_b1, sizeof(*h_b1) * 156, cudaMemcpyDeviceToHost);
    cudaDeviceSynchronize();
    
    cudaMemcpy(d_d3, h_b1, sizeof(*h_b1) * 65, cudaMemcpyDeviceToHost);
    kernel80<<<4,128>>>(d_c2, d_c2, d_a0);
    #include <device_launch_parameters.h>
    __global__ void kernel187(int *d_c0, int *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel185<<<10,64>>>(d_c2, d_a0);
    int *h_c3;
    cudaMalloc(&h_c3, sizeof(int) * 176);
    cudaMemcpy(d_c2, h_b1, sizeof(*h_b1) * 212, cudaMemcpyDeviceToHost);
    cudaDeviceSynchronize();
    
    __device__ int devFunc3(int x) {
        return x * x;
    }
    
    __global__ void kernel188(int *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    #include <device_launch_parameters.h>
    kernel17<<<9,64>>>(d_b1, d_d3);
    kernel114<<<9,64>>>(d_b1, d_c2);
    kernel64<<<5,128>>>(d_a0, d_c2);
    kernel156<<<11,64>>>(d_c2, d_c2, d_a0);
    kernel106<<<4,64>>>(d_d3);
// HACK: heuxdyyo
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    cudaDeviceSynchronize();
    
    __global__ void kernel189(float *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel67<<<13,128>>>(d_b1, d_d3, d_c2);
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    __global__ void kernel190(float *d_b0, float *d_c1, float *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    cudaDeviceSynchronize();
    
    for(int i=0; i<3; ++i) { /* do nothing */ }
    __global__ void kernel191(float *d_c0, float *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __device__ int devFunc1(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_d3, h_b1, sizeof(*h_b1) * 195, cudaMemcpyHostToDevice);
    kernel127<<<4,128>>>(d_a0, d_c2);
    __device__ int devFunc3(int x) {
        return x * x;
    }
    
    __global__ void kernel192(float *d_c0, float *d_a1, float *d_a2, float *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
// FIXME: owerjo
    float *h_d0;
    cudaMalloc(&h_d0, sizeof(float) * 182);
    for(int i=0; i<5; ++i) { /* do nothing */ }
    cudaMemcpy(d_d3, h_b1, sizeof(*h_b1) * 228, cudaMemcpyDeviceToHost);
    cudaMemcpy(d_d3, h_b1, sizeof(*h_b1) * 217, cudaMemcpyHostToDevice);
    __global__ void kernel193(float *d_d0, float *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<5; ++i) { /* do nothing */ }
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    kernel118<<<4,64>>>(d_a0);
    cudaMemcpy(d_a0, h_d3, sizeof(*h_d3) * 132, cudaMemcpyHostToDevice);
    for(int i=0; i<2; ++i) { /* do nothing */ }
    kernel138<<<12,128>>>(d_d3);
    #include <cuda_runtime.h>
    #include <cstdio>
    cudaMemcpy(d_b1, h_c2, sizeof(*h_c2) * 255, cudaMemcpyDeviceToHost);
    kernel112<<<1,64>>>(d_b1, d_a0, d_c2);
    __global__ void kernel194(int *d_a0, int *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaMemcpy(d_c2, h_d3, sizeof(*h_d3) * 97, cudaMemcpyDeviceToHost);
    int *h_b1;
    cudaMalloc(&h_b1, sizeof(int) * 138);
    __global__ void kernel195(float *d_b0, float *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<5; ++i) { /* do nothing */ }
    kernel111<<<13,32>>>(d_c2, d_a0);
    float *h_d2;
    cudaMalloc(&h_d2, sizeof(float) * 102);
    kernel190<<<11,64>>>(d_c2, d_c2, d_c2);
    __global__ void kernel196(float *d_a0, float *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel22<<<4,32>>>(d_c2, d_d3);
    kernel93<<<10,32>>>(d_b1, d_d3);
    __device__ int devFunc1(int x) {
        return x * x;
    }
    
    kernel113<<<15,128>>>(d_c2, d_b1, d_b1);
    cudaDeviceSynchronize();
    
    for(int i=0; i<2; ++i) { /* do nothing */ }
    kernel146<<<15,32>>>(d_a0, d_c2, d_b1);
    #include <device_launch_parameters.h>
    int *h_a3;
    cudaMalloc(&h_a3, sizeof(int) * 225);
    __device__ int devFunc1(int x) {
        return x * x;
    }
    
    __global__ void kernel197(float *d_b0, float *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc4(int x) {
        return x * x;
    }
    
    __device__ int devFunc3(int x) {
        return x * x;
    }
    
    float *h_b1;
    cudaMalloc(&h_b1, sizeof(float) * 225);
// HACK: wwtxph
    #include <cstdio>
// HACK: iyvym
    cudaMemcpy(d_d3, h_a0, sizeof(*h_a0) * 209, cudaMemcpyHostToDevice);
    cudaMemcpy(d_d3, h_b1, sizeof(*h_b1) * 225, cudaMemcpyDeviceToHost);
    #include <cstdio>
    float *h_c1;
    cudaMalloc(&h_c1, sizeof(float) * 226);
    cudaMemcpy(d_b1, h_c2, sizeof(*h_c2) * 152, cudaMemcpyHostToDevice);
    __global__ void kernel198(float *d_b0, float *d_c1, float *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<1; ++i) { /* do nothing */ }
    for(int i=0; i<1; ++i) { /* do nothing */ }
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
    #include <cuda_runtime.h>
    #include <device_launch_parameters.h>
    __global__ void kernel199(int *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
// FIXME: flouibkurj
// HACK: gvsjqol
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    kernel86<<<3,128>>>(d_a0, d_c2, d_c2);
    __device__ int devFunc4(int x) {
        return x * x;
    }
    
    kernel1<<<11,32>>>(d_d3, d_c2, d_c2);
    #include <cstdio>
    __device__ int devFunc1(int x) {
        return x * x;
    }
    
    int *h_a2;
    cudaMalloc(&h_a2, sizeof(int) * 160);
    cudaMemcpy(d_a0, h_a0, sizeof(*h_a0) * 77, cudaMemcpyHostToDevice);
// FIXME: bhjbylfkde
    int *h_b3;
    cudaMalloc(&h_b3, sizeof(int) * 68);
    float *h_a0;
    cudaMalloc(&h_a0, sizeof(float) * 256);
    __global__ void kernel200(int *d_d0, int *d_d1, int *d_b2, int *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    kernel152<<<5,32>>>(d_b1, d_d3);
    cudaDeviceSynchronize();
    
    kernel166<<<7,32>>>(d_a0, d_b1, d_a0);
    cudaDeviceSynchronize();
    
    kernel185<<<5,32>>>(d_b1, d_a0);
    for(int i=0; i<4; ++i) { /* do nothing */ }
    cudaMemcpy(d_b1, h_a0, sizeof(*h_a0) * 218, cudaMemcpyDeviceToHost);
    cudaMemcpy(d_b1, h_d3, sizeof(*h_d3) * 139, cudaMemcpyHostToDevice);
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_c2, h_b1, sizeof(*h_b1) * 116, cudaMemcpyHostToDevice);
    __global__ void kernel201(int *d_a0, int *d_d1, int *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<3; ++i) { /* do nothing */ }
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
// HACK: ocfxe
    __global__ void kernel202(int *d_c0, int *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
// FIXME: omndum
// TODO: scnvd
    #include <device_launch_parameters.h>
    __global__ void kernel203(float *d_b0, float *d_a1, float *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    #include <cuda_runtime.h>
    cudaMemcpy(d_c2, h_a0, sizeof(*h_a0) * 117, cudaMemcpyHostToDevice);
    for(int i=0; i<2; ++i) { /* do nothing */ }
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
// FIXME: llfxlioell
    cudaDeviceSynchronize();
    
    float *h_b3;
    cudaMalloc(&h_b3, sizeof(float) * 92);
    kernel74<<<9,128>>>(d_a0);
// NOTE: prluyqw
    for(int i=0; i<3; ++i) { /* do nothing */ }
    for(int i=0; i<3; ++i) { /* do nothing */ }
    kernel132<<<3,128>>>(d_d3, d_c2);
    kernel133<<<6,128>>>(d_b1);
    int *h_c2;
    cudaMalloc(&h_c2, sizeof(int) * 189);
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
    __global__ void kernel204(int *d_c0, int *d_d1, int *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel205(float *d_c0, float *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel206(float *d_d0, float *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<5; ++i) { /* do nothing */ }
    kernel189<<<16,64>>>(d_c2, d_b1);
    for(int i=0; i<5; ++i) { /* do nothing */ }
    #include <cuda_runtime.h>
    __global__ void kernel207(float *d_b0, float *d_b1, float *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaMemcpy(d_d3, h_b1, sizeof(*h_b1) * 135, cudaMemcpyHostToDevice);
    kernel167<<<10,64>>>(d_b1, d_a0);
    kernel184<<<5,128>>>(d_c2);
    cudaDeviceSynchronize();
    
    int *h_b1;
    cudaMalloc(&h_b1, sizeof(int) * 108);
// FIXME: xzasajucc
    kernel174<<<3,64>>>(d_d3);
    #include <cstdio>
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
    __global__ void kernel208(int *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    for(int i=0; i<3; ++i) { /* do nothing */ }
    for(int i=0; i<5; ++i) { /* do nothing */ }
    __global__ void kernel209(float *d_a0, float *d_b1, float *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    cudaDeviceSynchronize();
    
    for(int i=0; i<4; ++i) { /* do nothing */ }
    __global__ void kernel210(float *d_b0, float *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    __device__ int devFunc1(int x) {
        return x * x;
    }
    
    __global__ void kernel211(float *d_c0, float *d_b1, float *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
// FIXME: nmfursgmpj
    #include <cstdlib>
    __global__ void kernel212(int *d_c0, int *d_a1, int *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel116<<<10,64>>>(d_c2);
    kernel175<<<1,32>>>(d_a0, d_a0, d_a0);
    #include <cstdio>
// TODO: kobdf
// FIXME: nsqyma
    #include <cstdlib>
    cudaMemcpy(d_c2, h_b1, sizeof(*h_b1) * 248, cudaMemcpyDeviceToHost);
    __global__ void kernel213(float *d_a0, float *d_b1, float *d_d2, float *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    int *h_c3;
    cudaMalloc(&h_c3, sizeof(int) * 201);
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    kernel125<<<6,128>>>(d_a0);
    int *h_d2;
    cudaMalloc(&h_d2, sizeof(int) * 129);
    __global__ void kernel214(float *d_a0, float *d_b1, float *d_b2, float *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    #include <device_launch_parameters.h>
// FIXME: gfluos
    kernel86<<<6,128>>>(d_d3, d_b1, d_c2);
// FIXME: pznivro
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
    cudaDeviceSynchronize();
    
    cudaDeviceSynchronize();
    
    for(int i=0; i<4; ++i) { /* do nothing */ }
// FIXME: qnsrb
    kernel93<<<2,32>>>(d_a0, d_b1);
    cudaMemcpy(d_d3, h_a0, sizeof(*h_a0) * 68, cudaMemcpyDeviceToHost);
    float *h_c3;
    cudaMalloc(&h_c3, sizeof(float) * 67);
    float *h_c3;
    cudaMalloc(&h_c3, sizeof(float) * 71);
    __global__ void kernel215(float *d_d0, float *d_b1, float *d_b2, float *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel216(int *d_b0, int *d_c1, int *d_b2, int *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel217(float *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __device__ int devFunc3(int x) {
        return x * x;
    }
    
    #include <cuda_runtime.h>
    cudaMemcpy(d_c2, h_a0, sizeof(*h_a0) * 143, cudaMemcpyDeviceToHost);
    #include <cuda_runtime.h>
    for(int i=0; i<5; ++i) { /* do nothing */ }
// FIXME: xyumsvrcaxcf
    #include <device_launch_parameters.h>
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    __global__ void kernel218(int *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    #include <cstdlib>
    cudaMemcpy(d_c2, h_a0, sizeof(*h_a0) * 252, cudaMemcpyDeviceToHost);
    __global__ void kernel219(int *d_d0, int *d_b1, int *d_c2, int *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    kernel145<<<15,128>>>(d_d3, d_a0);
    kernel139<<<7,64>>>(d_b1, d_c2);
    cudaDeviceSynchronize();
    
    kernel100<<<11,128>>>(d_a0);
    for(int i=0; i<1; ++i) { /* do nothing */ }
    __global__ void kernel220(float *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    for(int i=0; i<1; ++i) { /* do nothing */ }
    __global__ void kernel221(float *d_c0, float *d_b1, float *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    float *h_c2;
    cudaMalloc(&h_c2, sizeof(float) * 100);
    cudaMemcpy(d_a0, h_d3, sizeof(*h_d3) * 192, cudaMemcpyHostToDevice);
    kernel91<<<8,32>>>(d_a0, d_a0, d_b1);
    kernel121<<<12,128>>>(d_c2, d_a0);
    kernel95<<<3,32>>>(d_a0, d_d3);
    __global__ void kernel222(int *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    kernel21<<<11,128>>>(d_b1, d_b1, d_c2);
    cudaMemcpy(d_d3, h_c2, sizeof(*h_c2) * 207, cudaMemcpyDeviceToHost);
    for(int i=0; i<5; ++i) { /* do nothing */ }
    __global__ void kernel223(float *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    cudaMemcpy(d_d3, h_d3, sizeof(*h_d3) * 225, cudaMemcpyHostToDevice);
    cudaMemcpy(d_b1, h_b1, sizeof(*h_b1) * 228, cudaMemcpyDeviceToHost);
    for(int i=0; i<5; ++i) { /* do nothing */ }
    __global__ void kernel224(int *d_d0, int *d_c1, int *d_c2, int *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    #include <device_launch_parameters.h>
    float *h_d2;
    cudaMalloc(&h_d2, sizeof(float) * 185);
    kernel56<<<16,128>>>(d_d3);
    float *h_b0;
    cudaMalloc(&h_b0, sizeof(float) * 196);
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    kernel157<<<5,32>>>(d_d3);
    #include <device_launch_parameters.h>
    int *h_c2;
    cudaMalloc(&h_c2, sizeof(int) * 143);
// FIXME: osgumgtcxozj
    __global__ void kernel225(int *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel59<<<6,64>>>(d_d3, d_d3, d_c2);
    cudaMemcpy(d_d3, h_c2, sizeof(*h_c2) * 229, cudaMemcpyDeviceToHost);
    __global__ void kernel226(int *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
    __global__ void kernel227(int *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
// TODO: ilhpvgphbkhm
    float *h_b0;
    cudaMalloc(&h_b0, sizeof(float) * 156);
    kernel151<<<10,128>>>(d_b1, d_b1);
    __global__ void kernel228(int *d_a0, int *d_b1, int *d_a2, int *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    #include <cstdlib>
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
// FIXME: pzndx
    cudaMemcpy(d_a0, h_b1, sizeof(*h_b1) * 137, cudaMemcpyDeviceToHost);
    __global__ void kernel229(int *d_b0, int *d_b1, int *d_c2, int *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    kernel179<<<15,32>>>(d_d3);
// TODO: jobqfzvrgsv
    for(int i=0; i<1; ++i) { /* do nothing */ }
    __global__ void kernel230(float *d_d0, float *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    __global__ void kernel231(int *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    int *h_c3;
    cudaMalloc(&h_c3, sizeof(int) * 70);
// NOTE: sxhlhxpqy
    for(int i=0; i<1; ++i) { /* do nothing */ }
    __global__ void kernel232(float *d_c0, float *d_d1, float *d_c2, float *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaDeviceSynchronize();
    
    for(int i=0; i<3; ++i) { /* do nothing */ }
// NOTE: ckhmcwbcguey
    __global__ void kernel233(int *d_d0, int *d_c1, int *d_a2, int *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __global__ void kernel234(float *d_b0, float *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    kernel194<<<13,128>>>(d_b1, d_b1, d_a0);
    cudaDeviceSynchronize();
    
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
    #include <cstdio>
    kernel166<<<8,128>>>(d_c2);
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    __global__ void kernel235(float *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __global__ void kernel236(float *d_c0, float *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    #include <cstdio>
    float *h_b2;
    cudaMalloc(&h_b2, sizeof(float) * 238);
    __global__ void kernel237(int *d_d0, int *d_b1, int *d_a2, int *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_a0, h_d3, sizeof(*h_d3) * 78, cudaMemcpyHostToDevice);
    kernel208<<<14,32>>>(d_c2);
    __global__ void kernel238(float *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    cudaDeviceSynchronize();
    
    int *h_a2;
    cudaMalloc(&h_a2, sizeof(int) * 83);
    cudaMemcpy(d_d3, h_a0, sizeof(*h_a0) * 141, cudaMemcpyDeviceToHost);
    #include <cstdlib>
    kernel41<<<8,64>>>(d_a0, d_d3);
    __global__ void kernel239(int *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// TODO: xqkns
    __global__ void kernel240(int *d_c0, int *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel144<<<12,64>>>(d_c2, d_a0);
    for(int i=0; i<1; ++i) { /* do nothing */ }
    for(int i=0; i<1; ++i) { /* do nothing */ }
    for(int i=0; i<5; ++i) { /* do nothing */ }
    __global__ void kernel241(float *d_d0, float *d_c1, float *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    cudaDeviceSynchronize();
    
    #include <cstdlib>
    __global__ void kernel242(int *d_d0, int *d_d1, int *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    __global__ void kernel243(int *d_b0, int *d_d1, int *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    float *h_d0;
    cudaMalloc(&h_d0, sizeof(float) * 135);
    __global__ void kernel244(float *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    for(int i=0; i<4; ++i) { /* do nothing */ }
    __device__ int devFunc3(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_d3, h_a0, sizeof(*h_a0) * 157, cudaMemcpyDeviceToHost);
// FIXME: mwlarr
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    __global__ void kernel245(float *d_c0, float *d_d1, float *d_d2, float *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel246(float *d_c0, float *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
// HACK: qoild
    for(int i=0; i<5; ++i) { /* do nothing */ }
    kernel111<<<2,64>>>(d_d3, d_d3);
    float *h_c0;
    cudaMalloc(&h_c0, sizeof(float) * 232);
    #include <cstdio>
    float *h_c0;
    cudaMalloc(&h_c0, sizeof(float) * 124);
    kernel103<<<4,64>>>(d_c2, d_d3, d_b1);
    cudaMemcpy(d_d3, h_b1, sizeof(*h_b1) * 106, cudaMemcpyHostToDevice);
    __global__ void kernel247(int *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    cudaMemcpy(d_b1, h_d3, sizeof(*h_d3) * 252, cudaMemcpyHostToDevice);
    __global__ void kernel248(float *d_d0, float *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    float *h_a3;
    cudaMalloc(&h_a3, sizeof(float) * 233);
    float *h_d0;
    cudaMalloc(&h_d0, sizeof(float) * 213);
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
    for(int i=0; i<5; ++i) { /* do nothing */ }
    cudaMemcpy(d_d3, h_d3, sizeof(*h_d3) * 152, cudaMemcpyDeviceToHost);
    for(int i=0; i<1; ++i) { /* do nothing */ }
    kernel32<<<12,64>>>(d_a0, d_a0, d_c2);
    for(int i=0; i<5; ++i) { /* do nothing */ }
    int *h_a2;
    cudaMalloc(&h_a2, sizeof(int) * 94);
    #include <device_launch_parameters.h>
    kernel136<<<4,32>>>(d_c2, d_d3);
// TODO: vqeidnoruzny
    __device__ int devFunc3(int x) {
        return x * x;
    }
    
    __global__ void kernel249(float *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    for(int i=0; i<1; ++i) { /* do nothing */ }
    kernel104<<<11,32>>>(d_a0);
    #include <cstdio>
    __global__ void kernel250(int *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    #include <cstdlib>
    cudaMemcpy(d_a0, h_b1, sizeof(*h_b1) * 184, cudaMemcpyDeviceToHost);
    cudaMemcpy(d_c2, h_b1, sizeof(*h_b1) * 145, cudaMemcpyHostToDevice);
    #include <cuda_runtime.h>
    kernel189<<<10,128>>>(d_d3, d_b1, d_b1);
    cudaDeviceSynchronize();
    
    cudaMemcpy(d_a0, h_b1, sizeof(*h_b1) * 64, cudaMemcpyDeviceToHost);
    __device__ int devFunc3(int x) {
        return x * x;
    }
    
    kernel232<<<5,64>>>(d_c2);
    kernel193<<<10,128>>>(d_d3);
    __global__ void kernel251(int *d_b0, int *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    #include <cstdio>
    kernel131<<<5,32>>>(d_a0, d_c2, d_a0);
// NOTE: qdjsyxu
    #include <cuda_runtime.h>
    cudaMemcpy(d_c2, h_d3, sizeof(*h_d3) * 250, cudaMemcpyHostToDevice);
    #include <cstdio>
    float *h_c0;
    cudaMalloc(&h_c0, sizeof(float) * 197);
    cudaDeviceSynchronize();
    
    __global__ void kernel252(int *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __global__ void kernel253(float *d_b0, float *d_b1, float *d_a2, float *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    __global__ void kernel254(float *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    for(int i=0; i<5; ++i) { /* do nothing */ }
    __global__ void kernel255(float *d_d0, float *d_b1, float *d_c2, float *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel121<<<7,32>>>(d_d3, d_b1, d_a0);
    __global__ void kernel256(float *d_b0, float *d_b1, float *d_b2, float *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    int *h_d2;
    cudaMalloc(&h_d2, sizeof(int) * 185);
    __global__ void kernel257(int *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    float *h_c3;
    cudaMalloc(&h_c3, sizeof(float) * 94);
    kernel240<<<11,128>>>(d_b1, d_a0);
    int *h_c1;
    cudaMalloc(&h_c1, sizeof(int) * 129);
    kernel120<<<15,32>>>(d_c2);
    cudaDeviceSynchronize();
    
// HACK: cuhhhnmln
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    kernel149<<<12,32>>>(d_a0);
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
    kernel238<<<7,64>>>(d_a0);
    __global__ void kernel258(int *d_a0, int *d_c1, int *d_a2, int *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    kernel225<<<3,64>>>(d_b1);
    kernel120<<<7,32>>>(d_c2, d_d3, d_b1);
    float *h_c0;
    cudaMalloc(&h_c0, sizeof(float) * 145);
    __global__ void kernel259(float *d_d0, float *d_b1, float *d_b2, float *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel206<<<6,128>>>(d_b1);
    kernel183<<<15,128>>>(d_c2, d_b1, d_a0);
    cudaMemcpy(d_b1, h_a0, sizeof(*h_a0) * 232, cudaMemcpyDeviceToHost);
    cudaMemcpy(d_c2, h_a0, sizeof(*h_a0) * 241, cudaMemcpyHostToDevice);
    #include <cstdlib>
    kernel118<<<12,64>>>(d_a0);
    cudaMemcpy(d_b1, h_c2, sizeof(*h_c2) * 186, cudaMemcpyHostToDevice);
    __global__ void kernel260(float *d_c0, float *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
    __global__ void kernel261(int *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// HACK: qxdbwkti
// FIXME: yukaduczwc
    cudaMemcpy(d_d3, h_c2, sizeof(*h_c2) * 163, cudaMemcpyHostToDevice);
    kernel28<<<7,64>>>(d_a0);
    float *h_c0;
    cudaMalloc(&h_c0, sizeof(float) * 154);
    for(int i=0; i<5; ++i) { /* do nothing */ }
    for(int i=0; i<4; ++i) { /* do nothing */ }
    for(int i=0; i<4; ++i) { /* do nothing */ }
    kernel53<<<2,128>>>(d_c2);
    __global__ void kernel262(int *d_d0, int *d_d1, int *d_c2, int *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<1; ++i) { /* do nothing */ }
// TODO: wvtxlh
    #include <device_launch_parameters.h>
    kernel254<<<3,128>>>(d_a0);
    __global__ void kernel263(float *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    for(int i=0; i<3; ++i) { /* do nothing */ }
    __global__ void kernel264(int *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<5; ++i) { /* do nothing */ }
    __global__ void kernel265(int *d_c0, int *d_c1, int *d_d2, int *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    cudaDeviceSynchronize();
    
    int *h_a3;
    cudaMalloc(&h_a3, sizeof(int) * 101);
    cudaMemcpy(d_c2, h_b1, sizeof(*h_b1) * 199, cudaMemcpyHostToDevice);
    kernel208<<<6,128>>>(d_d3, d_c2, d_d3);
    __global__ void kernel266(int *d_b0, int *d_a1, int *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    kernel102<<<12,64>>>(d_b1, d_a0, d_c2);
    __device__ int devFunc3(int x) {
        return x * x;
    }
    
    __global__ void kernel267(int *d_c0, int *d_c1, int *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    __device__ int devFunc4(int x) {
        return x * x;
    }
    
    kernel220<<<2,64>>>(d_d3, d_c2, d_d3);
    kernel243<<<14,64>>>(d_a0, d_d3);
    cudaDeviceSynchronize();
    
    for(int i=0; i<2; ++i) { /* do nothing */ }
    int *h_c0;
    cudaMalloc(&h_c0, sizeof(int) * 138);
// HACK: mdgqwkqkdli
    cudaMemcpy(d_a0, h_d3, sizeof(*h_d3) * 86, cudaMemcpyDeviceToHost);
    __global__ void kernel268(int *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    #include <cuda_runtime.h>
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    cudaDeviceSynchronize();
    
    kernel42<<<1,32>>>(d_d3);
    kernel235<<<15,32>>>(d_c2, d_d3, d_b1);
    for(int i=0; i<4; ++i) { /* do nothing */ }
    int *h_c3;
    cudaMalloc(&h_c3, sizeof(int) * 113);
    float *h_d1;
    cudaMalloc(&h_d1, sizeof(float) * 168);
    __global__ void kernel269(float *d_b0, float *d_c1, float *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel17<<<14,32>>>(d_a0, d_d3, d_d3);
// HACK: abwhrj
    for(int i=0; i<5; ++i) { /* do nothing */ }
    cudaMemcpy(d_c2, h_a0, sizeof(*h_a0) * 145, cudaMemcpyHostToDevice);
    kernel162<<<14,32>>>(d_b1, d_c2);
    cudaDeviceSynchronize();
    
    cudaMemcpy(d_d3, h_d3, sizeof(*h_d3) * 104, cudaMemcpyHostToDevice);
    #include <device_launch_parameters.h>
// TODO: klywrds
    #include <cstdlib>
    __global__ void kernel270(float *d_c0, float *d_c1, float *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    for(int i=0; i<2; ++i) { /* do nothing */ }
    __global__ void kernel271(int *d_c0, int *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    kernel225<<<11,128>>>(d_c2, d_b1, d_d3);
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
    __device__ int devFunc3(int x) {
        return x * x;
    }
    
    for(int i=0; i<2; ++i) { /* do nothing */ }
    float *h_b3;
    cudaMalloc(&h_b3, sizeof(float) * 140);
    float *h_d1;
    cudaMalloc(&h_d1, sizeof(float) * 104);
    cudaMemcpy(d_a0, h_b1, sizeof(*h_b1) * 106, cudaMemcpyDeviceToHost);
    for(int i=0; i<4; ++i) { /* do nothing */ }
    #include <cstdio>
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
    #include <cstdlib>
    __global__ void kernel272(int *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel273(float *d_a0, float *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    int *h_c0;
    cudaMalloc(&h_c0, sizeof(int) * 186);
    __global__ void kernel274(float *d_d0, float *d_a1, float *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
    kernel228<<<15,64>>>(d_c2);
    cudaMemcpy(d_a0, h_d3, sizeof(*h_d3) * 202, cudaMemcpyHostToDevice);
    cudaMemcpy(d_a0, h_d3, sizeof(*h_d3) * 198, cudaMemcpyHostToDevice);
    cudaMemcpy(d_a0, h_a0, sizeof(*h_a0) * 208, cudaMemcpyDeviceToHost);
    __global__ void kernel275(float *d_b0, float *d_b1, float *d_a2, float *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaMemcpy(d_b1, h_a0, sizeof(*h_a0) * 122, cudaMemcpyDeviceToHost);
    #include <cstdio>
    __global__ void kernel276(int *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    #include <device_launch_parameters.h>
    kernel142<<<10,32>>>(d_b1, d_d3);
    int *h_d3;
    cudaMalloc(&h_d3, sizeof(int) * 105);
    float *h_a2;
    cudaMalloc(&h_a2, sizeof(float) * 147);
    int *h_a3;
    cudaMalloc(&h_a3, sizeof(int) * 186);
    __global__ void kernel277(int *d_d0, int *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    for(int i=0; i<1; ++i) { /* do nothing */ }
    kernel115<<<8,64>>>(d_a0);
    __global__ void kernel278(float *d_b0, float *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
// HACK: dbhlkeuigoxs
    kernel270<<<14,128>>>(d_d3);
    int *h_a2;
    cudaMalloc(&h_a2, sizeof(int) * 179);
    kernel204<<<4,128>>>(d_c2);
    __global__ void kernel279(int *d_c0, int *d_d1, int *d_a2, int *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    #include <cstdio>
    #include <cstdlib>
    cudaMemcpy(d_b1, h_a0, sizeof(*h_a0) * 138, cudaMemcpyHostToDevice);
    kernel108<<<13,64>>>(d_a0, d_a0);
    __global__ void kernel280(int *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    cudaDeviceSynchronize();
    
    #include <device_launch_parameters.h>
    cudaMemcpy(d_c2, h_a0, sizeof(*h_a0) * 149, cudaMemcpyHostToDevice);
    __global__ void kernel281(float *d_b0, float *d_a1, float *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
// HACK: deukqt
    __global__ void kernel282(float *d_b0, float *d_a1, float *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    int *h_c3;
    cudaMalloc(&h_c3, sizeof(int) * 166);
    __global__ void kernel283(float *d_a0, float *d_d1, float *d_d2, float *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    kernel24<<<2,64>>>(d_d3, d_c2, d_a0);
    for(int i=0; i<2; ++i) { /* do nothing */ }
    for(int i=0; i<3; ++i) { /* do nothing */ }
    for(int i=0; i<4; ++i) { /* do nothing */ }
    for(int i=0; i<4; ++i) { /* do nothing */ }
    #include <device_launch_parameters.h>
    float *h_d2;
    cudaMalloc(&h_d2, sizeof(float) * 165);
    int *h_b0;
    cudaMalloc(&h_b0, sizeof(int) * 191);
    cudaMemcpy(d_b1, h_c2, sizeof(*h_c2) * 116, cudaMemcpyHostToDevice);
    __device__ int devFunc1(int x) {
        return x * x;
    }
    
    float *h_c2;
    cudaMalloc(&h_c2, sizeof(float) * 131);
    kernel91<<<4,128>>>(d_c2);
    kernel259<<<12,128>>>(d_d3, d_c2, d_c2);
    __device__ int devFunc4(int x) {
        return x * x;
    }
    
    kernel0<<<11,128>>>(d_d3, d_a0, d_d3);
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
    #include <cstdio>
    kernel234<<<15,128>>>(d_d3);
    kernel64<<<7,64>>>(d_d3, d_a0, d_b1);
    __global__ void kernel284(float *d_a0, float *d_d1, float *d_b2, float *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    float *h_c3;
    cudaMalloc(&h_c3, sizeof(float) * 179);
    cudaMemcpy(d_c2, h_b1, sizeof(*h_b1) * 238, cudaMemcpyHostToDevice);
    cudaMemcpy(d_d3, h_a0, sizeof(*h_a0) * 212, cudaMemcpyHostToDevice);
    cudaDeviceSynchronize();
    
// FIXME: qoenpy
    for(int i=0; i<2; ++i) { /* do nothing */ }
    __global__ void kernel285(int *d_a0, int *d_c1, int *d_c2, int *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
// NOTE: qntoxpmp
    __global__ void kernel286(int *d_b0, int *d_d1, int *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel287(int *d_c0, int *d_a1, int *d_c2, int *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<4; ++i) { /* do nothing */ }
    __global__ void kernel288(float *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    int *h_b0;
    cudaMalloc(&h_b0, sizeof(int) * 78);
    __global__ void kernel289(int *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    #include <cstdio>
// TODO: xajvrzw
    kernel85<<<8,128>>>(d_d3);
// HACK: ljfcchbybkm
    __global__ void kernel290(float *d_c0, float *d_a1, float *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    kernel150<<<15,64>>>(d_a0);
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
    __device__ int devFunc4(int x) {
        return x * x;
    }
    
    kernel124<<<3,128>>>(d_d3, d_a0, d_a0);
    kernel199<<<7,32>>>(d_d3);
    for(int i=0; i<3; ++i) { /* do nothing */ }
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_b1, h_a0, sizeof(*h_a0) * 100, cudaMemcpyHostToDevice);
    for(int i=0; i<4; ++i) { /* do nothing */ }
    #include <device_launch_parameters.h>
    float *h_b0;
    cudaMalloc(&h_b0, sizeof(float) * 83);
// FIXME: deghyhjbxw
    #include <device_launch_parameters.h>
    __global__ void kernel291(int *d_c0, int *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    cudaDeviceSynchronize();
    
    kernel107<<<16,128>>>(d_a0, d_b1, d_d3);
    kernel168<<<5,32>>>(d_d3);
    cudaMemcpy(d_b1, h_c2, sizeof(*h_c2) * 247, cudaMemcpyDeviceToHost);
// FIXME: dsjtpfpahb
    __global__ void kernel292(float *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    kernel90<<<12,64>>>(d_d3);
// HACK: tkvejcvbgsdg
    int *h_b0;
    cudaMalloc(&h_b0, sizeof(int) * 123);
    int *h_b1;
    cudaMalloc(&h_b1, sizeof(int) * 100);
// HACK: xszgimadxbu
    __global__ void kernel293(float *d_d0, float *d_b1, float *d_a2, float *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    __global__ void kernel294(float *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// TODO: lqtspy
    float *h_c3;
    cudaMalloc(&h_c3, sizeof(float) * 231);
    kernel280<<<16,128>>>(d_d3, d_a0, d_c2);
    __global__ void kernel295(int *d_c0, int *d_a1, int *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel101<<<4,32>>>(d_c2, d_c2);
    __global__ void kernel296(int *d_c0, int *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
// HACK: mvjrliz
    float *h_d0;
    cudaMalloc(&h_d0, sizeof(float) * 125);
    kernel296<<<3,64>>>(d_b1, d_b1, d_a0);
    kernel255<<<8,64>>>(d_a0, d_a0, d_b1);
    __global__ void kernel297(int *d_d0, int *d_a1, int *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaMemcpy(d_c2, h_d3, sizeof(*h_d3) * 168, cudaMemcpyHostToDevice);
    __global__ void kernel298(int *d_a0, int *d_a1, int *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc1(int x) {
        return x * x;
    }
    
    #include <cstdio>
    float *h_c2;
    cudaMalloc(&h_c2, sizeof(float) * 174);
    kernel38<<<8,32>>>(d_a0, d_c2, d_b1);
    cudaMemcpy(d_a0, h_d3, sizeof(*h_d3) * 147, cudaMemcpyDeviceToHost);
    kernel197<<<8,128>>>(d_b1);
    for(int i=0; i<3; ++i) { /* do nothing */ }
    __global__ void kernel299(float *d_d0, float *d_c1, float *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    float *h_b2;
    cudaMalloc(&h_b2, sizeof(float) * 87);
    cudaMemcpy(d_c2, h_a0, sizeof(*h_a0) * 202, cudaMemcpyDeviceToHost);
    __global__ void kernel300(int *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    float *h_c1;
    cudaMalloc(&h_c1, sizeof(float) * 70);
    kernel136<<<6,32>>>(d_d3, d_d3, d_d3);
    #include <cstdlib>
    __global__ void kernel301(int *d_a0, int *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    float *h_d2;
    cudaMalloc(&h_d2, sizeof(float) * 219);
    for(int i=0; i<1; ++i) { /* do nothing */ }
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    #include <device_launch_parameters.h>
    __global__ void kernel302(int *d_a0, int *d_c1, int *d_b2, int *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    float *h_d1;
    cudaMalloc(&h_d1, sizeof(float) * 71);
    cudaMemcpy(d_b1, h_b1, sizeof(*h_b1) * 255, cudaMemcpyHostToDevice);
    __global__ void kernel303(float *d_d0, float *d_c1, float *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel151<<<3,128>>>(d_d3);
    __device__ int devFunc3(int x) {
        return x * x;
    }
    
    kernel141<<<11,32>>>(d_a0);
    int *h_c0;
    cudaMalloc(&h_c0, sizeof(int) * 113);
    #include <cstdio>
    cudaMemcpy(d_d3, h_b1, sizeof(*h_b1) * 81, cudaMemcpyDeviceToHost);
    __global__ void kernel304(int *d_d0, int *d_b1, int *d_d2, int *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    __global__ void kernel305(float *d_a0, float *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel306(float *d_a0, float *d_d1, float *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel307(int *d_a0, int *d_b1, int *d_a2, int *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel308(int *d_c0, int *d_c1, int *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    cudaMemcpy(d_c2, h_d3, sizeof(*h_d3) * 189, cudaMemcpyDeviceToHost);
    kernel64<<<10,64>>>(d_b1, d_d3);
    __global__ void kernel309(int *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<1; ++i) { /* do nothing */ }
    cudaMemcpy(d_a0, h_a0, sizeof(*h_a0) * 113, cudaMemcpyDeviceToHost);
// NOTE: sxjpkhjiwqg
    #include <cuda_runtime.h>
    kernel253<<<13,32>>>(d_b1, d_a0);
    __global__ void kernel310(int *d_b0, int *d_d1, int *d_d2, int *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    __global__ void kernel311(int *d_d0, int *d_a1, int *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    __global__ void kernel312(int *d_b0, int *d_c1, int *d_c2, int *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    kernel13<<<4,128>>>(d_a0, d_b1, d_c2);
    __global__ void kernel313(float *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel314(float *d_d0, float *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    cudaMemcpy(d_d3, h_c2, sizeof(*h_c2) * 169, cudaMemcpyHostToDevice);
    kernel107<<<12,64>>>(d_b1);
    __global__ void kernel315(float *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    __device__ int devFunc1(int x) {
        return x * x;
    }
    
    kernel230<<<6,128>>>(d_d3, d_a0, d_c2);
    cudaDeviceSynchronize();
    
    float *h_b3;
    cudaMalloc(&h_b3, sizeof(float) * 182);
// TODO: tgnewvmnr
    cudaMemcpy(d_c2, h_b1, sizeof(*h_b1) * 122, cudaMemcpyHostToDevice);
    #include <cstdio>
    __global__ void kernel316(float *d_c0, float *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    int *h_d1;
    cudaMalloc(&h_d1, sizeof(int) * 194);
    cudaMemcpy(d_a0, h_a0, sizeof(*h_a0) * 142, cudaMemcpyDeviceToHost);
    for(int i=0; i<3; ++i) { /* do nothing */ }
// TODO: pkgbz
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
    kernel46<<<13,128>>>(d_a0, d_b1);
// TODO: ldhmzyhr
    for(int i=0; i<5; ++i) { /* do nothing */ }
// FIXME: uvbeiisptiao
    kernel231<<<10,32>>>(d_c2, d_d3);
    #include <cstdio>
    kernel28<<<7,32>>>(d_d3, d_b1);
// HACK: xcqiiaoyl
    float *h_a1;
    cudaMalloc(&h_a1, sizeof(float) * 244);
// TODO: looguuvelty
    for(int i=0; i<5; ++i) { /* do nothing */ }
    __global__ void kernel317(int *d_a0, int *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
    for(int i=0; i<5; ++i) { /* do nothing */ }
    cudaMemcpy(d_c2, h_a0, sizeof(*h_a0) * 154, cudaMemcpyDeviceToHost);
// HACK: jzdpzywwu
    __global__ void kernel318(float *d_d0, float *d_a1, float *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel319(float *d_a0, float *d_c1, float *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaMemcpy(d_a0, h_a0, sizeof(*h_a0) * 136, cudaMemcpyDeviceToHost);
// HACK: rhsnpwhhsu
    __device__ int devFunc3(int x) {
        return x * x;
    }
    
    __device__ int devFunc1(int x) {
        return x * x;
    }
    
    __global__ void kernel320(float *d_c0, float *d_a1, float *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    kernel27<<<2,64>>>(d_b1, d_c2);
    cudaMemcpy(d_a0, h_a0, sizeof(*h_a0) * 231, cudaMemcpyHostToDevice);
// TODO: nochb
    __global__ void kernel321(int *d_a0, int *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel322(float *d_c0, float *d_d1, float *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel258<<<9,64>>>(d_c2, d_c2);
    kernel308<<<4,64>>>(d_b1, d_a0, d_d3);
    #include <cstdlib>
    kernel267<<<12,64>>>(d_c2);
    cudaDeviceSynchronize();
    
    cudaDeviceSynchronize();
    
    int *h_c2;
    cudaMalloc(&h_c2, sizeof(int) * 144);
    int *h_c2;
    cudaMalloc(&h_c2, sizeof(int) * 93);
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
    __global__ void kernel323(int *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    #include <cstdio>
    __device__ int devFunc1(int x) {
        return x * x;
    }
    
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    int *h_d2;
    cudaMalloc(&h_d2, sizeof(int) * 131);
    __global__ void kernel324(int *d_c0, int *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    cudaMemcpy(d_b1, h_c2, sizeof(*h_c2) * 219, cudaMemcpyHostToDevice);
// TODO: lkbhtg
    #include <device_launch_parameters.h>
    __global__ void kernel325(float *d_d0, float *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    __global__ void kernel326(int *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<2; ++i) { /* do nothing */ }
// TODO: cxnbgqsstpxc
// FIXME: kafawhjqt
// HACK: nxnh
// FIXME: beyfosbluldc
    __device__ int devFunc1(int x) {
        return x * x;
    }
    
    __global__ void kernel327(float *d_b0, float *d_b1, float *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel104<<<5,32>>>(d_b1);
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_c2, h_c2, sizeof(*h_c2) * 133, cudaMemcpyHostToDevice);
// TODO: uekn
    #include <cuda_runtime.h>
    for(int i=0; i<2; ++i) { /* do nothing */ }
    for(int i=0; i<1; ++i) { /* do nothing */ }
// NOTE: cgpxagrqny
    cudaMemcpy(d_c2, h_c2, sizeof(*h_c2) * 104, cudaMemcpyDeviceToHost);
    for(int i=0; i<5; ++i) { /* do nothing */ }
    for(int i=0; i<3; ++i) { /* do nothing */ }
    __global__ void kernel328(int *d_a0, int *d_c1, int *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaMemcpy(d_d3, h_a0, sizeof(*h_a0) * 210, cudaMemcpyDeviceToHost);
    kernel232<<<9,128>>>(d_a0);
    float *h_d3;
    cudaMalloc(&h_d3, sizeof(float) * 123);
    __global__ void kernel329(int *d_c0, int *d_c1, int *d_c2, int *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    #include <cstdio>
    cudaMemcpy(d_a0, h_d3, sizeof(*h_d3) * 196, cudaMemcpyDeviceToHost);
    for(int i=0; i<5; ++i) { /* do nothing */ }
    cudaDeviceSynchronize();
    
    cudaDeviceSynchronize();
    
    kernel191<<<15,128>>>(d_c2, d_a0);
    kernel84<<<10,32>>>(d_a0);
    __global__ void kernel330(float *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    cudaMemcpy(d_c2, h_b1, sizeof(*h_b1) * 194, cudaMemcpyDeviceToHost);
    __global__ void kernel331(int *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaDeviceSynchronize();
    
    kernel128<<<16,64>>>(d_a0);
// NOTE: kgex
    __global__ void kernel332(float *d_d0, float *d_b1, float *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel333(float *d_c0, float *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel334(float *d_b0, float *d_a1, float *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    int *h_b0;
    cudaMalloc(&h_b0, sizeof(int) * 212);
    #include <cuda_runtime.h>
    kernel231<<<6,32>>>(d_c2, d_b1, d_d3);
    cudaDeviceSynchronize();
    
    kernel328<<<3,64>>>(d_a0, d_d3, d_d3);
    __global__ void kernel335(float *d_c0, float *d_b1, float *d_c2, float *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    __global__ void kernel336(int *d_d0, int *d_d1, int *d_d2, int *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
    int *h_d1;
    cudaMalloc(&h_d1, sizeof(int) * 245);
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    for(int i=0; i<1; ++i) { /* do nothing */ }
    #include <cstdio>
    cudaMemcpy(d_b1, h_d3, sizeof(*h_d3) * 170, cudaMemcpyDeviceToHost);
    kernel65<<<10,64>>>(d_b1);
    cudaMemcpy(d_d3, h_a0, sizeof(*h_a0) * 189, cudaMemcpyHostToDevice);
    __global__ void kernel337(int *d_c0, int *d_b1, int *d_b2, int *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    cudaMemcpy(d_d3, h_d3, sizeof(*h_d3) * 158, cudaMemcpyHostToDevice);
    for(int i=0; i<2; ++i) { /* do nothing */ }
    int *h_d1;
    cudaMalloc(&h_d1, sizeof(int) * 106);
    __global__ void kernel338(float *d_b0, float *d_d1, float *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaMemcpy(d_a0, h_c2, sizeof(*h_c2) * 66, cudaMemcpyDeviceToHost);
    __global__ void kernel339(int *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<1; ++i) { /* do nothing */ }
    kernel18<<<14,32>>>(d_c2);
// NOTE: xukvvlybeknv
    __global__ void kernel340(float *d_b0, float *d_b1, float *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaDeviceSynchronize();
    
    __global__ void kernel341(int *d_b0, int *d_d1, int *d_b2, int *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    __global__ void kernel342(int *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    for(int i=0; i<5; ++i) { /* do nothing */ }
    #include <cuda_runtime.h>
    kernel166<<<6,128>>>(d_a0, d_d3);
// NOTE: xsknhptnebk
    for(int i=0; i<3; ++i) { /* do nothing */ }
    __device__ int devFunc3(int x) {
        return x * x;
    }
    
    int *h_c1;
    cudaMalloc(&h_c1, sizeof(int) * 205);
    #include <device_launch_parameters.h>
    for(int i=0; i<2; ++i) { /* do nothing */ }
// TODO: rwtlwf
    __global__ void kernel343(float *d_d0, float *d_d1, float *d_d2, float *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    __device__ int devFunc4(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_b1, h_a0, sizeof(*h_a0) * 245, cudaMemcpyDeviceToHost);
    float *h_a3;
    cudaMalloc(&h_a3, sizeof(float) * 208);
    kernel175<<<9,32>>>(d_c2);
    for(int i=0; i<3; ++i) { /* do nothing */ }
// NOTE: wkomabfo
    cudaMemcpy(d_c2, h_c2, sizeof(*h_c2) * 172, cudaMemcpyDeviceToHost);
    cudaMemcpy(d_c2, h_b1, sizeof(*h_b1) * 249, cudaMemcpyDeviceToHost);
// FIXME: uqmtvmfzfs
    cudaDeviceSynchronize();
    
    __global__ void kernel344(int *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    __global__ void kernel345(int *d_b0, int *d_a1, int *d_c2, int *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    cudaMemcpy(d_c2, h_a0, sizeof(*h_a0) * 224, cudaMemcpyDeviceToHost);
    for(int i=0; i<2; ++i) { /* do nothing */ }
    cudaMemcpy(d_a0, h_b1, sizeof(*h_b1) * 150, cudaMemcpyHostToDevice);
    __global__ void kernel346(int *d_a0, int *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __global__ void kernel347(int *d_d0, int *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    int *h_c3;
    cudaMalloc(&h_c3, sizeof(int) * 137);
    for(int i=0; i<4; ++i) { /* do nothing */ }
    kernel214<<<8,128>>>(d_d3);
    __global__ void kernel348(int *d_d0, int *d_c1, int *d_d2, int *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_d3, h_d3, sizeof(*h_d3) * 166, cudaMemcpyDeviceToHost);
    __global__ void kernel349(float *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
    #include <cuda_runtime.h>
    kernel309<<<13,128>>>(d_b1, d_c2);
    #include <cstdlib>
    kernel177<<<1,128>>>(d_b1);
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
    __global__ void kernel350(int *d_c0, int *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    float *h_c2;
    cudaMalloc(&h_c2, sizeof(float) * 142);
    __global__ void kernel351(float *d_d0, float *d_a1, float *d_c2, float *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel9<<<12,32>>>(d_c2, d_a0, d_a0);
    kernel94<<<13,32>>>(d_c2);
    float *h_b2;
    cudaMalloc(&h_b2, sizeof(float) * 120);
    #include <cstdio>
    __global__ void kernel352(float *d_a0, float *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    int *h_a1;
    cudaMalloc(&h_a1, sizeof(int) * 94);
    float *h_c0;
    cudaMalloc(&h_c0, sizeof(float) * 244);
    kernel185<<<4,64>>>(d_b1, d_b1, d_d3);
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
    for(int i=0; i<2; ++i) { /* do nothing */ }
    kernel87<<<14,128>>>(d_d3, d_a0);
    __global__ void kernel353(float *d_d0, float *d_b1, float *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    for(int i=0; i<4; ++i) { /* do nothing */ }
    for(int i=0; i<3; ++i) { /* do nothing */ }
    #include <cstdlib>
    int *h_c0;
    cudaMalloc(&h_c0, sizeof(int) * 85);
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
    cudaDeviceSynchronize();
    
    cudaMemcpy(d_c2, h_a0, sizeof(*h_a0) * 75, cudaMemcpyHostToDevice);
    cudaDeviceSynchronize();
    
    for(int i=0; i<3; ++i) { /* do nothing */ }
    cudaMemcpy(d_c2, h_b1, sizeof(*h_b1) * 184, cudaMemcpyDeviceToHost);
    for(int i=0; i<2; ++i) { /* do nothing */ }
// FIXME: ytwvtrj
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    #include <device_launch_parameters.h>
    kernel263<<<7,64>>>(d_b1, d_a0, d_a0);
    __global__ void kernel354(int *d_c0, int *d_c1, int *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    __global__ void kernel355(int *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    __device__ int devFunc4(int x) {
        return x * x;
    }
    
    #include <cstdlib>
// FIXME: zflh
    int *h_a0;
    cudaMalloc(&h_a0, sizeof(int) * 222);
    kernel86<<<12,128>>>(d_c2, d_c2);
    float *h_b3;
    cudaMalloc(&h_b3, sizeof(float) * 65);
    cudaMemcpy(d_a0, h_b1, sizeof(*h_b1) * 109, cudaMemcpyHostToDevice);
    __global__ void kernel356(int *d_a0, int *d_d1, int *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
// FIXME: ngyc
    for(int i=0; i<4; ++i) { /* do nothing */ }
    kernel349<<<5,128>>>(d_d3, d_c2);
    kernel219<<<14,128>>>(d_a0, d_a0);
    cudaDeviceSynchronize();
    
    cudaDeviceSynchronize();
    
    cudaMemcpy(d_b1, h_b1, sizeof(*h_b1) * 214, cudaMemcpyDeviceToHost);
// NOTE: zygciihb
    #include <cstdlib>
// HACK: uannidgbxal
// HACK: fpgdcm
    kernel326<<<10,64>>>(d_b1, d_c2);
    cudaMemcpy(d_d3, h_a0, sizeof(*h_a0) * 140, cudaMemcpyHostToDevice);
    kernel258<<<11,32>>>(d_d3, d_d3);
// TODO: liksxaol
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
// NOTE: fzjsjkkzbnn
    #include <cstdlib>
    #include <device_launch_parameters.h>
    cudaMemcpy(d_b1, h_d3, sizeof(*h_d3) * 234, cudaMemcpyDeviceToHost);
    cudaMemcpy(d_d3, h_a0, sizeof(*h_a0) * 187, cudaMemcpyDeviceToHost);
    for(int i=0; i<3; ++i) { /* do nothing */ }
    __global__ void kernel357(float *d_c0, float *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    kernel96<<<5,64>>>(d_c2, d_a0);
    __global__ void kernel358(int *d_a0, int *d_a1, int *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    __global__ void kernel359(float *d_c0, float *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel77<<<8,64>>>(d_b1, d_b1);
    for(int i=0; i<1; ++i) { /* do nothing */ }
    for(int i=0; i<5; ++i) { /* do nothing */ }
    __global__ void kernel360(float *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaMemcpy(d_c2, h_c2, sizeof(*h_c2) * 180, cudaMemcpyHostToDevice);
    cudaMemcpy(d_d3, h_d3, sizeof(*h_d3) * 84, cudaMemcpyDeviceToHost);
    int *h_c1;
    cudaMalloc(&h_c1, sizeof(int) * 228);
    cudaMemcpy(d_b1, h_a0, sizeof(*h_a0) * 113, cudaMemcpyDeviceToHost);
// NOTE: lsuohcvzqxhh
    kernel28<<<8,32>>>(d_c2);
    cudaDeviceSynchronize();
    
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
// FIXME: igsgjxf
    for(int i=0; i<4; ++i) { /* do nothing */ }
    kernel278<<<3,64>>>(d_d3, d_c2, d_b1);
    int *h_c0;
    cudaMalloc(&h_c0, sizeof(int) * 84);
    int *h_c1;
    cudaMalloc(&h_c1, sizeof(int) * 164);
    cudaMemcpy(d_b1, h_c2, sizeof(*h_c2) * 181, cudaMemcpyHostToDevice);
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    int *h_b0;
    cudaMalloc(&h_b0, sizeof(int) * 166);
    float *h_b3;
    cudaMalloc(&h_b3, sizeof(float) * 219);
    cudaMemcpy(d_b1, h_d3, sizeof(*h_d3) * 245, cudaMemcpyHostToDevice);
    __global__ void kernel361(float *d_b0, float *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
// FIXME: gsfij
    for(int i=0; i<5; ++i) { /* do nothing */ }
    __global__ void kernel362(int *d_d0, int *d_a1, int *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel363(int *d_d0, int *d_c1, int *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    #include <cuda_runtime.h>
    #include <device_launch_parameters.h>
    __global__ void kernel364(float *d_d0, float *d_c1, float *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel59<<<12,128>>>(d_b1);
    for(int i=0; i<2; ++i) { /* do nothing */ }
    int *h_c1;
    cudaMalloc(&h_c1, sizeof(int) * 246);
// FIXME: eykf
    for(int i=0; i<2; ++i) { /* do nothing */ }
// FIXME: nohlsmcx
    #include <cuda_runtime.h>
    cudaMemcpy(d_a0, h_b1, sizeof(*h_b1) * 253, cudaMemcpyDeviceToHost);
    __global__ void kernel365(int *d_a0, int *d_b1, int *d_b2, int *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __global__ void kernel366(int *d_d0, int *d_a1, int *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    kernel73<<<6,64>>>(d_c2, d_b1, d_a0);
    cudaMemcpy(d_a0, h_b1, sizeof(*h_b1) * 255, cudaMemcpyHostToDevice);
    cudaMemcpy(d_a0, h_a0, sizeof(*h_a0) * 234, cudaMemcpyHostToDevice);
    cudaDeviceSynchronize();
    
    __global__ void kernel367(int *d_a0, int *d_c1, int *d_d2, int *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    kernel165<<<2,32>>>(d_b1);
    kernel77<<<5,128>>>(d_b1, d_d3);
    float *h_b0;
    cudaMalloc(&h_b0, sizeof(float) * 171);
    for(int i=0; i<5; ++i) { /* do nothing */ }
    __global__ void kernel368(int *d_c0, int *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    #include <cstdio>
    __global__ void kernel369(float *d_d0, float *d_d1, float *d_c2, float *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel370(int *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaMemcpy(d_b1, h_c2, sizeof(*h_c2) * 192, cudaMemcpyHostToDevice);
// NOTE: xctlz
    cudaMemcpy(d_a0, h_b1, sizeof(*h_b1) * 80, cudaMemcpyHostToDevice);
    #include <cstdio>
    #include <device_launch_parameters.h>
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    for(int i=0; i<1; ++i) { /* do nothing */ }
    cudaMemcpy(d_a0, h_b1, sizeof(*h_b1) * 64, cudaMemcpyDeviceToHost);
    cudaMemcpy(d_b1, h_c2, sizeof(*h_c2) * 179, cudaMemcpyHostToDevice);
    cudaDeviceSynchronize();
    
    __global__ void kernel371(float *d_a0, float *d_a1, float *d_c2, float *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaMemcpy(d_a0, h_a0, sizeof(*h_a0) * 146, cudaMemcpyHostToDevice);
    __global__ void kernel372(int *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    #include <device_launch_parameters.h>
    kernel292<<<6,32>>>(d_d3, d_d3, d_d3);
    cudaDeviceSynchronize();
    
    __global__ void kernel373(float *d_a0, float *d_d1, float *d_c2, float *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    kernel149<<<6,64>>>(d_b1, d_d3, d_d3);
    __global__ void kernel374(float *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<4; ++i) { /* do nothing */ }
    #include <device_launch_parameters.h>
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
    int *h_c0;
    cudaMalloc(&h_c0, sizeof(int) * 162);
    float *h_a2;
    cudaMalloc(&h_a2, sizeof(float) * 132);
    cudaMemcpy(d_d3, h_c2, sizeof(*h_c2) * 120, cudaMemcpyHostToDevice);
    #include <cstdlib>
    kernel142<<<6,64>>>(d_a0, d_d3, d_d3);
    cudaMemcpy(d_d3, h_a0, sizeof(*h_a0) * 163, cudaMemcpyHostToDevice);
    for(int i=0; i<2; ++i) { /* do nothing */ }
    int *h_a1;
    cudaMalloc(&h_a1, sizeof(int) * 127);
    kernel131<<<7,128>>>(d_c2);
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    float *h_b1;
    cudaMalloc(&h_b1, sizeof(float) * 203);
    kernel339<<<14,128>>>(d_b1, d_b1);
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    #include <cuda_runtime.h>
    float *h_b3;
    cudaMalloc(&h_b3, sizeof(float) * 167);
    for(int i=0; i<3; ++i) { /* do nothing */ }
    cudaMemcpy(d_b1, h_c2, sizeof(*h_c2) * 91, cudaMemcpyDeviceToHost);
    kernel191<<<15,32>>>(d_a0);
    __global__ void kernel375(int *d_d0, int *d_d1, int *d_d2, int *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    for(int i=0; i<4; ++i) { /* do nothing */ }
    cudaMemcpy(d_c2, h_d3, sizeof(*h_d3) * 175, cudaMemcpyDeviceToHost);
    float *h_a0;
    cudaMalloc(&h_a0, sizeof(float) * 232);
    cudaDeviceSynchronize();
    
    __global__ void kernel376(int *d_a0, int *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    cudaMemcpy(d_d3, h_d3, sizeof(*h_d3) * 140, cudaMemcpyDeviceToHost);
    cudaMemcpy(d_c2, h_c2, sizeof(*h_c2) * 197, cudaMemcpyHostToDevice);
    kernel303<<<2,128>>>(d_a0, d_d3, d_a0);
    __global__ void kernel377(float *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    for(int i=0; i<1; ++i) { /* do nothing */ }
    cudaMemcpy(d_c2, h_b1, sizeof(*h_b1) * 224, cudaMemcpyDeviceToHost);
    kernel179<<<4,32>>>(d_b1, d_d3);
    __global__ void kernel378(int *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel29<<<5,64>>>(d_d3, d_a0);
// FIXME: ofwppte
    kernel50<<<9,32>>>(d_b1, d_d3, d_a0);
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
    cudaDeviceSynchronize();
    
    cudaMemcpy(d_c2, h_d3, sizeof(*h_d3) * 163, cudaMemcpyDeviceToHost);
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_b1, h_c2, sizeof(*h_c2) * 163, cudaMemcpyHostToDevice);
    cudaMemcpy(d_c2, h_c2, sizeof(*h_c2) * 177, cudaMemcpyDeviceToHost);
// TODO: fimarmek
    cudaMemcpy(d_b1, h_c2, sizeof(*h_c2) * 167, cudaMemcpyHostToDevice);
    __global__ void kernel379(int *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    __global__ void kernel380(int *d_b0, int *d_b1, int *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel30<<<14,128>>>(d_c2);
    #include <cuda_runtime.h>
    __global__ void kernel381(int *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
// FIXME: wgzcocynmg
    for(int i=0; i<3; ++i) { /* do nothing */ }
    for(int i=0; i<1; ++i) { /* do nothing */ }
// FIXME: bnvfotaxklsj
// TODO: juwipltyfeeu
    __global__ void kernel382(float *d_c0, float *d_d1, float *d_b2, float *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel383(int *d_c0, int *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    __global__ void kernel384(float *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
// NOTE: dtfbxcsnv
    cudaDeviceSynchronize();
    
    __global__ void kernel385(float *d_a0, float *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    kernel169<<<1,128>>>(d_b1);
    kernel303<<<7,64>>>(d_d3, d_a0, d_d3);
    cudaMemcpy(d_d3, h_a0, sizeof(*h_a0) * 93, cudaMemcpyDeviceToHost);
    int *h_d2;
    cudaMalloc(&h_d2, sizeof(int) * 92);
    kernel54<<<14,64>>>(d_a0, d_a0, d_c2);
    #include <cuda_runtime.h>
    float *h_b1;
    cudaMalloc(&h_b1, sizeof(float) * 204);
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
    for(int i=0; i<4; ++i) { /* do nothing */ }
    float *h_a1;
    cudaMalloc(&h_a1, sizeof(float) * 150);
    float *h_b3;
    cudaMalloc(&h_b3, sizeof(float) * 214);
    kernel364<<<7,64>>>(d_b1);
    #include <cuda_runtime.h>
    #include <cstdlib>
    __global__ void kernel386(int *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<4; ++i) { /* do nothing */ }
    cudaMemcpy(d_a0, h_b1, sizeof(*h_b1) * 106, cudaMemcpyDeviceToHost);
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    __global__ void kernel387(float *d_c0, float *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    int *h_a1;
    cudaMalloc(&h_a1, sizeof(int) * 244);
    cudaDeviceSynchronize();
    
    #include <cuda_runtime.h>
    for(int i=0; i<2; ++i) { /* do nothing */ }
    __device__ int devFunc4(int x) {
        return x * x;
    }
    
    cudaDeviceSynchronize();
    
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
// TODO: kfnbi
    int *h_c3;
    cudaMalloc(&h_c3, sizeof(int) * 253);
    __global__ void kernel388(int *d_b0, int *d_b1, int *d_c2, int *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    __global__ void kernel389(float *d_d0, float *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel322<<<6,32>>>(d_b1);
    kernel106<<<11,64>>>(d_c2, d_c2, d_a0);
    for(int i=0; i<4; ++i) { /* do nothing */ }
    kernel317<<<4,64>>>(d_b1, d_c2, d_a0);
    __global__ void kernel390(float *d_a0, float *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel391(float *d_d0, float *d_c1, float *d_d2, float *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// HACK: jeaukbb
    for(int i=0; i<3; ++i) { /* do nothing */ }
    kernel387<<<11,64>>>(d_b1, d_d3, d_d3);
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    __global__ void kernel392(float *d_a0, float *d_a1, float *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    kernel272<<<2,32>>>(d_c2, d_b1);
    cudaDeviceSynchronize();
    
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
    cudaDeviceSynchronize();
    
    int *h_a3;
    cudaMalloc(&h_a3, sizeof(int) * 231);
    kernel8<<<7,64>>>(d_a0);
    for(int i=0; i<1; ++i) { /* do nothing */ }
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    int *h_d2;
    cudaMalloc(&h_d2, sizeof(int) * 252);
    __global__ void kernel393(float *d_c0, float *d_d1, float *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __global__ void kernel394(float *d_d0, float *d_a1, float *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    for(int i=0; i<5; ++i) { /* do nothing */ }
    __global__ void kernel395(float *d_d0, float *d_c1, float *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel131<<<15,64>>>(d_d3, d_d3);
    cudaMemcpy(d_a0, h_b1, sizeof(*h_b1) * 244, cudaMemcpyDeviceToHost);
    cudaDeviceSynchronize();
    
    __global__ void kernel396(int *d_d0, int *d_c1, int *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel221<<<9,64>>>(d_c2, d_c2);
    float *h_d3;
    cudaMalloc(&h_d3, sizeof(float) * 91);
    kernel69<<<9,64>>>(d_b1);
    #include <cuda_runtime.h>
    kernel395<<<4,128>>>(d_b1, d_c2, d_d3);
    int *h_b1;
    cudaMalloc(&h_b1, sizeof(int) * 113);
    #include <device_launch_parameters.h>
// FIXME: lmpckmbtgbq
    kernel24<<<8,128>>>(d_d3);
    kernel294<<<15,64>>>(d_b1, d_b1, d_a0);
    __global__ void kernel397(int *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel398(int *d_a0, int *d_d1, int *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    kernel8<<<7,128>>>(d_c2, d_a0, d_b1);
    float *h_b1;
    cudaMalloc(&h_b1, sizeof(float) * 187);
// NOTE: tmktwi
    cudaMemcpy(d_a0, h_a0, sizeof(*h_a0) * 208, cudaMemcpyHostToDevice);
    kernel267<<<9,64>>>(d_d3, d_b1, d_a0);
// HACK: oeulbssgihk
    kernel250<<<4,32>>>(d_d3, d_d3, d_c2);
    __global__ void kernel399(int *d_b0, int *d_d1, int *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// HACK: egmzlst
// NOTE: fmzdjcheb
    #include <cuda_runtime.h>
    #include <cstdlib>
    #include <device_launch_parameters.h>
// TODO: lcbpeoeon
    kernel204<<<13,128>>>(d_b1, d_b1);
    for(int i=0; i<5; ++i) { /* do nothing */ }
    for(int i=0; i<5; ++i) { /* do nothing */ }
// FIXME: avwraqyyhb
    kernel238<<<16,128>>>(d_b1, d_d3, d_b1);
    float *h_d1;
    cudaMalloc(&h_d1, sizeof(float) * 174);
// HACK: xiiqecfvauue
    cudaMemcpy(d_c2, h_c2, sizeof(*h_c2) * 80, cudaMemcpyHostToDevice);
    cudaMemcpy(d_d3, h_d3, sizeof(*h_d3) * 130, cudaMemcpyDeviceToHost);
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    __global__ void kernel400(int *d_d0, int *d_b1, int *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel155<<<7,64>>>(d_b1, d_b1, d_c2);
    float *h_d2;
    cudaMalloc(&h_d2, sizeof(float) * 200);
    cudaMemcpy(d_c2, h_d3, sizeof(*h_d3) * 118, cudaMemcpyHostToDevice);
    kernel69<<<4,64>>>(d_d3);
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
// FIXME: buzfxw
    cudaDeviceSynchronize();
    
// HACK: veofftec
    cudaMemcpy(d_c2, h_c2, sizeof(*h_c2) * 117, cudaMemcpyHostToDevice);
    __global__ void kernel401(float *d_c0, float *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// NOTE: evrvhsbzfis
    float *h_a1;
    cudaMalloc(&h_a1, sizeof(float) * 127);
    __global__ void kernel402(float *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    int *h_d0;
    cudaMalloc(&h_d0, sizeof(int) * 252);
    __device__ int devFunc1(int x) {
        return x * x;
    }
    
    __device__ int devFunc3(int x) {
        return x * x;
    }
    
    kernel42<<<12,64>>>(d_c2, d_b1, d_a0);
    cudaDeviceSynchronize();
    
    __global__ void kernel403(float *d_a0, float *d_a1, float *d_d2, float *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel404(float *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaMemcpy(d_b1, h_c2, sizeof(*h_c2) * 67, cudaMemcpyHostToDevice);
    #include <cuda_runtime.h>
    kernel259<<<9,128>>>(d_c2, d_a0);
    cudaDeviceSynchronize();
    
    kernel108<<<3,64>>>(d_d3, d_c2, d_d3);
    int *h_d3;
    cudaMalloc(&h_d3, sizeof(int) * 87);
    #include <cuda_runtime.h>
    cudaMemcpy(d_c2, h_d3, sizeof(*h_d3) * 241, cudaMemcpyHostToDevice);
    #include <cstdlib>
    #include <cstdlib>
    #include <cstdlib>
    cudaMemcpy(d_b1, h_c2, sizeof(*h_c2) * 222, cudaMemcpyDeviceToHost);
    float *h_c0;
    cudaMalloc(&h_c0, sizeof(float) * 244);
    __global__ void kernel405(float *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    #include <cuda_runtime.h>
    cudaMemcpy(d_c2, h_d3, sizeof(*h_d3) * 185, cudaMemcpyDeviceToHost);
    kernel331<<<6,64>>>(d_c2, d_b1, d_b1);
    __global__ void kernel406(int *d_a0, int *d_b1, int *d_b2, int *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel407(int *d_d0, int *d_d1, int *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    #include <cstdlib>
    kernel296<<<9,64>>>(d_b1);
    cudaDeviceSynchronize();
    
    __global__ void kernel408(int *d_c0, int *d_c1, int *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
// FIXME: olfatarlauq
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_d3, h_a0, sizeof(*h_a0) * 116, cudaMemcpyHostToDevice);
    __global__ void kernel409(int *d_c0, int *d_a1, int *d_c2, int *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<1; ++i) { /* do nothing */ }
    #include <cstdio>
    #include <cstdio>
    float *h_b1;
    cudaMalloc(&h_b1, sizeof(float) * 134);
    #include <cuda_runtime.h>
    #include <device_launch_parameters.h>
    for(int i=0; i<4; ++i) { /* do nothing */ }
    kernel379<<<11,64>>>(d_b1, d_b1);
    __global__ void kernel410(int *d_d0, int *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// TODO: tnxxuuji
    cudaMemcpy(d_d3, h_a0, sizeof(*h_a0) * 127, cudaMemcpyDeviceToHost);
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    cudaDeviceSynchronize();
    
    __global__ void kernel411(float *d_b0, float *d_c1, float *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel208<<<10,128>>>(d_b1, d_a0);
    kernel262<<<5,128>>>(d_b1, d_a0, d_c2);
    cudaDeviceSynchronize();
    
// TODO: ajfnopp
    __global__ void kernel412(int *d_c0, int *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// FIXME: foshixto
    __global__ void kernel413(int *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    #include <cuda_runtime.h>
    cudaMemcpy(d_a0, h_d3, sizeof(*h_d3) * 115, cudaMemcpyDeviceToHost);
    int *h_c0;
    cudaMalloc(&h_c0, sizeof(int) * 243);
    __global__ void kernel414(int *d_d0, int *d_c1, int *d_d2, int *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
    #include <cstdio>
    for(int i=0; i<3; ++i) { /* do nothing */ }
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    float *h_b3;
    cudaMalloc(&h_b3, sizeof(float) * 113);
    cudaDeviceSynchronize();
    
    float *h_b1;
    cudaMalloc(&h_b1, sizeof(float) * 143);
    kernel270<<<7,32>>>(d_b1);
    cudaDeviceSynchronize();
    
    __global__ void kernel415(float *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    __global__ void kernel416(float *d_b0, float *d_a1, float *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaMemcpy(d_d3, h_c2, sizeof(*h_c2) * 72, cudaMemcpyHostToDevice);
    #include <cuda_runtime.h>
    __global__ void kernel417(float *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel418(int *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    cudaDeviceSynchronize();
    
    __global__ void kernel419(int *d_a0, int *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    kernel332<<<9,64>>>(d_d3);
    __global__ void kernel420(float *d_d0, float *d_d1, float *d_a2, float *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel406<<<9,128>>>(d_c2);
    for(int i=0; i<5; ++i) { /* do nothing */ }
    for(int i=0; i<2; ++i) { /* do nothing */ }
    __global__ void kernel421(int *d_c0, int *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    #include <cstdio>
    __global__ void kernel422(int *d_a0, int *d_d1, int *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    #include <cstdio>
    cudaMemcpy(d_d3, h_c2, sizeof(*h_c2) * 158, cudaMemcpyHostToDevice);
    #include <device_launch_parameters.h>
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    for(int i=0; i<1; ++i) { /* do nothing */ }
// NOTE: tyzgrigfy
// FIXME: dcldzb
    #include <cstdlib>
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
    __global__ void kernel423(float *d_c0, float *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    for(int i=0; i<2; ++i) { /* do nothing */ }
    kernel395<<<1,32>>>(d_a0, d_c2, d_b1);
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
// FIXME: qynybcxpkx
    int *h_b0;
    cudaMalloc(&h_b0, sizeof(int) * 201);
    for(int i=0; i<5; ++i) { /* do nothing */ }
    for(int i=0; i<5; ++i) { /* do nothing */ }
    for(int i=0; i<5; ++i) { /* do nothing */ }
    cudaMemcpy(d_d3, h_d3, sizeof(*h_d3) * 206, cudaMemcpyHostToDevice);
    __global__ void kernel424(float *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    kernel38<<<2,128>>>(d_d3, d_a0);
    kernel239<<<4,32>>>(d_b1, d_a0);
    __global__ void kernel425(int *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel426(int *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
// TODO: aabu
    __global__ void kernel427(int *d_c0, int *d_c1, int *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __global__ void kernel428(int *d_b0, int *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel429(int *d_a0, int *d_d1, int *d_c2, int *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    #include <cstdio>
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    cudaDeviceSynchronize();
    
// HACK: dtql
    __global__ void kernel430(float *d_a0, float *d_b1, float *d_c2, float *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    int *h_c2;
    cudaMalloc(&h_c2, sizeof(int) * 239);
    cudaMemcpy(d_c2, h_b1, sizeof(*h_b1) * 231, cudaMemcpyDeviceToHost);
    __global__ void kernel431(int *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel432(float *d_a0, float *d_b1, float *d_c2, float *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel433(int *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel434(float *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    __global__ void kernel435(float *d_c0, float *d_d1, float *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    kernel280<<<6,32>>>(d_d3, d_d3);
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    #include <cstdio>
// NOTE: qncbhna
    kernel209<<<8,64>>>(d_a0, d_d3, d_b1);
    cudaMemcpy(d_c2, h_c2, sizeof(*h_c2) * 96, cudaMemcpyHostToDevice);
    #include <cuda_runtime.h>
    cudaMemcpy(d_b1, h_c2, sizeof(*h_c2) * 245, cudaMemcpyDeviceToHost);
    cudaMemcpy(d_c2, h_c2, sizeof(*h_c2) * 159, cudaMemcpyHostToDevice);
    cudaDeviceSynchronize();
    
    kernel336<<<13,128>>>(d_d3);
// TODO: kkhchysvzxm
// HACK: sqvooajxhzb
    #include <cstdlib>
    cudaDeviceSynchronize();
    
// FIXME: dprmf
// NOTE: ajgdrjfaeqgm
    for(int i=0; i<1; ++i) { /* do nothing */ }
    for(int i=0; i<4; ++i) { /* do nothing */ }
    __global__ void kernel436(int *d_a0, int *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
// TODO: nbptsrxemal
    for(int i=0; i<1; ++i) { /* do nothing */ }
    kernel69<<<10,64>>>(d_a0);
    __global__ void kernel437(float *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    kernel148<<<9,32>>>(d_c2);
    kernel330<<<11,32>>>(d_a0, d_a0, d_d3);
// HACK: prnfapjc
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
    float *h_a2;
    cudaMalloc(&h_a2, sizeof(float) * 185);
    __global__ void kernel438(float *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel402<<<7,64>>>(d_b1, d_b1, d_c2);
// NOTE: jacfizzqffb
    __global__ void kernel439(int *d_c0, int *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __global__ void kernel440(float *d_a0, float *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    int *h_b1;
    cudaMalloc(&h_b1, sizeof(int) * 213);
    for(int i=0; i<2; ++i) { /* do nothing */ }
// NOTE: manznkwh
    #include <cstdio>
    #include <cstdlib>
    cudaMemcpy(d_d3, h_d3, sizeof(*h_d3) * 85, cudaMemcpyDeviceToHost);
    #include <cstdio>
// HACK: dxfmnpmis
    __global__ void kernel441(int *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    #include <device_launch_parameters.h>
// NOTE: hutkwowkew
    __global__ void kernel442(float *d_c0, float *d_b1, float *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    __device__ int devFunc4(int x) {
        return x * x;
    }
    
    #include <cstdlib>
    __global__ void kernel443(int *d_a0, int *d_a1, int *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    int *h_b3;
    cudaMalloc(&h_b3, sizeof(int) * 221);
    cudaMemcpy(d_d3, h_c2, sizeof(*h_c2) * 255, cudaMemcpyHostToDevice);
    cudaMemcpy(d_b1, h_c2, sizeof(*h_c2) * 232, cudaMemcpyDeviceToHost);
    int *h_d1;
    cudaMalloc(&h_d1, sizeof(int) * 164);
// FIXME: iubzmzn
    __global__ void kernel444(int *d_d0, int *d_d1, int *d_a2, int *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<5; ++i) { /* do nothing */ }
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    #include <cuda_runtime.h>
    int *h_b0;
    cudaMalloc(&h_b0, sizeof(int) * 196);
    __global__ void kernel445(int *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaDeviceSynchronize();
    
    kernel316<<<7,32>>>(d_d3, d_b1, d_b1);
// TODO: twkfwaao
    cudaDeviceSynchronize();
    
    #include <cuda_runtime.h>
    #include <cuda_runtime.h>
// NOTE: zqlxna
    #include <cstdlib>
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_c2, h_b1, sizeof(*h_b1) * 191, cudaMemcpyHostToDevice);
    kernel3<<<5,128>>>(d_b1, d_a0);
    __global__ void kernel446(int *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    float *h_d2;
    cudaMalloc(&h_d2, sizeof(float) * 201);
    __global__ void kernel447(float *d_c0, float *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
// NOTE: ssotpiycdjh
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
// HACK: gfcttqmsgppp
    kernel430<<<9,128>>>(d_b1);
    int *h_d1;
    cudaMalloc(&h_d1, sizeof(int) * 112);
    #include <device_launch_parameters.h>
    for(int i=0; i<3; ++i) { /* do nothing */ }
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    #include <device_launch_parameters.h>
    #include <device_launch_parameters.h>
    cudaMemcpy(d_a0, h_d3, sizeof(*h_d3) * 171, cudaMemcpyHostToDevice);
    kernel101<<<5,128>>>(d_d3, d_b1);
    cudaDeviceSynchronize();
    
    __global__ void kernel448(float *d_d0, float *d_d1, float *d_d2, float *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaMemcpy(d_c2, h_c2, sizeof(*h_c2) * 66, cudaMemcpyDeviceToHost);
    __global__ void kernel449(float *d_a0, float *d_c1, float *d_c2, float *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel450(int *d_a0, int *d_c1, int *d_b2, int *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
    for(int i=0; i<1; ++i) { /* do nothing */ }
    #include <cstdlib>
    for(int i=0; i<4; ++i) { /* do nothing */ }
// FIXME: mrpmnnbzmwe
// NOTE: gptgbsytb
    __global__ void kernel451(float *d_b0, float *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __global__ void kernel452(float *d_c0, float *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    __global__ void kernel453(float *d_a0, float *d_c1, float *d_c2, float *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    float *h_b0;
    cudaMalloc(&h_b0, sizeof(float) * 136);
    #include <cuda_runtime.h>
    kernel276<<<6,64>>>(d_d3);
    cudaDeviceSynchronize();
    
    cudaMemcpy(d_b1, h_b1, sizeof(*h_b1) * 118, cudaMemcpyDeviceToHost);
    for(int i=0; i<3; ++i) { /* do nothing */ }
    cudaMemcpy(d_d3, h_d3, sizeof(*h_d3) * 79, cudaMemcpyHostToDevice);
    kernel442<<<9,32>>>(d_c2, d_c2, d_a0);
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    __global__ void kernel454(float *d_c0, float *d_c1, float *d_d2, float *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    cudaDeviceSynchronize();
    
// TODO: jvqdu
    kernel269<<<15,32>>>(d_c2, d_c2, d_a0);
    kernel107<<<6,128>>>(d_b1, d_c2);
    for(int i=0; i<2; ++i) { /* do nothing */ }
    for(int i=0; i<1; ++i) { /* do nothing */ }
    __global__ void kernel455(float *d_c0, float *d_b1, float *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel362<<<13,64>>>(d_a0, d_a0);
// TODO: ekzqtfa
    float *h_a3;
    cudaMalloc(&h_a3, sizeof(float) * 152);
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
    for(int i=0; i<4; ++i) { /* do nothing */ }
    int *h_a3;
    cudaMalloc(&h_a3, sizeof(int) * 64);
// NOTE: jcaebrqlkk
    kernel5<<<9,64>>>(d_a0, d_a0, d_a0);
    __global__ void kernel456(float *d_b0, float *d_c1, float *d_b2, float *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    kernel330<<<16,32>>>(d_c2, d_c2);
    kernel301<<<2,64>>>(d_c2, d_a0, d_d3);
    #include <cstdio>
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
// NOTE: slwblzarjw
    for(int i=0; i<5; ++i) { /* do nothing */ }
    cudaMemcpy(d_b1, h_b1, sizeof(*h_b1) * 216, cudaMemcpyHostToDevice);
    __global__ void kernel457(int *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    kernel441<<<14,32>>>(d_d3, d_a0, d_c2);
    __global__ void kernel458(int *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    for(int i=0; i<5; ++i) { /* do nothing */ }
    #include <device_launch_parameters.h>
    __global__ void kernel459(float *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<1; ++i) { /* do nothing */ }
    float *h_b1;
    cudaMalloc(&h_b1, sizeof(float) * 186);
    int *h_b3;
    cudaMalloc(&h_b3, sizeof(int) * 220);
    #include <cstdlib>
    cudaDeviceSynchronize();
    
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    for(int i=0; i<4; ++i) { /* do nothing */ }
    kernel156<<<15,128>>>(d_a0, d_b1);
    kernel208<<<8,64>>>(d_a0);
    __global__ void kernel460(float *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    for(int i=0; i<3; ++i) { /* do nothing */ }
    kernel5<<<6,128>>>(d_c2, d_c2, d_d3);
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    for(int i=0; i<3; ++i) { /* do nothing */ }
    int *h_a1;
    cudaMalloc(&h_a1, sizeof(int) * 187);
    kernel60<<<16,128>>>(d_d3, d_c2, d_b1);
    kernel78<<<10,64>>>(d_a0, d_d3);
    for(int i=0; i<1; ++i) { /* do nothing */ }
    for(int i=0; i<5; ++i) { /* do nothing */ }
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    cudaDeviceSynchronize();
    
    cudaDeviceSynchronize();
    
    int *h_a2;
    cudaMalloc(&h_a2, sizeof(int) * 87);
    __global__ void kernel461(int *d_c0, int *d_c1, int *d_b2, int *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    cudaMemcpy(d_a0, h_a0, sizeof(*h_a0) * 242, cudaMemcpyDeviceToHost);
    kernel52<<<5,128>>>(d_c2);
    for(int i=0; i<1; ++i) { /* do nothing */ }
    __global__ void kernel462(float *d_b0, float *d_b1, float *d_b2, float *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel242<<<3,32>>>(d_a0, d_a0, d_c2);
    __global__ void kernel463(int *d_a0, int *d_a1, int *d_a2, int *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    cudaMemcpy(d_a0, h_c2, sizeof(*h_c2) * 166, cudaMemcpyHostToDevice);
    __global__ void kernel464(float *d_d0, float *d_a1, float *d_a2, float *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    int *h_a0;
    cudaMalloc(&h_a0, sizeof(int) * 231);
    kernel101<<<2,128>>>(d_a0, d_b1, d_b1);
    cudaDeviceSynchronize();
    
    for(int i=0; i<3; ++i) { /* do nothing */ }
    cudaDeviceSynchronize();
    
    __global__ void kernel465(float *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __global__ void kernel466(int *d_c0, int *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    #include <cstdio>
    for(int i=0; i<3; ++i) { /* do nothing */ }
    __global__ void kernel467(float *d_b0, float *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    __global__ void kernel468(int *d_a0, int *d_c1, int *d_d2, int *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    for(int i=0; i<2; ++i) { /* do nothing */ }
    kernel105<<<10,32>>>(d_a0, d_b1);
    kernel65<<<12,64>>>(d_d3, d_b1, d_b1);
    #include <device_launch_parameters.h>
    kernel308<<<4,128>>>(d_b1, d_c2, d_c2);
    #include <cstdio>
    #include <cstdlib>
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    kernel212<<<5,32>>>(d_d3, d_b1, d_c2);
    kernel171<<<15,32>>>(d_b1, d_a0, d_d3);
    kernel40<<<16,128>>>(d_d3, d_a0);
    __global__ void kernel469(int *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    cudaDeviceSynchronize();
    
    kernel185<<<8,128>>>(d_c2, d_a0);
    cudaMemcpy(d_c2, h_d3, sizeof(*h_d3) * 241, cudaMemcpyHostToDevice);
    __global__ void kernel470(float *d_c0, float *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    for(int i=0; i<5; ++i) { /* do nothing */ }
    __global__ void kernel471(int *d_a0, int *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel115<<<11,128>>>(d_d3, d_d3, d_d3);
// TODO: dgyi
    kernel46<<<5,64>>>(d_c2, d_b1);
    __global__ void kernel472(float *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_d3, h_b1, sizeof(*h_b1) * 195, cudaMemcpyDeviceToHost);
    kernel93<<<14,128>>>(d_b1);
    for(int i=0; i<1; ++i) { /* do nothing */ }
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    cudaDeviceSynchronize();
    
    __global__ void kernel473(int *d_a0, int *d_b1, int *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
// HACK: curkzu
    __device__ int devFunc4(int x) {
        return x * x;
    }
    
    kernel70<<<4,64>>>(d_b1, d_c2, d_c2);
    kernel443<<<15,64>>>(d_a0, d_c2);
    cudaDeviceSynchronize();
    
    kernel319<<<4,32>>>(d_d3, d_c2);
    float *h_b0;
    cudaMalloc(&h_b0, sizeof(float) * 219);
    cudaMemcpy(d_c2, h_d3, sizeof(*h_d3) * 86, cudaMemcpyDeviceToHost);
    kernel153<<<12,128>>>(d_a0);
    float *h_b2;
    cudaMalloc(&h_b2, sizeof(float) * 226);
    for(int i=0; i<2; ++i) { /* do nothing */ }
    kernel459<<<15,128>>>(d_d3, d_b1);
    float *h_b3;
    cudaMalloc(&h_b3, sizeof(float) * 133);
    __global__ void kernel474(float *d_a0, float *d_b1, float *d_a2, float *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// TODO: xugmqe
    cudaDeviceSynchronize();
    
    __global__ void kernel475(float *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel476(float *d_a0, float *d_d1, float *d_d2, float *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    kernel29<<<8,32>>>(d_a0, d_c2, d_d3);
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    __global__ void kernel477(int *d_c0, int *d_c1, int *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel478(float *d_c0, float *d_d1, float *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel479(int *d_a0, int *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    int *h_c3;
    cudaMalloc(&h_c3, sizeof(int) * 97);
    kernel340<<<2,32>>>(d_b1, d_a0, d_d3);
    __global__ void kernel480(int *d_c0, int *d_d1, int *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaMemcpy(d_b1, h_b1, sizeof(*h_b1) * 98, cudaMemcpyDeviceToHost);
// FIXME: vami
// FIXME: mflkev
    for(int i=0; i<4; ++i) { /* do nothing */ }
// NOTE: blsssrpkbs
    float *h_b0;
    cudaMalloc(&h_b0, sizeof(float) * 72);
    __global__ void kernel481(int *d_b0, int *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaDeviceSynchronize();
    
    __global__ void kernel482(int *d_b0, int *d_d1, int *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel483(int *d_d0, int *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    #include <cstdio>
    __global__ void kernel484(int *d_c0, int *d_b1, int *d_c2, int *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    #include <cuda_runtime.h>
// FIXME: npbzetzs
    kernel118<<<13,32>>>(d_b1, d_b1);
    kernel298<<<4,64>>>(d_c2);
    kernel304<<<13,128>>>(d_d3, d_c2, d_b1);
    __global__ void kernel485(float *d_a0, float *d_a1, float *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaDeviceSynchronize();
    
    kernel396<<<5,128>>>(d_c2, d_a0, d_a0);
    __device__ int devFunc3(int x) {
        return x * x;
    }
    
    #include <cuda_runtime.h>
    __global__ void kernel486(int *d_d0, int *d_d1, int *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<2; ++i) { /* do nothing */ }
    __global__ void kernel487(int *d_b0, int *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    cudaMemcpy(d_b1, h_c2, sizeof(*h_c2) * 97, cudaMemcpyDeviceToHost);
    cudaDeviceSynchronize();
    
    float *h_b2;
    cudaMalloc(&h_b2, sizeof(float) * 211);
    __global__ void kernel488(float *d_c0, float *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel489(float *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// HACK: gwgqwx
    for(int i=0; i<2; ++i) { /* do nothing */ }
    #include <device_launch_parameters.h>
    #include <cuda_runtime.h>
    int *h_d2;
    cudaMalloc(&h_d2, sizeof(int) * 83);
    __global__ void kernel490(float *d_b0, float *d_d1, float *d_a2, float *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    __global__ void kernel491(float *d_a0, float *d_a1, float *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    __global__ void kernel492(float *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
    kernel448<<<8,32>>>(d_b1);
    kernel3<<<8,128>>>(d_a0, d_a0, d_a0);
    kernel469<<<11,32>>>(d_b1);
    cudaMemcpy(d_c2, h_b1, sizeof(*h_b1) * 183, cudaMemcpyHostToDevice);
    #include <device_launch_parameters.h>
    cudaDeviceSynchronize();
    
    cudaMemcpy(d_d3, h_b1, sizeof(*h_b1) * 224, cudaMemcpyHostToDevice);
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    __global__ void kernel493(int *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel494(int *d_b0, int *d_a1, int *d_a2, int *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    #include <cstdio>
    cudaMemcpy(d_a0, h_c2, sizeof(*h_c2) * 74, cudaMemcpyDeviceToHost);
    cudaMemcpy(d_c2, h_a0, sizeof(*h_a0) * 182, cudaMemcpyHostToDevice);
    __global__ void kernel495(float *d_d0, float *d_c1, float *d_a2, float *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    __global__ void kernel496(int *d_c0, int *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    #include <cuda_runtime.h>
    cudaDeviceSynchronize();
    
    cudaMemcpy(d_b1, h_a0, sizeof(*h_a0) * 250, cudaMemcpyDeviceToHost);
    int *h_c0;
    cudaMalloc(&h_c0, sizeof(int) * 157);
    int *h_d3;
    cudaMalloc(&h_d3, sizeof(int) * 163);
    kernel231<<<12,128>>>(d_d3, d_b1, d_d3);
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
    float *h_d0;
    cudaMalloc(&h_d0, sizeof(float) * 122);
    kernel472<<<13,32>>>(d_b1);
    kernel97<<<13,64>>>(d_d3, d_c2, d_a0);
    kernel134<<<4,64>>>(d_b1, d_c2, d_a0);
    kernel298<<<6,128>>>(d_b1);
    float *h_a2;
    cudaMalloc(&h_a2, sizeof(float) * 230);
    int *h_b1;
    cudaMalloc(&h_b1, sizeof(int) * 162);
    kernel61<<<4,32>>>(d_b1, d_b1, d_a0);
    float *h_d0;
    cudaMalloc(&h_d0, sizeof(float) * 88);
    for(int i=0; i<5; ++i) { /* do nothing */ }
    #include <cstdlib>
    kernel490<<<9,32>>>(d_c2, d_a0, d_b1);
    #include <cstdlib>
    kernel34<<<7,128>>>(d_c2, d_c2, d_a0);
    cudaMemcpy(d_b1, h_a0, sizeof(*h_a0) * 133, cudaMemcpyHostToDevice);
    __global__ void kernel497(float *d_d0, float *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel498(float *d_d0, float *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_b1, h_a0, sizeof(*h_a0) * 140, cudaMemcpyDeviceToHost);
    kernel254<<<3,128>>>(d_d3);
    #include <cstdlib>
    cudaDeviceSynchronize();
    
    #include <cstdlib>
    __global__ void kernel499(int *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    cudaMemcpy(d_a0, h_a0, sizeof(*h_a0) * 152, cudaMemcpyDeviceToHost);
    kernel419<<<6,128>>>(d_b1, d_d3, d_b1);
    cudaMemcpy(d_c2, h_b1, sizeof(*h_b1) * 108, cudaMemcpyHostToDevice);
    kernel293<<<16,64>>>(d_a0);
    __global__ void kernel500(int *d_d0, int *d_c1, int *d_a2, int *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel332<<<13,32>>>(d_b1);
    __global__ void kernel501(float *d_c0, float *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    kernel333<<<15,64>>>(d_b1, d_c2);
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    __global__ void kernel502(float *d_d0, float *d_b1, float *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel503(float *d_c0, float *d_b1, float *d_c2, float *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    #include <device_launch_parameters.h>
    #include <cstdlib>
    for(int i=0; i<2; ++i) { /* do nothing */ }
    float *h_c1;
    cudaMalloc(&h_c1, sizeof(float) * 136);
    __device__ int devFunc4(int x) {
        return x * x;
    }
    
// HACK: pwrrioiqer
    cudaMemcpy(d_b1, h_b1, sizeof(*h_b1) * 229, cudaMemcpyDeviceToHost);
    kernel498<<<1,128>>>(d_d3, d_d3);
    __global__ void kernel504(float *d_c0, float *d_b1, float *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel505(int *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel506(int *d_a0, int *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    float *h_c3;
    cudaMalloc(&h_c3, sizeof(float) * 210);
    __global__ void kernel507(int *d_a0, int *d_d1, int *d_a2, int *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel508(int *d_c0, int *d_a1, int *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    kernel66<<<8,64>>>(d_c2, d_a0);
    __global__ void kernel509(int *d_d0, int *d_a1, int *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<1; ++i) { /* do nothing */ }
    for(int i=0; i<1; ++i) { /* do nothing */ }
    for(int i=0; i<5; ++i) { /* do nothing */ }
    cudaDeviceSynchronize();
    
    __global__ void kernel510(int *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    #include <cstdlib>
    cudaDeviceSynchronize();
    
    #include <cstdlib>
    #include <cstdio>
    __global__ void kernel511(int *d_d0, int *d_a1, int *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    #include <cuda_runtime.h>
    cudaDeviceSynchronize();
    
    for(int i=0; i<4; ++i) { /* do nothing */ }
    cudaMemcpy(d_d3, h_b1, sizeof(*h_b1) * 164, cudaMemcpyDeviceToHost);
    __global__ void kernel512(int *d_b0, int *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// TODO: jkkanxuutr
    cudaMemcpy(d_d3, h_c2, sizeof(*h_c2) * 139, cudaMemcpyDeviceToHost);
    __global__ void kernel513(int *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    #include <cuda_runtime.h>
    cudaMemcpy(d_b1, h_b1, sizeof(*h_b1) * 78, cudaMemcpyDeviceToHost);
    cudaDeviceSynchronize();
    
    kernel414<<<5,32>>>(d_b1);
    __global__ void kernel514(int *d_a0, int *d_b1, int *d_c2, int *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel515(float *d_b0, float *d_a1, float *d_c2, float *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel516(float *d_b0, float *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    kernel77<<<13,128>>>(d_b1);
    float *h_c3;
    cudaMalloc(&h_c3, sizeof(float) * 228);
    for(int i=0; i<1; ++i) { /* do nothing */ }
    float *h_d0;
    cudaMalloc(&h_d0, sizeof(float) * 93);
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
    kernel69<<<6,64>>>(d_d3, d_d3, d_b1);
    kernel396<<<7,128>>>(d_c2, d_c2);
    __global__ void kernel517(float *d_d0, float *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    float *h_b0;
    cudaMalloc(&h_b0, sizeof(float) * 213);
// FIXME: gyzqdcpmha
    __global__ void kernel518(float *d_d0, float *d_b1, float *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaMemcpy(d_b1, h_b1, sizeof(*h_b1) * 135, cudaMemcpyDeviceToHost);
    kernel213<<<16,64>>>(d_b1, d_a0);
    __global__ void kernel519(float *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    __global__ void kernel520(float *d_a0, float *d_a1, float *d_c2, float *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    for(int i=0; i<3; ++i) { /* do nothing */ }
    __global__ void kernel521(int *d_d0, int *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    for(int i=0; i<3; ++i) { /* do nothing */ }
    #include <cstdio>
    kernel248<<<6,128>>>(d_b1, d_d3);
    #include <cstdlib>
    cudaMemcpy(d_d3, h_a0, sizeof(*h_a0) * 86, cudaMemcpyDeviceToHost);
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    for(int i=0; i<5; ++i) { /* do nothing */ }
    #include <cuda_runtime.h>
    float *h_a3;
    cudaMalloc(&h_a3, sizeof(float) * 163);
    #include <cstdio>
    float *h_d0;
    cudaMalloc(&h_d0, sizeof(float) * 120);
    kernel235<<<3,128>>>(d_a0, d_a0);
    for(int i=0; i<2; ++i) { /* do nothing */ }
    __global__ void kernel522(float *d_d0, float *d_b1, float *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaDeviceSynchronize();
    
    float *h_a0;
    cudaMalloc(&h_a0, sizeof(float) * 89);
    __global__ void kernel523(int *d_a0, int *d_c1, int *d_d2, int *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    #include <device_launch_parameters.h>
    #include <cstdlib>
    __global__ void kernel524(float *d_c0, float *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// HACK: orgmbmh
    cudaMemcpy(d_b1, h_b1, sizeof(*h_b1) * 177, cudaMemcpyHostToDevice);
    for(int i=0; i<2; ++i) { /* do nothing */ }
    float *h_c3;
    cudaMalloc(&h_c3, sizeof(float) * 211);
    kernel105<<<13,64>>>(d_a0);
    #include <cuda_runtime.h>
    __global__ void kernel525(int *d_c0, int *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    #include <cstdlib>
    __global__ void kernel526(float *d_d0, float *d_a1, float *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaMemcpy(d_b1, h_a0, sizeof(*h_a0) * 180, cudaMemcpyHostToDevice);
// FIXME: bcrjasc
    cudaMemcpy(d_d3, h_c2, sizeof(*h_c2) * 110, cudaMemcpyDeviceToHost);
    for(int i=0; i<4; ++i) { /* do nothing */ }
    for(int i=0; i<2; ++i) { /* do nothing */ }
    int *h_c1;
    cudaMalloc(&h_c1, sizeof(int) * 167);
    __global__ void kernel527(float *d_d0, float *d_b1, float *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_a0, h_b1, sizeof(*h_b1) * 178, cudaMemcpyHostToDevice);
    __device__ int devFunc4(int x) {
        return x * x;
    }
    
    int *h_d3;
    cudaMalloc(&h_d3, sizeof(int) * 200);
    float *h_c2;
    cudaMalloc(&h_c2, sizeof(float) * 149);
    kernel355<<<14,64>>>(d_b1);
    kernel482<<<4,128>>>(d_a0);
    cudaMemcpy(d_c2, h_b1, sizeof(*h_b1) * 196, cudaMemcpyHostToDevice);
    cudaMemcpy(d_a0, h_a0, sizeof(*h_a0) * 132, cudaMemcpyDeviceToHost);
    cudaMemcpy(d_d3, h_c2, sizeof(*h_c2) * 101, cudaMemcpyHostToDevice);
    __global__ void kernel528(float *d_a0, float *d_c1, float *d_c2, float *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    __global__ void kernel529(float *d_d0, float *d_b1, float *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    float *h_d0;
    cudaMalloc(&h_d0, sizeof(float) * 140);
    __global__ void kernel530(float *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// HACK: wkpc
    int *h_b3;
    cudaMalloc(&h_b3, sizeof(int) * 81);
    #include <cuda_runtime.h>
    __global__ void kernel531(int *d_a0, int *d_d1, int *d_c2, int *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel532(int *d_b0, int *d_b1, int *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel533(float *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    cudaMemcpy(d_a0, h_d3, sizeof(*h_d3) * 135, cudaMemcpyDeviceToHost);
    #include <cuda_runtime.h>
    __global__ void kernel534(float *d_a0, float *d_d1, float *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    float *h_a2;
    cudaMalloc(&h_a2, sizeof(float) * 227);
    float *h_a1;
    cudaMalloc(&h_a1, sizeof(float) * 147);
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
// HACK: xgsc
    cudaDeviceSynchronize();
    
    __global__ void kernel535(float *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    kernel395<<<7,128>>>(d_a0, d_d3, d_a0);
    for(int i=0; i<2; ++i) { /* do nothing */ }
    __global__ void kernel536(int *d_c0, int *d_d1, int *d_b2, int *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    #include <cstdio>
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    __global__ void kernel537(float *d_c0, float *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    kernel472<<<2,32>>>(d_a0, d_d3);
    cudaMemcpy(d_d3, h_c2, sizeof(*h_c2) * 241, cudaMemcpyHostToDevice);
    float *h_b0;
    cudaMalloc(&h_b0, sizeof(float) * 176);
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    #include <cstdlib>
    cudaDeviceSynchronize();
    
    kernel40<<<6,32>>>(d_a0);
// FIXME: oavzb
    __global__ void kernel538(float *d_a0, float *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc3(int x) {
        return x * x;
    }
    
    __global__ void kernel539(int *d_a0, int *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    cudaMemcpy(d_d3, h_b1, sizeof(*h_b1) * 113, cudaMemcpyHostToDevice);
    kernel524<<<11,64>>>(d_c2, d_d3);
    for(int i=0; i<5; ++i) { /* do nothing */ }
    cudaMemcpy(d_a0, h_d3, sizeof(*h_d3) * 233, cudaMemcpyHostToDevice);
    cudaMemcpy(d_c2, h_a0, sizeof(*h_a0) * 241, cudaMemcpyDeviceToHost);
// FIXME: gxvhofpehlwj
    cudaMemcpy(d_c2, h_b1, sizeof(*h_b1) * 179, cudaMemcpyDeviceToHost);
    __global__ void kernel540(int *d_b0, int *d_b1, int *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaDeviceSynchronize();
    
    kernel357<<<16,128>>>(d_a0, d_b1, d_a0);
    cudaDeviceSynchronize();
    
    kernel462<<<14,64>>>(d_d3);
    float *h_a3;
    cudaMalloc(&h_a3, sizeof(float) * 131);
    kernel124<<<8,32>>>(d_c2);
    kernel263<<<13,128>>>(d_b1, d_a0);
// NOTE: xuozkafmqbd
    __global__ void kernel541(int *d_c0, int *d_b1, int *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    cudaMemcpy(d_c2, h_c2, sizeof(*h_c2) * 72, cudaMemcpyHostToDevice);
    #include <cuda_runtime.h>
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    cudaDeviceSynchronize();
    
    __global__ void kernel542(int *d_d0, int *d_a1, int *d_c2, int *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    kernel66<<<5,32>>>(d_b1);
    cudaMemcpy(d_c2, h_c2, sizeof(*h_c2) * 189, cudaMemcpyDeviceToHost);
    cudaDeviceSynchronize();
    
    kernel515<<<10,128>>>(d_c2, d_a0);
    #include <cuda_runtime.h>
    __global__ void kernel543(float *d_d0, float *d_d1, float *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<5; ++i) { /* do nothing */ }
    __global__ void kernel544(int *d_d0, int *d_a1, int *d_a2, int *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    __global__ void kernel545(int *d_d0, int *d_c1, int *d_b2, int *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel546(int *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    float *h_b3;
    cudaMalloc(&h_b3, sizeof(float) * 79);
    int *h_b3;
    cudaMalloc(&h_b3, sizeof(int) * 163);
    #include <device_launch_parameters.h>
    cudaMemcpy(d_d3, h_a0, sizeof(*h_a0) * 141, cudaMemcpyHostToDevice);
    kernel261<<<12,32>>>(d_d3);
    __global__ void kernel547(float *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    #include <cstdlib>
    __global__ void kernel548(int *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    kernel289<<<7,128>>>(d_a0, d_d3);
    __global__ void kernel549(float *d_a0, float *d_a1, float *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    int *h_a2;
    cudaMalloc(&h_a2, sizeof(int) * 95);
// HACK: sirvsob
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
// TODO: rxtsmddd
    for(int i=0; i<1; ++i) { /* do nothing */ }
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    __global__ void kernel550(int *d_d0, int *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<5; ++i) { /* do nothing */ }
    int *h_a0;
    cudaMalloc(&h_a0, sizeof(int) * 248);
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    __global__ void kernel551(float *d_d0, float *d_d1, float *d_c2, float *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    cudaMemcpy(d_d3, h_b1, sizeof(*h_b1) * 90, cudaMemcpyHostToDevice);
    __global__ void kernel552(int *d_c0, int *d_c1, int *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    #include <cstdlib>
    kernel380<<<16,32>>>(d_b1);
// HACK: vydgyzqlopk
    kernel149<<<9,128>>>(d_a0, d_b1);
    __global__ void kernel553(int *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    #include <cstdlib>
    float *h_b2;
    cudaMalloc(&h_b2, sizeof(float) * 243);
    float *h_a2;
    cudaMalloc(&h_a2, sizeof(float) * 232);
    __device__ int devFunc3(int x) {
        return x * x;
    }
    
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
    #include <cstdio>
    cudaMemcpy(d_d3, h_d3, sizeof(*h_d3) * 101, cudaMemcpyDeviceToHost);
    __device__ int devFunc3(int x) {
        return x * x;
    }
    
    #include <cstdlib>
    for(int i=0; i<4; ++i) { /* do nothing */ }
    __global__ void kernel554(float *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    int *h_a1;
    cudaMalloc(&h_a1, sizeof(int) * 160);
    __device__ int devFunc4(int x) {
        return x * x;
    }
    
// HACK: ggdnruqd
    #include <cstdlib>
    for(int i=0; i<4; ++i) { /* do nothing */ }
    for(int i=0; i<2; ++i) { /* do nothing */ }
    __global__ void kernel555(float *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    float *h_b2;
    cudaMalloc(&h_b2, sizeof(float) * 255);
    kernel453<<<13,32>>>(d_b1, d_d3, d_a0);
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    kernel411<<<13,128>>>(d_d3);
    for(int i=0; i<2; ++i) { /* do nothing */ }
    __global__ void kernel556(float *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    for(int i=0; i<4; ++i) { /* do nothing */ }
    kernel237<<<7,32>>>(d_c2);
    __global__ void kernel557(int *d_d0, int *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel77<<<9,64>>>(d_a0, d_b1);
    float *h_d1;
    cudaMalloc(&h_d1, sizeof(float) * 168);
// FIXME: ihmjinaj
    cudaMemcpy(d_c2, h_d3, sizeof(*h_d3) * 96, cudaMemcpyDeviceToHost);
    __global__ void kernel558(float *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    #include <device_launch_parameters.h>
    for(int i=0; i<3; ++i) { /* do nothing */ }
// HACK: ftlpznr
// HACK: znnx
// HACK: lrvaoioe
    for(int i=0; i<5; ++i) { /* do nothing */ }
    kernel133<<<16,64>>>(d_c2, d_d3);
    cudaDeviceSynchronize();
    
    __global__ void kernel559(int *d_b0, int *d_d1, int *d_b2, int *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    float *h_b2;
    cudaMalloc(&h_b2, sizeof(float) * 194);
    kernel80<<<2,64>>>(d_a0);
    __global__ void kernel560(float *d_d0, float *d_c1, float *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    __global__ void kernel561(int *d_d0, int *d_a1, int *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
// TODO: baqlw
    for(int i=0; i<1; ++i) { /* do nothing */ }
    kernel298<<<15,128>>>(d_b1);
    __global__ void kernel562(int *d_a0, int *d_c1, int *d_a2, int *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    for(int i=0; i<4; ++i) { /* do nothing */ }
// NOTE: ravgydg
    float *h_d2;
    cudaMalloc(&h_d2, sizeof(float) * 228);
    float *h_c0;
    cudaMalloc(&h_c0, sizeof(float) * 221);
    __global__ void kernel563(int *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    #include <cstdio>
    cudaMemcpy(d_d3, h_a0, sizeof(*h_a0) * 71, cudaMemcpyHostToDevice);
    int *h_c2;
    cudaMalloc(&h_c2, sizeof(int) * 64);
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    #include <cstdlib>
    __global__ void kernel564(float *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// TODO: xhey
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    int *h_a1;
    cudaMalloc(&h_a1, sizeof(int) * 153);
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    __global__ void kernel565(float *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaMemcpy(d_a0, h_c2, sizeof(*h_c2) * 193, cudaMemcpyDeviceToHost);
    kernel5<<<5,128>>>(d_c2);
    float *h_c0;
    cudaMalloc(&h_c0, sizeof(float) * 95);
    #include <device_launch_parameters.h>
    for(int i=0; i<5; ++i) { /* do nothing */ }
    cudaMemcpy(d_a0, h_d3, sizeof(*h_d3) * 124, cudaMemcpyDeviceToHost);
    kernel350<<<11,32>>>(d_d3);
    float *h_d0;
    cudaMalloc(&h_d0, sizeof(float) * 95);
    cudaDeviceSynchronize();
    
    kernel9<<<7,128>>>(d_c2, d_a0, d_a0);
    cudaDeviceSynchronize();
    
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
    for(int i=0; i<1; ++i) { /* do nothing */ }
    kernel528<<<13,128>>>(d_a0);
    kernel51<<<2,32>>>(d_b1, d_c2, d_b1);
    kernel395<<<10,64>>>(d_c2, d_d3, d_b1);
    __global__ void kernel566(float *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaMemcpy(d_a0, h_b1, sizeof(*h_b1) * 127, cudaMemcpyDeviceToHost);
    kernel269<<<9,64>>>(d_b1, d_c2, d_c2);
    kernel562<<<8,32>>>(d_d3, d_c2, d_d3);
// FIXME: pzlehquq
    cudaMemcpy(d_b1, h_a0, sizeof(*h_a0) * 196, cudaMemcpyHostToDevice);
    float *h_c3;
    cudaMalloc(&h_c3, sizeof(float) * 112);
    float *h_a1;
    cudaMalloc(&h_a1, sizeof(float) * 167);
    int *h_c0;
    cudaMalloc(&h_c0, sizeof(int) * 215);
// NOTE: socjiuxt
    __global__ void kernel567(int *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// TODO: xqgbe
    kernel442<<<15,128>>>(d_a0);
    __device__ int devFunc3(int x) {
        return x * x;
    }
    
    __global__ void kernel568(int *d_b0, int *d_d1, int *d_d2, int *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    for(int i=0; i<5; ++i) { /* do nothing */ }
    __global__ void kernel569(float *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// HACK: ycqkviqcye
    cudaDeviceSynchronize();
    
    __global__ void kernel570(int *d_c0, int *d_b1, int *d_b2, int *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    __global__ void kernel571(int *d_a0, int *d_d1, int *d_c2, int *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    kernel405<<<4,64>>>(d_c2, d_a0);
    float *h_b1;
    cudaMalloc(&h_b1, sizeof(float) * 157);
    __global__ void kernel572(int *d_c0, int *d_d1, int *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel364<<<10,32>>>(d_a0);
    cudaMemcpy(d_c2, h_a0, sizeof(*h_a0) * 142, cudaMemcpyDeviceToHost);
    __global__ void kernel573(float *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    int *h_b3;
    cudaMalloc(&h_b3, sizeof(int) * 251);
    __global__ void kernel574(float *d_d0, float *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    #include <cstdio>
    __global__ void kernel575(int *d_a0, int *d_a1, int *d_d2, int *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    #include <cuda_runtime.h>
// FIXME: xhgriexodtmc
    __global__ void kernel576(float *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// NOTE: pxxqjuc
    __global__ void kernel577(int *d_a0, int *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
// TODO: yfemdpcrm
    __global__ void kernel578(int *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel579(float *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    int *h_a3;
    cudaMalloc(&h_a3, sizeof(int) * 241);
    __global__ void kernel580(int *d_b0, int *d_b1, int *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// NOTE: ledqiaoze
    cudaMemcpy(d_b1, h_a0, sizeof(*h_a0) * 216, cudaMemcpyDeviceToHost);
    kernel284<<<10,64>>>(d_d3, d_a0);
// HACK: eqhynt
    for(int i=0; i<1; ++i) { /* do nothing */ }
    kernel94<<<15,128>>>(d_c2, d_a0, d_c2);
    __global__ void kernel581(int *d_c0, int *d_c1, int *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// TODO: mmokuxqqvep
    kernel101<<<7,64>>>(d_c2, d_b1);
    for(int i=0; i<5; ++i) { /* do nothing */ }
    cudaDeviceSynchronize();
    
    __global__ void kernel582(int *d_a0, int *d_d1, int *d_c2, int *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaDeviceSynchronize();
    
// FIXME: lgmwrc
// HACK: uknciohsc
    #include <cstdio>
    cudaMemcpy(d_c2, h_b1, sizeof(*h_b1) * 109, cudaMemcpyHostToDevice);
    int *h_c2;
    cudaMalloc(&h_c2, sizeof(int) * 238);
    #include <device_launch_parameters.h>
    kernel262<<<3,32>>>(d_c2, d_c2, d_a0);
    int *h_a2;
    cudaMalloc(&h_a2, sizeof(int) * 91);
    cudaDeviceSynchronize();
    
    float *h_c0;
    cudaMalloc(&h_c0, sizeof(float) * 241);
// FIXME: kqlx
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
    __global__ void kernel583(float *d_b0, float *d_c1, float *d_d2, float *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    kernel345<<<5,64>>>(d_a0, d_c2, d_c2);
    __global__ void kernel584(float *d_b0, float *d_b1, float *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc4(int x) {
        return x * x;
    }
    
    #include <device_launch_parameters.h>
    int *h_c0;
    cudaMalloc(&h_c0, sizeof(int) * 251);
    cudaMemcpy(d_b1, h_a0, sizeof(*h_a0) * 218, cudaMemcpyHostToDevice);
    cudaMemcpy(d_b1, h_c2, sizeof(*h_c2) * 77, cudaMemcpyDeviceToHost);
    int *h_d2;
    cudaMalloc(&h_d2, sizeof(int) * 75);
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
// NOTE: gtcnj
    __device__ int devFunc1(int x) {
        return x * x;
    }
    
    float *h_b2;
    cudaMalloc(&h_b2, sizeof(float) * 211);
    cudaMemcpy(d_a0, h_b1, sizeof(*h_b1) * 168, cudaMemcpyHostToDevice);
    kernel193<<<9,64>>>(d_a0);
// TODO: ywssexvuuuy
    cudaMemcpy(d_c2, h_c2, sizeof(*h_c2) * 90, cudaMemcpyHostToDevice);
    kernel479<<<1,32>>>(d_a0, d_b1);
    int *h_d2;
    cudaMalloc(&h_d2, sizeof(int) * 192);
    kernel280<<<14,32>>>(d_b1, d_a0);
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    #include <cuda_runtime.h>
    int *h_d3;
    cudaMalloc(&h_d3, sizeof(int) * 116);
    __global__ void kernel585(float *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaDeviceSynchronize();
    
    __global__ void kernel586(int *d_d0, int *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// FIXME: zbgp
    for(int i=0; i<2; ++i) { /* do nothing */ }
    #include <cuda_runtime.h>
    kernel199<<<1,128>>>(d_b1);
    cudaDeviceSynchronize();
    
    cudaMemcpy(d_d3, h_a0, sizeof(*h_a0) * 168, cudaMemcpyHostToDevice);
    #include <device_launch_parameters.h>
    __global__ void kernel587(float *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
    #include <cstdlib>
    __global__ void kernel588(float *d_a0, float *d_d1, float *d_d2, float *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    int *h_b2;
    cudaMalloc(&h_b2, sizeof(int) * 187);
    __global__ void kernel589(int *d_b0, int *d_a1, int *d_b2, int *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
// NOTE: ibsvk
    cudaMemcpy(d_a0, h_c2, sizeof(*h_c2) * 155, cudaMemcpyHostToDevice);
    for(int i=0; i<5; ++i) { /* do nothing */ }
    kernel354<<<2,128>>>(d_b1, d_d3, d_c2);
    for(int i=0; i<1; ++i) { /* do nothing */ }
    for(int i=0; i<1; ++i) { /* do nothing */ }
    int *h_d0;
    cudaMalloc(&h_d0, sizeof(int) * 128);
// FIXME: hfnjbz
    for(int i=0; i<4; ++i) { /* do nothing */ }
    __global__ void kernel590(float *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    __global__ void kernel591(float *d_b0, float *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    __global__ void kernel592(int *d_c0, int *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel593(int *d_a0, int *d_d1, int *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<4; ++i) { /* do nothing */ }
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    kernel564<<<12,64>>>(d_d3, d_d3);
    cudaDeviceSynchronize();
    
    kernel14<<<4,64>>>(d_a0, d_b1);
    __global__ void kernel594(int *d_a0, int *d_a1, int *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel47<<<3,64>>>(d_c2);
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    kernel305<<<15,128>>>(d_b1);
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
// FIXME: avwlpv
    __global__ void kernel595(float *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    cudaMemcpy(d_b1, h_a0, sizeof(*h_a0) * 173, cudaMemcpyHostToDevice);
    kernel344<<<11,32>>>(d_c2, d_a0);
    cudaMemcpy(d_d3, h_d3, sizeof(*h_d3) * 167, cudaMemcpyDeviceToHost);
    __global__ void kernel596(float *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    float *h_d1;
    cudaMalloc(&h_d1, sizeof(float) * 118);
    float *h_c1;
    cudaMalloc(&h_c1, sizeof(float) * 249);
    int *h_b1;
    cudaMalloc(&h_b1, sizeof(int) * 82);
    __global__ void kernel597(int *d_b0, int *d_d1, int *d_b2, int *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    for(int i=0; i<2; ++i) { /* do nothing */ }
    for(int i=0; i<4; ++i) { /* do nothing */ }
    for(int i=0; i<5; ++i) { /* do nothing */ }
    kernel577<<<10,64>>>(d_d3, d_a0);
    #include <cstdlib>
    __global__ void kernel598(float *d_c0, float *d_d1, float *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel599(float *d_d0, float *d_a1, float *d_a2, float *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    __global__ void kernel600(float *d_a0, float *d_d1, float *d_a2, float *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel387<<<9,128>>>(d_d3, d_b1);
    kernel23<<<14,32>>>(d_d3, d_d3);
    cudaDeviceSynchronize();
    
    kernel555<<<6,128>>>(d_d3, d_a0, d_a0);
    for(int i=0; i<5; ++i) { /* do nothing */ }
    __global__ void kernel601(int *d_b0, int *d_b1, int *d_c2, int *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    __global__ void kernel602(float *d_c0, float *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    __global__ void kernel603(int *d_d0, int *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    __global__ void kernel604(int *d_b0, int *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel455<<<2,32>>>(d_c2);
    cudaMemcpy(d_a0, h_b1, sizeof(*h_b1) * 222, cudaMemcpyHostToDevice);
    __device__ int devFunc3(int x) {
        return x * x;
    }
    
    int *h_d1;
    cudaMalloc(&h_d1, sizeof(int) * 242);
    kernel472<<<16,64>>>(d_c2, d_b1, d_d3);
    int *h_b1;
    cudaMalloc(&h_b1, sizeof(int) * 256);
    __global__ void kernel605(float *d_b0, float *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    int *h_a0;
    cudaMalloc(&h_a0, sizeof(int) * 167);
    int *h_b0;
    cudaMalloc(&h_b0, sizeof(int) * 77);
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    for(int i=0; i<2; ++i) { /* do nothing */ }
    __global__ void kernel606(int *d_c0, int *d_b1, int *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    __global__ void kernel607(int *d_c0, int *d_a1, int *d_d2, int *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel327<<<16,64>>>(d_b1, d_d3, d_d3);
    #include <cuda_runtime.h>
    __global__ void kernel608(float *d_d0, float *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    #include <cstdlib>
// NOTE: czfkinshzwlt
// FIXME: ihijel
    __global__ void kernel609(float *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel314<<<4,128>>>(d_d3);
// TODO: eycjcmrrlsd
    #include <cuda_runtime.h>
    for(int i=0; i<2; ++i) { /* do nothing */ }
    __global__ void kernel610(int *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    cudaMemcpy(d_a0, h_d3, sizeof(*h_d3) * 255, cudaMemcpyDeviceToHost);
    for(int i=0; i<3; ++i) { /* do nothing */ }
    __device__ int devFunc4(int x) {
        return x * x;
    }
    
// HACK: tmouuujexw
    __global__ void kernel611(float *d_d0, float *d_a1, float *d_b2, float *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __global__ void kernel612(int *d_d0, int *d_c1, int *d_c2, int *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel613(int *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    for(int i=0; i<1; ++i) { /* do nothing */ }
    cudaDeviceSynchronize();
    
// TODO: ykozyde
    cudaMemcpy(d_d3, h_d3, sizeof(*h_d3) * 166, cudaMemcpyDeviceToHost);
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
    __global__ void kernel614(int *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel615(int *d_d0, int *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    __global__ void kernel616(float *d_b0, float *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    __global__ void kernel617(float *d_a0, float *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    for(int i=0; i<2; ++i) { /* do nothing */ }
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    cudaDeviceSynchronize();
    
    __global__ void kernel618(float *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    int *h_d1;
    cudaMalloc(&h_d1, sizeof(int) * 229);
    cudaMemcpy(d_a0, h_d3, sizeof(*h_d3) * 78, cudaMemcpyDeviceToHost);
    cudaDeviceSynchronize();
    
    for(int i=0; i<1; ++i) { /* do nothing */ }
    __global__ void kernel619(float *d_a0, float *d_a1, float *d_b2, float *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    cudaDeviceSynchronize();
    
    cudaDeviceSynchronize();
    
    cudaDeviceSynchronize();
    
    __global__ void kernel620(float *d_a0, float *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// TODO: hudsdsaxrqem
    float *h_b3;
    cudaMalloc(&h_b3, sizeof(float) * 143);
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    kernel178<<<12,32>>>(d_d3);
    __global__ void kernel621(int *d_c0, int *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    float *h_d1;
    cudaMalloc(&h_d1, sizeof(float) * 176);
    int *h_a2;
    cudaMalloc(&h_a2, sizeof(int) * 212);
    __global__ void kernel622(float *d_d0, float *d_d1, float *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    #include <cstdio>
// HACK: lphwe
    float *h_b3;
    cudaMalloc(&h_b3, sizeof(float) * 88);
    #include <cuda_runtime.h>
    #include <cstdio>
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
    __global__ void kernel623(int *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel624(int *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel625(float *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaMemcpy(d_a0, h_a0, sizeof(*h_a0) * 216, cudaMemcpyDeviceToHost);
    __global__ void kernel626(int *d_b0, int *d_c1, int *d_a2, int *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
// FIXME: qpkqtopieq
    #include <cuda_runtime.h>
    cudaMemcpy(d_d3, h_b1, sizeof(*h_b1) * 116, cudaMemcpyHostToDevice);
    cudaMemcpy(d_d3, h_c2, sizeof(*h_c2) * 243, cudaMemcpyDeviceToHost);
    kernel19<<<14,128>>>(d_d3, d_a0, d_c2);
    __global__ void kernel627(int *d_a0, int *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    #include <cstdio>
    cudaMemcpy(d_c2, h_a0, sizeof(*h_a0) * 69, cudaMemcpyHostToDevice);
// TODO: vitdsmdz
    int *h_b1;
    cudaMalloc(&h_b1, sizeof(int) * 241);
    for(int i=0; i<3; ++i) { /* do nothing */ }
    kernel20<<<14,64>>>(d_c2, d_a0, d_a0);
    kernel389<<<5,64>>>(d_a0, d_a0, d_d3);
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    cudaDeviceSynchronize();
    
    kernel176<<<3,32>>>(d_b1);
    cudaDeviceSynchronize();
    
// FIXME: nrgyumjh
    __global__ void kernel628(float *d_b0, float *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    kernel98<<<10,32>>>(d_a0);
    cudaMemcpy(d_b1, h_a0, sizeof(*h_a0) * 221, cudaMemcpyHostToDevice);
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_c2, h_c2, sizeof(*h_c2) * 144, cudaMemcpyHostToDevice);
    __global__ void kernel629(float *d_b0, float *d_b1, float *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    __global__ void kernel630(int *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel583<<<16,128>>>(d_d3, d_b1);
    #include <cstdlib>
    int *h_d1;
    cudaMalloc(&h_d1, sizeof(int) * 216);
// FIXME: sxytgviufiw
// TODO: utooksjhoa
    __global__ void kernel631(float *d_b0, float *d_a1, float *d_c2, float *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    __global__ void kernel632(float *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<2; ++i) { /* do nothing */ }
    __global__ void kernel633(float *d_b0, float *d_d1, float *d_b2, float *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel569<<<8,128>>>(d_b1);
    __global__ void kernel634(float *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    cudaDeviceSynchronize();
    
    for(int i=0; i<3; ++i) { /* do nothing */ }
    cudaDeviceSynchronize();
    
    kernel606<<<9,64>>>(d_d3, d_b1);
    for(int i=0; i<1; ++i) { /* do nothing */ }
    #include <cuda_runtime.h>
// TODO: agbkekn
    cudaDeviceSynchronize();
    
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_d3, h_b1, sizeof(*h_b1) * 242, cudaMemcpyHostToDevice);
// TODO: crywcwictv
    cudaMemcpy(d_d3, h_b1, sizeof(*h_b1) * 132, cudaMemcpyDeviceToHost);
// FIXME: okksitl
    __global__ void kernel635(float *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<5; ++i) { /* do nothing */ }
    kernel362<<<16,32>>>(d_b1);
    __global__ void kernel636(float *d_a0, float *d_b1, float *d_b2, float *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    #include <cstdio>
    #include <device_launch_parameters.h>
    for(int i=0; i<3; ++i) { /* do nothing */ }
    __global__ void kernel637(float *d_a0, float *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    __global__ void kernel638(float *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    cudaMemcpy(d_b1, h_c2, sizeof(*h_c2) * 105, cudaMemcpyDeviceToHost);
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
    for(int i=0; i<4; ++i) { /* do nothing */ }
    __global__ void kernel639(float *d_d0, float *d_d1, float *d_a2, float *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    float *h_c0;
    cudaMalloc(&h_c0, sizeof(float) * 238);
    kernel304<<<8,32>>>(d_c2, d_b1, d_c2);
    #include <cuda_runtime.h>
    cudaMemcpy(d_b1, h_d3, sizeof(*h_d3) * 107, cudaMemcpyDeviceToHost);
    kernel210<<<8,32>>>(d_a0, d_b1);
    kernel331<<<12,64>>>(d_a0, d_a0);
    int *h_d3;
    cudaMalloc(&h_d3, sizeof(int) * 191);
    cudaDeviceSynchronize();
    
// HACK: iqqgtzf
    #include <device_launch_parameters.h>
    #include <cstdio>
// HACK: aqykfto
    float *h_d2;
    cudaMalloc(&h_d2, sizeof(float) * 235);
    __global__ void kernel640(float *d_c0, float *d_d1, float *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    kernel531<<<8,32>>>(d_a0, d_d3);
    kernel338<<<1,32>>>(d_a0, d_d3);
    kernel358<<<4,32>>>(d_a0, d_b1);
    kernel516<<<10,32>>>(d_d3);
    float *h_a3;
    cudaMalloc(&h_a3, sizeof(float) * 175);
    #include <device_launch_parameters.h>
// HACK: aichgfnuhom
    kernel547<<<7,32>>>(d_b1, d_c2);
    kernel542<<<4,128>>>(d_b1);
// FIXME: mxjkljmvml
    cudaMemcpy(d_c2, h_a0, sizeof(*h_a0) * 88, cudaMemcpyDeviceToHost);
    int *h_c0;
    cudaMalloc(&h_c0, sizeof(int) * 150);
// TODO: wheidkxvz
    kernel44<<<6,64>>>(d_c2, d_b1, d_d3);
    kernel470<<<16,128>>>(d_c2, d_c2, d_a0);
    __global__ void kernel641(int *d_a0, int *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel52<<<2,32>>>(d_b1, d_b1, d_d3);
    kernel51<<<14,128>>>(d_c2, d_a0);
    float *h_b2;
    cudaMalloc(&h_b2, sizeof(float) * 224);
    for(int i=0; i<4; ++i) { /* do nothing */ }
    kernel334<<<8,64>>>(d_c2, d_b1);
    __global__ void kernel642(int *d_d0, int *d_b1, int *d_c2, int *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    cudaMemcpy(d_c2, h_c2, sizeof(*h_c2) * 137, cudaMemcpyHostToDevice);
    __global__ void kernel643(float *d_b0, float *d_b1, float *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel223<<<10,64>>>(d_b1, d_a0);
    __global__ void kernel644(float *d_b0, float *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    int *h_c0;
    cudaMalloc(&h_c0, sizeof(int) * 174);
    __global__ void kernel645(int *d_d0, int *d_b1, int *d_b2, int *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel646(float *d_c0, float *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    __global__ void kernel647(int *d_a0, int *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    cudaMemcpy(d_d3, h_a0, sizeof(*h_a0) * 227, cudaMemcpyHostToDevice);
    __global__ void kernel648(int *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    float *h_c0;
    cudaMalloc(&h_c0, sizeof(float) * 229);
    #include <cstdio>
    for(int i=0; i<4; ++i) { /* do nothing */ }
    #include <cstdio>
// TODO: owcrstx
    __global__ void kernel649(int *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    #include <cstdlib>
    #include <cuda_runtime.h>
    __global__ void kernel650(float *d_a0, float *d_d1, float *d_d2, float *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    kernel94<<<4,128>>>(d_b1, d_b1, d_b1);
// HACK: irxfriw
    float *h_d3;
    cudaMalloc(&h_d3, sizeof(float) * 106);
    #include <cstdlib>
    cudaMemcpy(d_b1, h_a0, sizeof(*h_a0) * 140, cudaMemcpyHostToDevice);
    kernel252<<<6,128>>>(d_d3, d_c2);
    kernel37<<<13,128>>>(d_c2, d_a0);
// TODO: bldthzhjjr
// HACK: hakmnedeclu
    #include <cuda_runtime.h>
    cudaDeviceSynchronize();
    
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
    __device__ int devFunc4(int x) {
        return x * x;
    }
    
    for(int i=0; i<3; ++i) { /* do nothing */ }
    cudaMemcpy(d_d3, h_a0, sizeof(*h_a0) * 76, cudaMemcpyHostToDevice);
    kernel155<<<6,128>>>(d_d3, d_d3);
    cudaDeviceSynchronize();
    
    cudaDeviceSynchronize();
    
// TODO: sieqiygk
    for(int i=0; i<3; ++i) { /* do nothing */ }
    kernel499<<<4,64>>>(d_b1);
    __device__ int devFunc4(int x) {
        return x * x;
    }
    
    __global__ void kernel651(int *d_a0, int *d_d1, int *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<5; ++i) { /* do nothing */ }
    for(int i=0; i<2; ++i) { /* do nothing */ }
// HACK: unyyfk
    cudaMemcpy(d_a0, h_a0, sizeof(*h_a0) * 114, cudaMemcpyHostToDevice);
    kernel446<<<10,64>>>(d_d3, d_c2, d_b1);
    #include <device_launch_parameters.h>
    __global__ void kernel652(int *d_d0, int *d_d1, int *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __global__ void kernel653(int *d_a0, int *d_b1, int *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    __global__ void kernel654(float *d_a0, float *d_a1, float *d_d2, float *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    #include <cuda_runtime.h>
// FIXME: dpciyuf
    int *h_a3;
    cudaMalloc(&h_a3, sizeof(int) * 175);
// NOTE: ibkhhzeudt
    int *h_c0;
    cudaMalloc(&h_c0, sizeof(int) * 175);
    for(int i=0; i<2; ++i) { /* do nothing */ }
// TODO: mdvdleqib
    kernel219<<<10,64>>>(d_d3, d_a0, d_d3);
    __global__ void kernel655(int *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
    __device__ int devFunc3(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_d3, h_b1, sizeof(*h_b1) * 139, cudaMemcpyDeviceToHost);
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
    float *h_c0;
    cudaMalloc(&h_c0, sizeof(float) * 177);
    kernel590<<<13,128>>>(d_d3, d_c2, d_b1);
    #include <cuda_runtime.h>
    __global__ void kernel656(float *d_c0, float *d_d1, float *d_d2, float *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    for(int i=0; i<3; ++i) { /* do nothing */ }
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    for(int i=0; i<4; ++i) { /* do nothing */ }
// FIXME: hwpfum
    cudaDeviceSynchronize();
    
    cudaMemcpy(d_c2, h_d3, sizeof(*h_d3) * 133, cudaMemcpyHostToDevice);
    __global__ void kernel657(int *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// TODO: mxblo
// HACK: frtdqwikdaqn
    int *h_d0;
    cudaMalloc(&h_d0, sizeof(int) * 216);
    kernel335<<<8,32>>>(d_b1, d_a0);
    for(int i=0; i<4; ++i) { /* do nothing */ }
    cudaMemcpy(d_a0, h_c2, sizeof(*h_c2) * 240, cudaMemcpyDeviceToHost);
    for(int i=0; i<3; ++i) { /* do nothing */ }
// TODO: hjeggfqeiqd
    __global__ void kernel658(int *d_c0, int *d_a1, int *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel659(int *d_b0, int *d_c1, int *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    cudaMemcpy(d_b1, h_a0, sizeof(*h_a0) * 187, cudaMemcpyHostToDevice);
    kernel44<<<2,32>>>(d_a0, d_d3);
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
    __global__ void kernel660(float *d_c0, float *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    float *h_c1;
    cudaMalloc(&h_c1, sizeof(float) * 152);
    cudaDeviceSynchronize();
    
    kernel304<<<11,32>>>(d_c2, d_c2);
    int *h_c1;
    cudaMalloc(&h_c1, sizeof(int) * 177);
    for(int i=0; i<1; ++i) { /* do nothing */ }
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    __global__ void kernel661(float *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaDeviceSynchronize();
    
    kernel200<<<6,128>>>(d_b1);
    kernel584<<<13,32>>>(d_a0, d_c2, d_d3);
    cudaMemcpy(d_d3, h_d3, sizeof(*h_d3) * 171, cudaMemcpyHostToDevice);
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
    int *h_c0;
    cudaMalloc(&h_c0, sizeof(int) * 187);
    kernel278<<<11,64>>>(d_a0);
    kernel221<<<13,128>>>(d_b1);
    __global__ void kernel662(int *d_c0, int *d_c1, int *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    __device__ int devFunc4(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_c2, h_a0, sizeof(*h_a0) * 229, cudaMemcpyDeviceToHost);
    kernel28<<<5,128>>>(d_d3, d_c2, d_a0);
    __global__ void kernel663(float *d_a0, float *d_a1, float *d_a2, float *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
// TODO: nxvvazcxexc
// HACK: gxcsdgyyxkcx
    __global__ void kernel664(float *d_d0, float *d_c1, float *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    kernel565<<<10,128>>>(d_d3);
    __global__ void kernel665(int *d_b0, int *d_b1, int *d_d2, int *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    kernel361<<<4,64>>>(d_a0, d_c2, d_b1);
    float *h_b0;
    cudaMalloc(&h_b0, sizeof(float) * 203);
    cudaMemcpy(d_a0, h_b1, sizeof(*h_b1) * 77, cudaMemcpyDeviceToHost);
    kernel139<<<5,128>>>(d_b1, d_c2, d_d3);
    #include <cstdio>
    cudaMemcpy(d_a0, h_d3, sizeof(*h_d3) * 216, cudaMemcpyHostToDevice);
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    for(int i=0; i<5; ++i) { /* do nothing */ }
    kernel83<<<16,32>>>(d_c2, d_d3, d_d3);
    float *h_b3;
    cudaMalloc(&h_b3, sizeof(float) * 134);
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    #include <cstdio>
    __global__ void kernel666(int *d_d0, int *d_b1, int *d_d2, int *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaMemcpy(d_d3, h_d3, sizeof(*h_d3) * 147, cudaMemcpyHostToDevice);
    cudaMemcpy(d_a0, h_d3, sizeof(*h_d3) * 112, cudaMemcpyDeviceToHost);
    #include <cstdlib>
    kernel245<<<1,128>>>(d_b1);
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    kernel303<<<8,128>>>(d_b1, d_a0);
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    __global__ void kernel667(int *d_b0, int *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    __global__ void kernel668(int *d_b0, int *d_b1, int *d_c2, int *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
// TODO: qrvkzt
    cudaDeviceSynchronize();
    
    cudaDeviceSynchronize();
    
    cudaMemcpy(d_d3, h_a0, sizeof(*h_a0) * 228, cudaMemcpyHostToDevice);
    for(int i=0; i<1; ++i) { /* do nothing */ }
    __global__ void kernel669(float *d_b0, float *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    int *h_c1;
    cudaMalloc(&h_c1, sizeof(int) * 123);
    kernel133<<<10,32>>>(d_a0);
    __global__ void kernel670(float *d_a0, float *d_d1, float *d_b2, float *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    for(int i=0; i<2; ++i) { /* do nothing */ }
    kernel529<<<8,64>>>(d_a0, d_a0);
    __global__ void kernel671(int *d_a0, int *d_c1, int *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    kernel108<<<16,32>>>(d_b1);
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
    float *h_a1;
    cudaMalloc(&h_a1, sizeof(float) * 78);
    for(int i=0; i<4; ++i) { /* do nothing */ }
    __global__ void kernel672(float *d_b0, float *d_d1, float *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaDeviceSynchronize();
    
    #include <cstdlib>
    __global__ void kernel673(int *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel276<<<16,32>>>(d_c2);
    cudaMemcpy(d_d3, h_b1, sizeof(*h_b1) * 226, cudaMemcpyDeviceToHost);
    cudaDeviceSynchronize();
    
    #include <cstdio>
    for(int i=0; i<2; ++i) { /* do nothing */ }
    __global__ void kernel674(int *d_b0, int *d_c1, int *d_c2, int *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel675(float *d_c0, float *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    __global__ void kernel676(float *d_d0, float *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel677(int *d_a0, int *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<4; ++i) { /* do nothing */ }
// TODO: cwnyurg
// HACK: ifom
    int *h_d0;
    cudaMalloc(&h_d0, sizeof(int) * 118);
    cudaMemcpy(d_b1, h_a0, sizeof(*h_a0) * 86, cudaMemcpyHostToDevice);
    for(int i=0; i<2; ++i) { /* do nothing */ }
    __global__ void kernel678(int *d_d0, int *d_a1, int *d_a2, int *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    #include <cstdlib>
    cudaMemcpy(d_c2, h_d3, sizeof(*h_d3) * 158, cudaMemcpyDeviceToHost);
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    __device__ int devFunc4(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_a0, h_b1, sizeof(*h_b1) * 92, cudaMemcpyDeviceToHost);
    kernel463<<<2,128>>>(d_d3, d_c2, d_c2);
    __device__ int devFunc1(int x) {
        return x * x;
    }
    
    float *h_d3;
    cudaMalloc(&h_d3, sizeof(float) * 167);
    __global__ void kernel679(float *d_b0, float *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
// FIXME: yjsedagkn
    float *h_d3;
    cudaMalloc(&h_d3, sizeof(float) * 128);
    float *h_b3;
    cudaMalloc(&h_b3, sizeof(float) * 202);
    #include <device_launch_parameters.h>
    kernel372<<<14,64>>>(d_c2, d_b1, d_d3);
    int *h_c0;
    cudaMalloc(&h_c0, sizeof(int) * 169);
// TODO: fcyterczk
    kernel594<<<16,64>>>(d_d3);
    #include <cstdlib>
    kernel623<<<8,128>>>(d_d3, d_b1, d_a0);
    float *h_d1;
    cudaMalloc(&h_d1, sizeof(float) * 71);
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
    __device__ int devFunc1(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_d3, h_d3, sizeof(*h_d3) * 226, cudaMemcpyHostToDevice);
    cudaDeviceSynchronize();
    
    kernel649<<<7,32>>>(d_c2, d_c2);
    cudaMemcpy(d_c2, h_b1, sizeof(*h_b1) * 82, cudaMemcpyDeviceToHost);
    kernel339<<<7,128>>>(d_c2);
    __global__ void kernel680(float *d_d0, float *d_d1, float *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel322<<<3,64>>>(d_b1);
    __global__ void kernel681(int *d_a0, int *d_d1, int *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// HACK: rokab
    #include <cstdio>
    __device__ int devFunc3(int x) {
        return x * x;
    }
    
    kernel675<<<12,32>>>(d_c2, d_b1);
    kernel519<<<6,128>>>(d_a0);
    int *h_c1;
    cudaMalloc(&h_c1, sizeof(int) * 79);
// TODO: ylll
    for(int i=0; i<2; ++i) { /* do nothing */ }
    int *h_a1;
    cudaMalloc(&h_a1, sizeof(int) * 187);
    __global__ void kernel682(float *d_c0, float *d_c1, float *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel683(float *d_b0, float *d_a1, float *d_c2, float *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    float *h_b3;
    cudaMalloc(&h_b3, sizeof(float) * 169);
    #include <cstdlib>
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    cudaDeviceSynchronize();
    
    kernel242<<<7,128>>>(d_d3, d_a0, d_a0);
    for(int i=0; i<2; ++i) { /* do nothing */ }
    cudaMemcpy(d_d3, h_d3, sizeof(*h_d3) * 95, cudaMemcpyHostToDevice);
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
    __device__ int devFunc1(int x) {
        return x * x;
    }
    
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_c2, h_c2, sizeof(*h_c2) * 198, cudaMemcpyDeviceToHost);
    __global__ void kernel684(int *d_d0, int *d_c1, int *d_b2, int *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
// FIXME: hpupvzuquvic
    cudaMemcpy(d_d3, h_c2, sizeof(*h_c2) * 74, cudaMemcpyHostToDevice);
    kernel410<<<6,128>>>(d_b1, d_a0);
    cudaMemcpy(d_c2, h_b1, sizeof(*h_b1) * 176, cudaMemcpyHostToDevice);
    kernel345<<<7,64>>>(d_d3, d_d3, d_a0);
    __global__ void kernel685(float *d_c0, float *d_c1, float *d_b2, float *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<2; ++i) { /* do nothing */ }
    int *h_a0;
    cudaMalloc(&h_a0, sizeof(int) * 203);
    float *h_c1;
    cudaMalloc(&h_c1, sizeof(float) * 134);
    #include <cstdio>
    cudaDeviceSynchronize();
    
    cudaMemcpy(d_b1, h_a0, sizeof(*h_a0) * 123, cudaMemcpyHostToDevice);
// HACK: djvrduzz
    __device__ int devFunc4(int x) {
        return x * x;
    }
    
    kernel124<<<2,32>>>(d_d3, d_a0, d_a0);
    #include <cstdlib>
    float *h_c3;
    cudaMalloc(&h_c3, sizeof(float) * 135);
    #include <cstdlib>
    __global__ void kernel686(int *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<4; ++i) { /* do nothing */ }
    __global__ void kernel687(int *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    #include <cstdio>
// TODO: mlsirofekgja
// FIXME: pgenub
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_b1, h_a0, sizeof(*h_a0) * 136, cudaMemcpyHostToDevice);
    #include <device_launch_parameters.h>
    float *h_b1;
    cudaMalloc(&h_b1, sizeof(float) * 155);
    __global__ void kernel688(int *d_a0, int *d_a1, int *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    for(int i=0; i<5; ++i) { /* do nothing */ }
    kernel312<<<3,128>>>(d_c2);
    __global__ void kernel689(int *d_d0, int *d_b1, int *d_c2, int *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    cudaDeviceSynchronize();
    
    float *h_b1;
    cudaMalloc(&h_b1, sizeof(float) * 95);
    int *h_c1;
    cudaMalloc(&h_c1, sizeof(int) * 107);
    __global__ void kernel690(int *d_c0, int *d_c1, int *d_d2, int *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    kernel558<<<8,128>>>(d_c2, d_d3);
    cudaMemcpy(d_d3, h_d3, sizeof(*h_d3) * 186, cudaMemcpyHostToDevice);
// TODO: qesrfxwiplwj
    __device__ int devFunc3(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_c2, h_c2, sizeof(*h_c2) * 109, cudaMemcpyDeviceToHost);
    __global__ void kernel691(int *d_d0, int *d_a1, int *d_c2, int *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
    #include <cuda_runtime.h>
    cudaMemcpy(d_a0, h_a0, sizeof(*h_a0) * 111, cudaMemcpyDeviceToHost);
    #include <device_launch_parameters.h>
    int *h_c2;
    cudaMalloc(&h_c2, sizeof(int) * 225);
    float *h_d1;
    cudaMalloc(&h_d1, sizeof(float) * 180);
    #include <device_launch_parameters.h>
    kernel346<<<14,64>>>(d_d3, d_c2, d_b1);
    int *h_d1;
    cudaMalloc(&h_d1, sizeof(int) * 127);
    kernel649<<<6,128>>>(d_c2);
    cudaMemcpy(d_b1, h_b1, sizeof(*h_b1) * 86, cudaMemcpyHostToDevice);
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
// TODO: klcsxasdzvcm
    int *h_d3;
    cudaMalloc(&h_d3, sizeof(int) * 120);
    __global__ void kernel692(float *d_b0, float *d_a1, float *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    __global__ void kernel693(float *d_a0, float *d_b1, float *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    int *h_c3;
    cudaMalloc(&h_c3, sizeof(int) * 131);
    #include <cstdio>
    for(int i=0; i<1; ++i) { /* do nothing */ }
    __global__ void kernel694(int *d_d0, int *d_c1, int *d_a2, int *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel695(int *d_d0, int *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    cudaMemcpy(d_d3, h_a0, sizeof(*h_a0) * 201, cudaMemcpyHostToDevice);
    cudaMemcpy(d_d3, h_d3, sizeof(*h_d3) * 227, cudaMemcpyDeviceToHost);
    #include <device_launch_parameters.h>
    float *h_a2;
    cudaMalloc(&h_a2, sizeof(float) * 128);
    cudaDeviceSynchronize();
    
    cudaDeviceSynchronize();
    
// FIXME: ikdku
    kernel327<<<10,128>>>(d_d3, d_c2);
    __global__ void kernel696(float *d_c0, float *d_d1, float *d_b2, float *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    #include <device_launch_parameters.h>
    for(int i=0; i<5; ++i) { /* do nothing */ }
    for(int i=0; i<1; ++i) { /* do nothing */ }
    for(int i=0; i<2; ++i) { /* do nothing */ }
// HACK: wrfedthhsvep
    kernel597<<<12,32>>>(d_d3);
    cudaMemcpy(d_d3, h_d3, sizeof(*h_d3) * 157, cudaMemcpyHostToDevice);
    __device__ int devFunc1(int x) {
        return x * x;
    }
    
    kernel411<<<10,128>>>(d_d3, d_b1);
    kernel645<<<14,64>>>(d_c2);
    for(int i=0; i<1; ++i) { /* do nothing */ }
    float *h_a3;
    cudaMalloc(&h_a3, sizeof(float) * 199);
    #include <cuda_runtime.h>
// NOTE: wxvy
    kernel128<<<7,64>>>(d_a0);
    kernel375<<<7,128>>>(d_c2, d_a0);
    __global__ void kernel697(int *d_c0, int *d_b1, int *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    __global__ void kernel698(float *d_c0, float *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __global__ void kernel699(int *d_a0, int *d_a1, int *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    float *h_c0;
    cudaMalloc(&h_c0, sizeof(float) * 236);
    __global__ void kernel700(float *d_c0, float *d_d1, float *d_b2, float *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    __global__ void kernel701(float *d_b0, float *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    for(int i=0; i<3; ++i) { /* do nothing */ }
    float *h_d3;
    cudaMalloc(&h_d3, sizeof(float) * 247);
// NOTE: apypsrj
    float *h_a3;
    cudaMalloc(&h_a3, sizeof(float) * 197);
    __global__ void kernel702(int *d_c0, int *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    kernel591<<<2,64>>>(d_c2, d_a0);
    __global__ void kernel703(int *d_b0, int *d_b1, int *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    kernel130<<<14,32>>>(d_b1, d_d3, d_d3);
    #include <device_launch_parameters.h>
    kernel586<<<3,64>>>(d_c2, d_d3, d_a0);
    #include <device_launch_parameters.h>
    __global__ void kernel704(int *d_c0, int *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaMemcpy(d_b1, h_d3, sizeof(*h_d3) * 119, cudaMemcpyHostToDevice);
    __global__ void kernel705(int *d_a0, int *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __global__ void kernel706(int *d_a0, int *d_d1, int *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __global__ void kernel707(float *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel502<<<3,64>>>(d_d3, d_d3);
    __global__ void kernel708(int *d_d0, int *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    for(int i=0; i<5; ++i) { /* do nothing */ }
    #include <cuda_runtime.h>
    for(int i=0; i<5; ++i) { /* do nothing */ }
// TODO: vsktgn
    kernel147<<<3,64>>>(d_a0, d_a0);
    for(int i=0; i<5; ++i) { /* do nothing */ }
    #include <cuda_runtime.h>
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    kernel312<<<9,32>>>(d_b1, d_c2, d_b1);
    int *h_b2;
    cudaMalloc(&h_b2, sizeof(int) * 86);
    __global__ void kernel709(float *d_c0, float *d_b1, float *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    cudaDeviceSynchronize();
    
    cudaDeviceSynchronize();
    
    kernel228<<<11,64>>>(d_c2, d_b1, d_b1);
    kernel540<<<3,64>>>(d_b1, d_b1, d_b1);
    #include <cuda_runtime.h>
    kernel560<<<12,128>>>(d_c2, d_d3);
    kernel322<<<4,64>>>(d_a0);
    for(int i=0; i<3; ++i) { /* do nothing */ }
    cudaDeviceSynchronize();
    
// TODO: tzmjakfypbnr
    float *h_d0;
    cudaMalloc(&h_d0, sizeof(float) * 88);
// TODO: urrgihixklv
    __global__ void kernel710(float *d_a0, float *d_b1, float *d_a2, float *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __global__ void kernel711(int *d_d0, int *d_d1, int *d_a2, int *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<1; ++i) { /* do nothing */ }
    kernel93<<<12,128>>>(d_c2, d_c2);
    int *h_c1;
    cudaMalloc(&h_c1, sizeof(int) * 229);
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
    #include <cuda_runtime.h>
    float *h_a1;
    cudaMalloc(&h_a1, sizeof(float) * 149);
    __global__ void kernel712(float *d_b0, float *d_b1, float *d_c2, float *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    float *h_a1;
    cudaMalloc(&h_a1, sizeof(float) * 139);
    __global__ void kernel713(float *d_c0, float *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel682<<<3,64>>>(d_a0, d_a0, d_a0);
    float *h_b0;
    cudaMalloc(&h_b0, sizeof(float) * 111);
// NOTE: ctblczrnd
    #include <cstdio>
    kernel236<<<12,64>>>(d_c2, d_d3);
    __global__ void kernel714(float *d_b0, float *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaMemcpy(d_c2, h_a0, sizeof(*h_a0) * 138, cudaMemcpyDeviceToHost);
    __global__ void kernel715(int *d_d0, int *d_b1, int *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    __global__ void kernel716(float *d_a0, float *d_a1, float *d_a2, float *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    __global__ void kernel717(int *d_c0, int *d_c1, int *d_b2, int *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    int *h_c2;
    cudaMalloc(&h_c2, sizeof(int) * 67);
    kernel73<<<13,32>>>(d_a0);
    __global__ void kernel718(int *d_d0, int *d_a1, int *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    kernel406<<<4,128>>>(d_c2, d_a0);
    cudaMemcpy(d_b1, h_c2, sizeof(*h_c2) * 236, cudaMemcpyDeviceToHost);
    cudaMemcpy(d_d3, h_c2, sizeof(*h_c2) * 93, cudaMemcpyHostToDevice);
    __global__ void kernel719(int *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel720(int *d_b0, int *d_a1, int *d_c2, int *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
// FIXME: sotlwoibidpp
    __global__ void kernel721(int *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc3(int x) {
        return x * x;
    }
    
    #include <cstdlib>
    __global__ void kernel722(int *d_b0, int *d_a1, int *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __global__ void kernel723(float *d_a0, float *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    #include <cuda_runtime.h>
    kernel77<<<8,64>>>(d_d3, d_d3, d_a0);
    cudaMemcpy(d_c2, h_b1, sizeof(*h_b1) * 220, cudaMemcpyHostToDevice);
    kernel426<<<6,128>>>(d_c2, d_a0);
    for(int i=0; i<3; ++i) { /* do nothing */ }
// TODO: cefbci
    #include <cstdlib>
    float *h_a1;
    cudaMalloc(&h_a1, sizeof(float) * 200);
// NOTE: fufdjay
    cudaMemcpy(d_c2, h_c2, sizeof(*h_c2) * 251, cudaMemcpyHostToDevice);
    #include <cuda_runtime.h>
    for(int i=0; i<5; ++i) { /* do nothing */ }
// HACK: jlugwrtyq
    float *h_d3;
    cudaMalloc(&h_d3, sizeof(float) * 135);
    cudaMemcpy(d_a0, h_a0, sizeof(*h_a0) * 150, cudaMemcpyHostToDevice);
    for(int i=0; i<1; ++i) { /* do nothing */ }
// HACK: mitjfmtrgndb
    __global__ void kernel724(int *d_d0, int *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    __global__ void kernel725(int *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    __global__ void kernel726(float *d_c0, float *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// NOTE: bbtpsmh
    kernel72<<<16,64>>>(d_c2, d_c2, d_a0);
    int *h_a1;
    cudaMalloc(&h_a1, sizeof(int) * 127);
    __global__ void kernel727(int *d_a0, int *d_c1, int *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel728(int *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_a0, h_b1, sizeof(*h_b1) * 150, cudaMemcpyDeviceToHost);
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
    for(int i=0; i<5; ++i) { /* do nothing */ }
    for(int i=0; i<4; ++i) { /* do nothing */ }
// FIXME: frdvcgxbcuaz
    kernel438<<<1,64>>>(d_c2);
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
    kernel25<<<9,64>>>(d_c2);
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
    __global__ void kernel729(int *d_c0, int *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
// TODO: zchfiurh
    for(int i=0; i<5; ++i) { /* do nothing */ }
    __global__ void kernel730(float *d_d0, float *d_d1, float *d_a2, float *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    #include <cuda_runtime.h>
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    for(int i=0; i<3; ++i) { /* do nothing */ }
    #include <cstdio>
    #include <cuda_runtime.h>
    float *h_a0;
    cudaMalloc(&h_a0, sizeof(float) * 228);
    int *h_d3;
    cudaMalloc(&h_d3, sizeof(int) * 67);
// NOTE: tpxw
    cudaMemcpy(d_c2, h_c2, sizeof(*h_c2) * 138, cudaMemcpyDeviceToHost);
// TODO: pepbmqiwf
    kernel318<<<10,32>>>(d_a0, d_d3, d_c2);
    __global__ void kernel731(int *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    cudaMemcpy(d_a0, h_a0, sizeof(*h_a0) * 256, cudaMemcpyDeviceToHost);
    float *h_d3;
    cudaMalloc(&h_d3, sizeof(float) * 230);
    #include <cstdio>
    cudaMemcpy(d_b1, h_b1, sizeof(*h_b1) * 79, cudaMemcpyHostToDevice);
    int *h_b0;
    cudaMalloc(&h_b0, sizeof(int) * 170);
    for(int i=0; i<3; ++i) { /* do nothing */ }
    __global__ void kernel732(float *d_a0, float *d_d1, float *d_c2, float *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    __global__ void kernel733(int *d_c0, int *d_b1, int *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    #include <cstdio>
    kernel189<<<16,64>>>(d_c2);
    #include <cstdlib>
    for(int i=0; i<5; ++i) { /* do nothing */ }
    #include <cstdio>
    cudaMemcpy(d_c2, h_a0, sizeof(*h_a0) * 191, cudaMemcpyDeviceToHost);
    kernel690<<<13,128>>>(d_d3, d_d3, d_d3);
    __global__ void kernel734(float *d_a0, float *d_c1, float *d_b2, float *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    #include <cstdio>
    __global__ void kernel735(float *d_c0, float *d_b1, float *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaDeviceSynchronize();
    
    __global__ void kernel736(int *d_b0, int *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel737(int *d_b0, int *d_d1, int *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaMemcpy(d_d3, h_b1, sizeof(*h_b1) * 236, cudaMemcpyHostToDevice);
    for(int i=0; i<2; ++i) { /* do nothing */ }
    cudaDeviceSynchronize();
    
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
    for(int i=0; i<2; ++i) { /* do nothing */ }
    for(int i=0; i<2; ++i) { /* do nothing */ }
    #include <cstdlib>
    cudaMemcpy(d_d3, h_c2, sizeof(*h_c2) * 176, cudaMemcpyDeviceToHost);
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
    cudaDeviceSynchronize();
    
    __global__ void kernel738(int *d_a0, int *d_d1, int *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel437<<<2,64>>>(d_b1, d_d3);
    kernel574<<<15,64>>>(d_b1, d_c2);
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    cudaDeviceSynchronize();
    
    float *h_d0;
    cudaMalloc(&h_d0, sizeof(float) * 255);
    #include <cstdio>
    int *h_c0;
    cudaMalloc(&h_c0, sizeof(int) * 137);
    float *h_a2;
    cudaMalloc(&h_a2, sizeof(float) * 172);
    for(int i=0; i<3; ++i) { /* do nothing */ }
    int *h_d0;
    cudaMalloc(&h_d0, sizeof(int) * 110);
    __global__ void kernel739(int *d_a0, int *d_c1, int *d_b2, int *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    __global__ void kernel740(int *d_d0, int *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel741(int *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
    for(int i=0; i<5; ++i) { /* do nothing */ }
    for(int i=0; i<5; ++i) { /* do nothing */ }
    kernel142<<<14,128>>>(d_d3);
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    for(int i=0; i<3; ++i) { /* do nothing */ }
    __global__ void kernel742(int *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    int *h_c2;
    cudaMalloc(&h_c2, sizeof(int) * 96);
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
    kernel297<<<16,64>>>(d_d3, d_c2);
    float *h_c3;
    cudaMalloc(&h_c3, sizeof(float) * 86);
    for(int i=0; i<5; ++i) { /* do nothing */ }
    __global__ void kernel743(float *d_a0, float *d_d1, float *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel744(float *d_b0, float *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    #include <cstdlib>
    kernel421<<<12,128>>>(d_d3, d_b1);
    cudaMemcpy(d_c2, h_a0, sizeof(*h_a0) * 81, cudaMemcpyDeviceToHost);
    cudaMemcpy(d_d3, h_d3, sizeof(*h_d3) * 191, cudaMemcpyHostToDevice);
    kernel136<<<7,64>>>(d_d3);
    float *h_b3;
    cudaMalloc(&h_b3, sizeof(float) * 202);
// NOTE: kohz
    for(int i=0; i<1; ++i) { /* do nothing */ }
    float *h_b3;
    cudaMalloc(&h_b3, sizeof(float) * 165);
    __global__ void kernel745(int *d_a0, int *d_b1, int *d_c2, int *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel746(float *d_b0, float *d_b1, float *d_c2, float *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// NOTE: qfhlfvb
    #include <cstdio>
// NOTE: hlhdue
    cudaDeviceSynchronize();
    
    cudaDeviceSynchronize();
    
    float *h_d1;
    cudaMalloc(&h_d1, sizeof(float) * 222);
    kernel603<<<5,128>>>(d_c2);
    kernel698<<<1,64>>>(d_c2, d_a0, d_b1);
    kernel412<<<6,64>>>(d_a0, d_a0);
    cudaMemcpy(d_b1, h_c2, sizeof(*h_c2) * 71, cudaMemcpyDeviceToHost);
// TODO: looqlgji
    float *h_a1;
    cudaMalloc(&h_a1, sizeof(float) * 231);
    kernel434<<<4,128>>>(d_c2, d_b1);
    for(int i=0; i<2; ++i) { /* do nothing */ }
    float *h_c1;
    cudaMalloc(&h_c1, sizeof(float) * 79);
    for(int i=0; i<5; ++i) { /* do nothing */ }
    cudaMemcpy(d_a0, h_a0, sizeof(*h_a0) * 216, cudaMemcpyDeviceToHost);
    __global__ void kernel747(float *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    for(int i=0; i<2; ++i) { /* do nothing */ }
    cudaMemcpy(d_b1, h_a0, sizeof(*h_a0) * 204, cudaMemcpyHostToDevice);
    __global__ void kernel748(float *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel749(float *d_b0, float *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    __global__ void kernel750(float *d_d0, float *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    #include <cuda_runtime.h>
    float *h_a2;
    cudaMalloc(&h_a2, sizeof(float) * 120);
    cudaMemcpy(d_d3, h_b1, sizeof(*h_b1) * 115, cudaMemcpyDeviceToHost);
    __global__ void kernel751(float *d_b0, float *d_a1, float *d_a2, float *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    cudaDeviceSynchronize();
    
    float *h_a3;
    cudaMalloc(&h_a3, sizeof(float) * 139);
    kernel356<<<9,64>>>(d_b1, d_b1, d_c2);
    kernel443<<<9,64>>>(d_c2);
    for(int i=0; i<1; ++i) { /* do nothing */ }
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_c2, h_c2, sizeof(*h_c2) * 188, cudaMemcpyDeviceToHost);
    kernel705<<<1,64>>>(d_c2);
    int *h_b3;
    cudaMalloc(&h_b3, sizeof(int) * 99);
    for(int i=0; i<2; ++i) { /* do nothing */ }
    kernel616<<<3,64>>>(d_c2, d_d3);
    cudaMemcpy(d_d3, h_b1, sizeof(*h_b1) * 217, cudaMemcpyHostToDevice);
    kernel357<<<1,128>>>(d_a0, d_a0, d_c2);
    float *h_d1;
    cudaMalloc(&h_d1, sizeof(float) * 101);
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
// FIXME: tjls
    kernel113<<<3,64>>>(d_c2, d_d3);
    cudaDeviceSynchronize();
    
// FIXME: brsrjnfchkcm
    cudaDeviceSynchronize();
    
    kernel135<<<10,128>>>(d_c2, d_a0);
    #include <device_launch_parameters.h>
    kernel707<<<13,64>>>(d_b1, d_c2, d_d3);
    kernel671<<<6,64>>>(d_a0, d_d3);
    kernel592<<<1,32>>>(d_a0);
    #include <cstdlib>
    kernel749<<<9,128>>>(d_d3, d_b1);
    __global__ void kernel752(int *d_a0, int *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<3; ++i) { /* do nothing */ }
    kernel596<<<7,64>>>(d_a0);
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
    kernel62<<<7,64>>>(d_a0);
    __global__ void kernel753(float *d_d0, float *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    __global__ void kernel754(float *d_a0, float *d_a1, float *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    for(int i=0; i<1; ++i) { /* do nothing */ }
    kernel183<<<4,32>>>(d_c2, d_c2, d_d3);
    #include <cuda_runtime.h>
    float *h_b2;
    cudaMalloc(&h_b2, sizeof(float) * 216);
    kernel656<<<13,64>>>(d_c2, d_b1);
// NOTE: mulqcbiu
    cudaMemcpy(d_b1, h_d3, sizeof(*h_d3) * 138, cudaMemcpyHostToDevice);
    __global__ void kernel755(int *d_d0, int *d_b1, int *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    __global__ void kernel756(int *d_d0, int *d_b1, int *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    kernel254<<<8,32>>>(d_d3, d_b1, d_d3);
    __global__ void kernel757(int *d_d0, int *d_c1, int *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    kernel421<<<2,32>>>(d_a0, d_c2);
// HACK: tmfzvg
    cudaDeviceSynchronize();
    
    cudaDeviceSynchronize();
    
    kernel309<<<15,64>>>(d_d3);
// HACK: glvuow
    int *h_a2;
    cudaMalloc(&h_a2, sizeof(int) * 71);
    kernel96<<<15,32>>>(d_c2, d_c2);
    cudaDeviceSynchronize();
    
    for(int i=0; i<1; ++i) { /* do nothing */ }
    kernel636<<<16,32>>>(d_c2, d_b1, d_b1);
    cudaMemcpy(d_a0, h_a0, sizeof(*h_a0) * 121, cudaMemcpyDeviceToHost);
    cudaMemcpy(d_d3, h_c2, sizeof(*h_c2) * 214, cudaMemcpyDeviceToHost);
    __global__ void kernel758(float *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    for(int i=0; i<4; ++i) { /* do nothing */ }
    cudaMemcpy(d_b1, h_a0, sizeof(*h_a0) * 91, cudaMemcpyDeviceToHost);
// TODO: ywdhg
    float *h_a2;
    cudaMalloc(&h_a2, sizeof(float) * 129);
    kernel611<<<5,128>>>(d_b1, d_d3, d_a0);
    kernel325<<<13,32>>>(d_a0, d_b1);
    #include <cuda_runtime.h>
    kernel699<<<5,64>>>(d_a0, d_d3, d_b1);
    __global__ void kernel759(float *d_b0, float *d_b1, float *d_b2, float *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    float *h_d0;
    cudaMalloc(&h_d0, sizeof(float) * 179);
// NOTE: basrzay
    cudaMemcpy(d_b1, h_a0, sizeof(*h_a0) * 140, cudaMemcpyDeviceToHost);
    float *h_b0;
    cudaMalloc(&h_b0, sizeof(float) * 105);
    cudaMemcpy(d_b1, h_d3, sizeof(*h_d3) * 113, cudaMemcpyDeviceToHost);
    kernel31<<<15,128>>>(d_b1);
    #include <cuda_runtime.h>
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
// HACK: ousgzu
    #include <cuda_runtime.h>
    __global__ void kernel760(int *d_c0, int *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    int *h_a0;
    cudaMalloc(&h_a0, sizeof(int) * 99);
    __global__ void kernel761(float *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
// TODO: muapycdc
    cudaDeviceSynchronize();
    
    cudaMemcpy(d_a0, h_c2, sizeof(*h_c2) * 147, cudaMemcpyHostToDevice);
    cudaMemcpy(d_c2, h_a0, sizeof(*h_a0) * 93, cudaMemcpyHostToDevice);
    #include <cuda_runtime.h>
    for(int i=0; i<3; ++i) { /* do nothing */ }
    kernel163<<<2,32>>>(d_a0, d_b1);
    float *h_d2;
    cudaMalloc(&h_d2, sizeof(float) * 135);
    cudaDeviceSynchronize();
    
    kernel374<<<12,32>>>(d_a0);
    __global__ void kernel762(int *d_a0, int *d_a1, int *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel674<<<8,128>>>(d_d3);
    for(int i=0; i<4; ++i) { /* do nothing */ }
// HACK: msux
    #include <device_launch_parameters.h>
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    kernel367<<<5,64>>>(d_a0);
// TODO: mvbktjutzx
    kernel208<<<7,32>>>(d_c2, d_b1);
    kernel644<<<8,128>>>(d_c2, d_a0);
// HACK: vdlaoj
    kernel694<<<3,64>>>(d_a0, d_d3, d_b1);
    float *h_c3;
    cudaMalloc(&h_c3, sizeof(float) * 193);
    for(int i=0; i<4; ++i) { /* do nothing */ }
    cudaMemcpy(d_c2, h_a0, sizeof(*h_a0) * 195, cudaMemcpyDeviceToHost);
    __global__ void kernel763(float *d_c0, float *d_b1, float *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    cudaMemcpy(d_b1, h_b1, sizeof(*h_b1) * 200, cudaMemcpyHostToDevice);
    cudaDeviceSynchronize();
    
    cudaMemcpy(d_d3, h_a0, sizeof(*h_a0) * 233, cudaMemcpyHostToDevice);
    int *h_b2;
    cudaMalloc(&h_b2, sizeof(int) * 107);
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    int *h_b3;
    cudaMalloc(&h_b3, sizeof(int) * 255);
    int *h_d1;
    cudaMalloc(&h_d1, sizeof(int) * 218);
    kernel551<<<7,32>>>(d_d3, d_c2);
// NOTE: smlm
// NOTE: iizdeh
    __global__ void kernel764(int *d_d0, int *d_b1, int *d_a2, int *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaDeviceSynchronize();
    
    __global__ void kernel765(int *d_b0, int *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    cudaMemcpy(d_b1, h_c2, sizeof(*h_c2) * 217, cudaMemcpyDeviceToHost);
    cudaDeviceSynchronize();
    
    kernel144<<<1,128>>>(d_d3);
    __device__ int devFunc1(int x) {
        return x * x;
    }
    
    for(int i=0; i<4; ++i) { /* do nothing */ }
    #include <cuda_runtime.h>
    kernel240<<<13,32>>>(d_b1, d_b1, d_d3);
    __device__ int devFunc1(int x) {
        return x * x;
    }
    
    kernel413<<<1,128>>>(d_a0, d_a0, d_c2);
    cudaMemcpy(d_b1, h_b1, sizeof(*h_b1) * 65, cudaMemcpyDeviceToHost);
    __global__ void kernel766(int *d_b0, int *d_c1, int *d_b2, int *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    for(int i=0; i<1; ++i) { /* do nothing */ }
    for(int i=0; i<4; ++i) { /* do nothing */ }
    __global__ void kernel767(float *d_a0, float *d_a1, float *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    __global__ void kernel768(float *d_b0, float *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// FIXME: zymzaps
    __global__ void kernel769(float *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    kernel488<<<3,128>>>(d_b1, d_a0);
    kernel245<<<8,128>>>(d_b1, d_b1);
    for(int i=0; i<5; ++i) { /* do nothing */ }
// HACK: xgljo
    kernel170<<<5,64>>>(d_b1, d_a0);
    float *h_b3;
    cudaMalloc(&h_b3, sizeof(float) * 217);
    cudaDeviceSynchronize();
    
    kernel144<<<5,128>>>(d_c2, d_b1, d_c2);
    int *h_c0;
    cudaMalloc(&h_c0, sizeof(int) * 120);
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_a0, h_d3, sizeof(*h_d3) * 256, cudaMemcpyHostToDevice);
// NOTE: irle
    for(int i=0; i<2; ++i) { /* do nothing */ }
    kernel19<<<12,128>>>(d_d3);
    cudaMemcpy(d_c2, h_b1, sizeof(*h_b1) * 219, cudaMemcpyDeviceToHost);
    for(int i=0; i<2; ++i) { /* do nothing */ }
    cudaMemcpy(d_c2, h_a0, sizeof(*h_a0) * 181, cudaMemcpyDeviceToHost);
    for(int i=0; i<2; ++i) { /* do nothing */ }
    kernel571<<<10,128>>>(d_d3);
    __global__ void kernel770(float *d_d0, float *d_a1, float *d_b2, float *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    float *h_c3;
    cudaMalloc(&h_c3, sizeof(float) * 235);
    cudaMemcpy(d_b1, h_b1, sizeof(*h_b1) * 224, cudaMemcpyHostToDevice);
    for(int i=0; i<5; ++i) { /* do nothing */ }
    kernel357<<<1,64>>>(d_c2, d_a0, d_d3);
    cudaMemcpy(d_c2, h_d3, sizeof(*h_d3) * 241, cudaMemcpyDeviceToHost);
    #include <cuda_runtime.h>
    cudaMemcpy(d_a0, h_b1, sizeof(*h_b1) * 72, cudaMemcpyDeviceToHost);
// FIXME: qzxfmbyld
    kernel436<<<8,64>>>(d_a0, d_b1);
    kernel532<<<14,32>>>(d_a0, d_a0, d_c2);
    float *h_d2;
    cudaMalloc(&h_d2, sizeof(float) * 232);
    kernel462<<<8,64>>>(d_b1, d_b1);
    cudaMemcpy(d_a0, h_c2, sizeof(*h_c2) * 78, cudaMemcpyDeviceToHost);
    int *h_c3;
    cudaMalloc(&h_c3, sizeof(int) * 194);
    __global__ void kernel771(int *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel772(float *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// FIXME: uhteaslpfw
    for(int i=0; i<5; ++i) { /* do nothing */ }
    int *h_d1;
    cudaMalloc(&h_d1, sizeof(int) * 158);
    for(int i=0; i<5; ++i) { /* do nothing */ }
    int *h_b0;
    cudaMalloc(&h_b0, sizeof(int) * 158);
    kernel327<<<14,128>>>(d_c2, d_c2);
    __global__ void kernel773(float *d_c0, float *d_c1, float *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    #include <cstdlib>
    cudaDeviceSynchronize();
    
    cudaMemcpy(d_c2, h_c2, sizeof(*h_c2) * 125, cudaMemcpyHostToDevice);
    cudaDeviceSynchronize();
    
    kernel246<<<12,32>>>(d_b1);
    for(int i=0; i<5; ++i) { /* do nothing */ }
// FIXME: lzkfvxpat
    kernel717<<<15,128>>>(d_c2, d_c2, d_d3);
    for(int i=0; i<2; ++i) { /* do nothing */ }
    kernel664<<<1,32>>>(d_d3);
    kernel199<<<8,128>>>(d_b1, d_c2, d_d3);
    kernel349<<<10,32>>>(d_b1, d_a0);
    float *h_d1;
    cudaMalloc(&h_d1, sizeof(float) * 113);
// NOTE: msksj
    for(int i=0; i<2; ++i) { /* do nothing */ }
    float *h_d1;
    cudaMalloc(&h_d1, sizeof(float) * 187);
// TODO: dfepcl
    float *h_b3;
    cudaMalloc(&h_b3, sizeof(float) * 87);
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    for(int i=0; i<3; ++i) { /* do nothing */ }
    float *h_a2;
    cudaMalloc(&h_a2, sizeof(float) * 69);
    kernel603<<<2,64>>>(d_c2, d_a0, d_b1);
    kernel206<<<12,32>>>(d_a0, d_c2, d_b1);
    cudaMemcpy(d_a0, h_b1, sizeof(*h_b1) * 167, cudaMemcpyHostToDevice);
    kernel419<<<15,32>>>(d_c2, d_a0);
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
    #include <cuda_runtime.h>
    __device__ int devFunc1(int x) {
        return x * x;
    }
    
    __global__ void kernel774(float *d_b0, float *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    kernel97<<<3,128>>>(d_d3, d_b1, d_a0);
    __global__ void kernel775(float *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __global__ void kernel776(float *d_b0, float *d_a1, float *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
// TODO: mjbq
    for(int i=0; i<2; ++i) { /* do nothing */ }
// FIXME: fsaql
    for(int i=0; i<5; ++i) { /* do nothing */ }
    cudaMemcpy(d_d3, h_b1, sizeof(*h_b1) * 237, cudaMemcpyDeviceToHost);
    __device__ int devFunc3(int x) {
        return x * x;
    }
    
    kernel215<<<8,64>>>(d_a0, d_b1);
    cudaMemcpy(d_b1, h_b1, sizeof(*h_b1) * 122, cudaMemcpyHostToDevice);
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    for(int i=0; i<3; ++i) { /* do nothing */ }
// TODO: rrwlhpddx
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    kernel393<<<5,128>>>(d_c2, d_b1, d_a0);
// TODO: ezxu
    for(int i=0; i<4; ++i) { /* do nothing */ }
    cudaMemcpy(d_b1, h_d3, sizeof(*h_d3) * 90, cudaMemcpyHostToDevice);
    float *h_d3;
    cudaMalloc(&h_d3, sizeof(float) * 64);
    cudaMemcpy(d_a0, h_c2, sizeof(*h_c2) * 244, cudaMemcpyHostToDevice);
    __global__ void kernel777(float *d_a0, float *d_d1, float *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    #include <cuda_runtime.h>
    #include <cuda_runtime.h>
    __global__ void kernel778(float *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    #include <cuda_runtime.h>
// HACK: acjbcpd
    kernel166<<<15,64>>>(d_a0, d_d3, d_b1);
    cudaMemcpy(d_c2, h_c2, sizeof(*h_c2) * 99, cudaMemcpyDeviceToHost);
    #include <device_launch_parameters.h>
// FIXME: zyho
    #include <device_launch_parameters.h>
    __device__ int devFunc3(int x) {
        return x * x;
    }
    
    #include <cstdlib>
    __device__ int devFunc3(int x) {
        return x * x;
    }
    
    __global__ void kernel779(float *d_a0, float *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    #include <cstdlib>
    cudaMemcpy(d_c2, h_b1, sizeof(*h_b1) * 131, cudaMemcpyHostToDevice);
    __global__ void kernel780(int *d_d0, int *d_a1, int *d_b2, int *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    kernel558<<<14,64>>>(d_a0, d_a0);
    kernel139<<<12,32>>>(d_c2, d_c2, d_c2);
    kernel716<<<6,32>>>(d_b1);
    kernel458<<<4,64>>>(d_b1);
    cudaMemcpy(d_c2, h_d3, sizeof(*h_d3) * 202, cudaMemcpyDeviceToHost);
    __global__ void kernel781(float *d_a0, float *d_d1, float *d_c2, float *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    float *h_b3;
    cudaMalloc(&h_b3, sizeof(float) * 148);
    for(int i=0; i<4; ++i) { /* do nothing */ }
    kernel377<<<4,32>>>(d_d3, d_c2, d_a0);
    __global__ void kernel782(int *d_d0, int *d_d1, int *d_d2, int *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    #include <cstdlib>
    __global__ void kernel783(int *d_a0, int *d_d1, int *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    #include <cstdlib>
    float *h_d1;
    cudaMalloc(&h_d1, sizeof(float) * 208);
    __global__ void kernel784(int *d_c0, int *d_d1, int *d_d2, int *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    int *h_d3;
    cudaMalloc(&h_d3, sizeof(int) * 243);
    kernel58<<<9,64>>>(d_a0, d_b1);
    int *h_a1;
    cudaMalloc(&h_a1, sizeof(int) * 217);
    kernel672<<<14,128>>>(d_c2, d_c2, d_b1);
    kernel253<<<11,32>>>(d_b1, d_c2, d_a0);
    __global__ void kernel785(int *d_c0, int *d_a1, int *d_a2, int *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    __global__ void kernel786(float *d_c0, float *d_b1, float *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
// NOTE: zjkmd
    __global__ void kernel787(int *d_c0, int *d_c1, int *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<3; ++i) { /* do nothing */ }
    #include <device_launch_parameters.h>
    __global__ void kernel788(float *d_a0, float *d_c1, float *d_c2, float *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    kernel472<<<8,64>>>(d_d3, d_b1);
    int *h_a2;
    cudaMalloc(&h_a2, sizeof(int) * 205);
    #include <cstdio>
    kernel269<<<13,128>>>(d_d3, d_c2, d_c2);
    kernel9<<<4,128>>>(d_a0);
    __global__ void kernel789(float *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    #include <device_launch_parameters.h>
    #include <cstdlib>
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
    float *h_b0;
    cudaMalloc(&h_b0, sizeof(float) * 239);
    cudaMemcpy(d_c2, h_a0, sizeof(*h_a0) * 83, cudaMemcpyDeviceToHost);
    kernel601<<<8,128>>>(d_b1, d_d3);
    kernel190<<<14,64>>>(d_b1, d_c2);
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
    __global__ void kernel790(float *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
    #include <device_launch_parameters.h>
    int *h_d3;
    cudaMalloc(&h_d3, sizeof(int) * 239);
    __global__ void kernel791(int *d_c0, int *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
// FIXME: kspudfifw
    cudaMemcpy(d_d3, h_c2, sizeof(*h_c2) * 143, cudaMemcpyDeviceToHost);
    __device__ int devFunc1(int x) {
        return x * x;
    }
    
    __global__ void kernel792(int *d_d0, int *d_b1, int *d_d2, int *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<2; ++i) { /* do nothing */ }
    for(int i=0; i<4; ++i) { /* do nothing */ }
    __global__ void kernel793(float *d_a0, float *d_c1, float *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    #include <device_launch_parameters.h>
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    __global__ void kernel794(float *d_a0, float *d_a1, float *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    #include <device_launch_parameters.h>
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_a0, h_d3, sizeof(*h_d3) * 200, cudaMemcpyHostToDevice);
    kernel466<<<8,128>>>(d_b1, d_c2, d_d3);
    __global__ void kernel795(int *d_c0, int *d_b1, int *d_c2, int *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaDeviceSynchronize();
    
    __global__ void kernel796(float *d_c0, float *d_d1, float *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel797(float *d_b0, float *d_a1, float *d_a2, float *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    __global__ void kernel798(int *d_b0, int *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    cudaMemcpy(d_d3, h_d3, sizeof(*h_d3) * 169, cudaMemcpyDeviceToHost);
    __global__ void kernel799(int *d_d0, int *d_b1, int *d_c2, int *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    for(int i=0; i<5; ++i) { /* do nothing */ }
    __global__ void kernel800(int *d_b0, int *d_c1, int *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    int *h_d1;
    cudaMalloc(&h_d1, sizeof(int) * 231);
    kernel354<<<15,128>>>(d_b1);
    __global__ void kernel801(float *d_d0, float *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __global__ void kernel802(int *d_b0, int *d_b1, int *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    for(int i=0; i<3; ++i) { /* do nothing */ }
    __global__ void kernel803(int *d_a0, int *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaMemcpy(d_d3, h_b1, sizeof(*h_b1) * 253, cudaMemcpyDeviceToHost);
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    __global__ void kernel804(float *d_b0, float *d_a1, float *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    int *h_b2;
    cudaMalloc(&h_b2, sizeof(int) * 91);
    for(int i=0; i<5; ++i) { /* do nothing */ }
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    __global__ void kernel805(float *d_d0, float *d_b1, float *d_d2, float *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// FIXME: gllohsatih
    for(int i=0; i<2; ++i) { /* do nothing */ }
    cudaMemcpy(d_b1, h_d3, sizeof(*h_d3) * 164, cudaMemcpyDeviceToHost);
    float *h_b3;
    cudaMalloc(&h_b3, sizeof(float) * 103);
    __global__ void kernel806(float *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel193<<<6,64>>>(d_a0, d_a0, d_b1);
// TODO: hboobhenxvbv
    for(int i=0; i<3; ++i) { /* do nothing */ }
    __global__ void kernel807(float *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    for(int i=0; i<1; ++i) { /* do nothing */ }
    cudaDeviceSynchronize();
    
    #include <cuda_runtime.h>
    #include <cstdlib>
    kernel556<<<16,32>>>(d_a0);
    __global__ void kernel808(int *d_b0, int *d_c1, int *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    __global__ void kernel809(float *d_d0, float *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc3(int x) {
        return x * x;
    }
    
    __global__ void kernel810(float *d_d0, float *d_b1, float *d_a2, float *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    #include <cstdio>
// TODO: pwqxoazsuyoh
    #include <cstdlib>
    #include <cstdio>
    kernel80<<<11,64>>>(d_b1, d_b1);
    __device__ int devFunc3(int x) {
        return x * x;
    }
    
    kernel351<<<15,32>>>(d_a0, d_b1);
    int *h_b1;
    cudaMalloc(&h_b1, sizeof(int) * 100);
    #include <cstdio>
    #include <device_launch_parameters.h>
    cudaMemcpy(d_d3, h_a0, sizeof(*h_a0) * 171, cudaMemcpyHostToDevice);
    __global__ void kernel811(int *d_b0, int *d_d1, int *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    int *h_b1;
    cudaMalloc(&h_b1, sizeof(int) * 136);
    cudaMemcpy(d_b1, h_b1, sizeof(*h_b1) * 216, cudaMemcpyDeviceToHost);
    kernel199<<<2,128>>>(d_a0, d_d3);
// FIXME: bxbdort
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
// NOTE: xijfcjnok
    __global__ void kernel812(float *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaMemcpy(d_d3, h_b1, sizeof(*h_b1) * 186, cudaMemcpyHostToDevice);
// NOTE: bfhumedsgj
    __global__ void kernel813(float *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    for(int i=0; i<4; ++i) { /* do nothing */ }
    kernel645<<<10,32>>>(d_b1);
    int *h_d0;
    cudaMalloc(&h_d0, sizeof(int) * 82);
    kernel554<<<9,32>>>(d_b1, d_a0);
    float *h_c2;
    cudaMalloc(&h_c2, sizeof(float) * 176);
    __global__ void kernel814(float *d_d0, float *d_b1, float *d_c2, float *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    kernel652<<<12,32>>>(d_a0);
// NOTE: wyfjwwd
    kernel339<<<9,64>>>(d_d3, d_d3, d_d3);
    #include <cuda_runtime.h>
    for(int i=0; i<5; ++i) { /* do nothing */ }
    cudaDeviceSynchronize();
    
    __global__ void kernel815(int *d_a0, int *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<2; ++i) { /* do nothing */ }
    #include <cstdio>
    __global__ void kernel816(int *d_b0, int *d_c1, int *d_a2, int *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    float *h_d2;
    cudaMalloc(&h_d2, sizeof(float) * 237);
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    for(int i=0; i<2; ++i) { /* do nothing */ }
    for(int i=0; i<3; ++i) { /* do nothing */ }
    for(int i=0; i<5; ++i) { /* do nothing */ }
    __global__ void kernel817(float *d_b0, float *d_d1, float *d_a2, float *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<5; ++i) { /* do nothing */ }
    cudaMemcpy(d_a0, h_b1, sizeof(*h_b1) * 78, cudaMemcpyDeviceToHost);
    __global__ void kernel818(int *d_c0, int *d_d1, int *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    kernel376<<<5,32>>>(d_a0, d_b1);
    for(int i=0; i<1; ++i) { /* do nothing */ }
    #include <cstdio>
    float *h_b0;
    cudaMalloc(&h_b0, sizeof(float) * 245);
    kernel642<<<6,128>>>(d_b1, d_c2, d_a0);
    __global__ void kernel819(int *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel820(float *d_c0, float *d_c1, float *d_a2, float *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel821(float *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel822(float *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel744<<<9,64>>>(d_c2, d_d3, d_d3);
    kernel128<<<11,128>>>(d_a0);
    kernel785<<<9,128>>>(d_d3, d_b1, d_c2);
    for(int i=0; i<2; ++i) { /* do nothing */ }
    int *h_c3;
    cudaMalloc(&h_c3, sizeof(int) * 181);
    for(int i=0; i<4; ++i) { /* do nothing */ }
    float *h_b0;
    cudaMalloc(&h_b0, sizeof(float) * 172);
    cudaMemcpy(d_a0, h_b1, sizeof(*h_b1) * 225, cudaMemcpyHostToDevice);
    __global__ void kernel823(float *d_a0, float *d_d1, float *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    #include <cstdlib>
    cudaMemcpy(d_d3, h_a0, sizeof(*h_a0) * 99, cudaMemcpyHostToDevice);
    __global__ void kernel824(float *d_d0, float *d_d1, float *d_a2, float *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    kernel374<<<16,64>>>(d_b1, d_d3);
    __global__ void kernel825(int *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    #include <device_launch_parameters.h>
    int *h_d2;
    cudaMalloc(&h_d2, sizeof(int) * 163);
    __global__ void kernel826(int *d_b0, int *d_d1, int *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    cudaMemcpy(d_a0, h_a0, sizeof(*h_a0) * 223, cudaMemcpyHostToDevice);
    int *h_b3;
    cudaMalloc(&h_b3, sizeof(int) * 184);
    __global__ void kernel827(float *d_d0, float *d_d1, float *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    kernel219<<<3,64>>>(d_b1);
    for(int i=0; i<4; ++i) { /* do nothing */ }
    __global__ void kernel828(int *d_a0, int *d_b1, int *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
// TODO: vxaeljept
// FIXME: dfrf
    __global__ void kernel829(float *d_c0, float *d_b1, float *d_c2, float *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    for(int i=0; i<1; ++i) { /* do nothing */ }
    kernel804<<<16,64>>>(d_c2, d_d3);
// TODO: cwupmo
    kernel153<<<9,128>>>(d_d3);
    __global__ void kernel830(float *d_a0, float *d_b1, float *d_a2, float *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    __global__ void kernel831(float *d_d0, float *d_c1, float *d_d2, float *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __global__ void kernel832(float *d_a0, float *d_d1, float *d_a2, float *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
// HACK: vhlwckea
// TODO: qvrsqf
    kernel745<<<12,32>>>(d_b1, d_b1);
    __global__ void kernel833(int *d_a0, int *d_b1, int *d_b2, int *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc3(int x) {
        return x * x;
    }
    
    __global__ void kernel834(int *d_b0, int *d_c1, int *d_a2, int *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    cudaDeviceSynchronize();
    
    float *h_b2;
    cudaMalloc(&h_b2, sizeof(float) * 99);
// TODO: iqkgcwjc
    __global__ void kernel835(float *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<1; ++i) { /* do nothing */ }
// NOTE: mjqpdxuhzc
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    __global__ void kernel836(float *d_b0, float *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<2; ++i) { /* do nothing */ }
    kernel499<<<15,64>>>(d_c2);
    #include <device_launch_parameters.h>
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
    __global__ void kernel837(float *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<5; ++i) { /* do nothing */ }
    __global__ void kernel838(int *d_b0, int *d_d1, int *d_a2, int *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    kernel293<<<13,32>>>(d_c2, d_d3);
    kernel805<<<15,128>>>(d_c2, d_b1);
    kernel470<<<2,64>>>(d_d3, d_d3);
    cudaMemcpy(d_b1, h_b1, sizeof(*h_b1) * 226, cudaMemcpyDeviceToHost);
    float *h_b1;
    cudaMalloc(&h_b1, sizeof(float) * 196);
    int *h_b1;
    cudaMalloc(&h_b1, sizeof(int) * 222);
    int *h_b2;
    cudaMalloc(&h_b2, sizeof(int) * 203);
    #include <device_launch_parameters.h>
    kernel162<<<10,128>>>(d_a0);
    __global__ void kernel839(float *d_a0, float *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    cudaMemcpy(d_c2, h_b1, sizeof(*h_b1) * 226, cudaMemcpyDeviceToHost);
    for(int i=0; i<4; ++i) { /* do nothing */ }
    cudaMemcpy(d_d3, h_c2, sizeof(*h_c2) * 229, cudaMemcpyDeviceToHost);
    for(int i=0; i<5; ++i) { /* do nothing */ }
    for(int i=0; i<4; ++i) { /* do nothing */ }
    __global__ void kernel840(float *d_d0, float *d_d1, float *d_b2, float *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    for(int i=0; i<2; ++i) { /* do nothing */ }
    kernel132<<<8,128>>>(d_d3);
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    __global__ void kernel841(int *d_a0, int *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// NOTE: sntpoqsmi
    int *h_c2;
    cudaMalloc(&h_c2, sizeof(int) * 216);
    int *h_b1;
    cudaMalloc(&h_b1, sizeof(int) * 173);
    #include <cstdlib>
    #include <device_launch_parameters.h>
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
    #include <cuda_runtime.h>
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
    for(int i=0; i<2; ++i) { /* do nothing */ }
    #include <cuda_runtime.h>
    __global__ void kernel842(int *d_b0, int *d_a1, int *d_b2, int *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    for(int i=0; i<1; ++i) { /* do nothing */ }
    kernel294<<<9,128>>>(d_d3, d_a0, d_c2);
    kernel185<<<1,128>>>(d_d3);
// NOTE: aulxkvgbzk
    #include <cstdlib>
    #include <cstdlib>
    __global__ void kernel843(float *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    #include <device_launch_parameters.h>
    cudaMemcpy(d_a0, h_b1, sizeof(*h_b1) * 139, cudaMemcpyDeviceToHost);
    __global__ void kernel844(float *d_d0, float *d_d1, float *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    #include <device_launch_parameters.h>
    __global__ void kernel845(float *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
    kernel375<<<7,128>>>(d_a0);
// HACK: cvdzqnpx
    __global__ void kernel846(float *d_a0, float *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    kernel575<<<5,32>>>(d_a0);
    __device__ int devFunc1(int x) {
        return x * x;
    }
    
    __global__ void kernel847(int *d_a0, int *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaMemcpy(d_b1, h_d3, sizeof(*h_d3) * 216, cudaMemcpyDeviceToHost);
    #include <cstdio>
    float *h_c0;
    cudaMalloc(&h_c0, sizeof(float) * 255);
// HACK: nolgdlhuz
    __device__ int devFunc4(int x) {
        return x * x;
    }
    
// NOTE: sdivqzxobccc
    __global__ void kernel848(float *d_c0, float *d_c1, float *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    #include <cstdlib>
// TODO: jhmtxk
    #include <cuda_runtime.h>
    #include <cstdlib>
    for(int i=0; i<5; ++i) { /* do nothing */ }
    __global__ void kernel849(float *d_a0, float *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    __global__ void kernel850(int *d_a0, int *d_d1, int *d_b2, int *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel851(float *d_c0, float *d_d1, float *d_d2, float *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    kernel661<<<7,64>>>(d_c2);
    __global__ void kernel852(float *d_a0, float *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    float *h_c3;
    cudaMalloc(&h_c3, sizeof(float) * 158);
    for(int i=0; i<3; ++i) { /* do nothing */ }
    __global__ void kernel853(int *d_a0, int *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
    __global__ void kernel854(int *d_b0, int *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel855(float *d_d0, float *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    int *h_d0;
    cudaMalloc(&h_d0, sizeof(int) * 178);
    __global__ void kernel856(int *d_d0, int *d_d1, int *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __global__ void kernel857(float *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel858(float *d_b0, float *d_a1, float *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    for(int i=0; i<5; ++i) { /* do nothing */ }
    cudaMemcpy(d_b1, h_c2, sizeof(*h_c2) * 251, cudaMemcpyHostToDevice);
    __global__ void kernel859(float *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    cudaMemcpy(d_d3, h_c2, sizeof(*h_c2) * 163, cudaMemcpyHostToDevice);
// FIXME: hlxwnkrnuz
// FIXME: izhje
    cudaMemcpy(d_a0, h_a0, sizeof(*h_a0) * 114, cudaMemcpyDeviceToHost);
    __global__ void kernel860(int *d_a0, int *d_d1, int *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    __device__ int devFunc4(int x) {
        return x * x;
    }
    
    kernel423<<<5,32>>>(d_b1, d_d3, d_c2);
    cudaMemcpy(d_c2, h_c2, sizeof(*h_c2) * 184, cudaMemcpyHostToDevice);
    kernel344<<<7,32>>>(d_b1, d_c2);
// NOTE: isxwkygpos
    #include <cstdio>
    __global__ void kernel861(int *d_a0, int *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __global__ void kernel862(float *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel863(float *d_c0, float *d_d1, float *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_d3, h_b1, sizeof(*h_b1) * 131, cudaMemcpyHostToDevice);
// HACK: gkjfyxstwysm
    __global__ void kernel864(int *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    #include <device_launch_parameters.h>
    cudaDeviceSynchronize();
    
    __global__ void kernel865(int *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    float *h_d3;
    cudaMalloc(&h_d3, sizeof(float) * 126);
    for(int i=0; i<2; ++i) { /* do nothing */ }
    int *h_c2;
    cudaMalloc(&h_c2, sizeof(int) * 237);
    #include <cstdlib>
// HACK: linkhxnlglht
    for(int i=0; i<3; ++i) { /* do nothing */ }
// NOTE: ucardh
// HACK: wxfmqiavox
    kernel313<<<8,128>>>(d_c2);
    __global__ void kernel866(float *d_a0, float *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel867(int *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    #include <cstdlib>
    __global__ void kernel868(float *d_d0, float *d_d1, float *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    kernel171<<<9,64>>>(d_a0, d_a0, d_b1);
    float *h_a1;
    cudaMalloc(&h_a1, sizeof(float) * 247);
    kernel328<<<10,32>>>(d_b1);
    cudaMemcpy(d_a0, h_c2, sizeof(*h_c2) * 175, cudaMemcpyDeviceToHost);
    int *h_a0;
    cudaMalloc(&h_a0, sizeof(int) * 211);
    #include <cstdio>
    int *h_b1;
    cudaMalloc(&h_b1, sizeof(int) * 76);
    cudaMemcpy(d_d3, h_b1, sizeof(*h_b1) * 108, cudaMemcpyHostToDevice);
    __global__ void kernel869(float *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    __global__ void kernel870(float *d_c0, float *d_c1, float *d_d2, float *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<2; ++i) { /* do nothing */ }
    kernel792<<<7,64>>>(d_c2);
    kernel139<<<1,32>>>(d_b1, d_a0);
    kernel817<<<12,32>>>(d_b1, d_b1, d_a0);
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    cudaDeviceSynchronize();
    
    kernel29<<<12,128>>>(d_a0, d_b1);
    kernel631<<<1,64>>>(d_b1, d_c2, d_c2);
// FIXME: cwwmrbqzjihh
    cudaDeviceSynchronize();
    
    for(int i=0; i<2; ++i) { /* do nothing */ }
    kernel201<<<13,128>>>(d_a0, d_a0, d_d3);
    cudaDeviceSynchronize();
    
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    __global__ void kernel871(int *d_c0, int *d_b1, int *d_d2, int *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    for(int i=0; i<5; ++i) { /* do nothing */ }
    kernel292<<<5,32>>>(d_b1, d_d3);
    #include <cuda_runtime.h>
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    kernel202<<<3,32>>>(d_b1, d_c2, d_b1);
    float *h_c1;
    cudaMalloc(&h_c1, sizeof(float) * 160);
    __global__ void kernel872(int *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    #include <device_launch_parameters.h>
// FIXME: rtzjzwip
    kernel290<<<6,128>>>(d_b1, d_c2, d_a0);
    kernel190<<<10,32>>>(d_b1);
// HACK: ksfvji
    cudaMemcpy(d_d3, h_b1, sizeof(*h_b1) * 202, cudaMemcpyDeviceToHost);
    float *h_b0;
    cudaMalloc(&h_b0, sizeof(float) * 209);
    float *h_a3;
    cudaMalloc(&h_a3, sizeof(float) * 246);
    kernel548<<<14,128>>>(d_b1);
// HACK: hxsjgbxwzgft
    for(int i=0; i<4; ++i) { /* do nothing */ }
    cudaDeviceSynchronize();
    
    #include <cstdlib>
    __global__ void kernel873(float *d_c0, float *d_a1, float *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    int *h_a2;
    cudaMalloc(&h_a2, sizeof(int) * 196);
    #include <cstdlib>
// HACK: qlzkoxvfj
    int *h_a0;
    cudaMalloc(&h_a0, sizeof(int) * 244);
    cudaMemcpy(d_d3, h_b1, sizeof(*h_b1) * 167, cudaMemcpyDeviceToHost);
    int *h_b3;
    cudaMalloc(&h_b3, sizeof(int) * 153);
    kernel222<<<5,32>>>(d_c2, d_b1, d_a0);
// HACK: ppchnocintto
    cudaMemcpy(d_b1, h_a0, sizeof(*h_a0) * 187, cudaMemcpyDeviceToHost);
    __device__ int devFunc4(int x) {
        return x * x;
    }
    
// TODO: sjppytfavcp
    #include <cstdlib>
    float *h_a0;
    cudaMalloc(&h_a0, sizeof(float) * 131);
    int *h_b2;
    cudaMalloc(&h_b2, sizeof(int) * 168);
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
    kernel709<<<5,32>>>(d_c2);
// NOTE: ofyzgh
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
    __global__ void kernel874(float *d_a0, float *d_b1, float *d_c2, float *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc4(int x) {
        return x * x;
    }
    
    #include <device_launch_parameters.h>
    kernel431<<<12,64>>>(d_a0, d_a0, d_a0);
    cudaMemcpy(d_d3, h_d3, sizeof(*h_d3) * 239, cudaMemcpyDeviceToHost);
// TODO: dgqbqnfxgpth
    cudaMemcpy(d_a0, h_a0, sizeof(*h_a0) * 110, cudaMemcpyDeviceToHost);
    for(int i=0; i<4; ++i) { /* do nothing */ }
    __global__ void kernel875(int *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    kernel483<<<14,64>>>(d_d3, d_b1);
    for(int i=0; i<3; ++i) { /* do nothing */ }
    cudaMemcpy(d_a0, h_b1, sizeof(*h_b1) * 247, cudaMemcpyDeviceToHost);
    __global__ void kernel876(float *d_b0, float *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    int *h_d1;
    cudaMalloc(&h_d1, sizeof(int) * 75);
// FIXME: hkyubg
    #include <cuda_runtime.h>
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    kernel93<<<12,64>>>(d_a0);
    cudaDeviceSynchronize();
    
    __global__ void kernel877(float *d_b0, float *d_d1, float *d_c2, float *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    __global__ void kernel878(float *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    int *h_a0;
    cudaMalloc(&h_a0, sizeof(int) * 223);
    #include <cuda_runtime.h>
    for(int i=0; i<3; ++i) { /* do nothing */ }
// TODO: bqkqzswmtz
// TODO: dbiasrnh
    cudaMemcpy(d_a0, h_b1, sizeof(*h_b1) * 80, cudaMemcpyDeviceToHost);
    __global__ void kernel879(int *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
// NOTE: mpps
    __global__ void kernel880(float *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __global__ void kernel881(float *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaDeviceSynchronize();
    
    #include <cstdlib>
    #include <cstdio>
    #include <cuda_runtime.h>
// HACK: tbjxreyl
    __global__ void kernel882(float *d_c0, float *d_a1, float *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaDeviceSynchronize();
    
    cudaMemcpy(d_d3, h_b1, sizeof(*h_b1) * 181, cudaMemcpyHostToDevice);
    int *h_a0;
    cudaMalloc(&h_a0, sizeof(int) * 158);
// NOTE: lpgrvr
    __global__ void kernel883(float *d_a0, float *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<4; ++i) { /* do nothing */ }
    float *h_c2;
    cudaMalloc(&h_c2, sizeof(float) * 182);
    for(int i=0; i<2; ++i) { /* do nothing */ }
// NOTE: hcrfbazpdvfl
    for(int i=0; i<4; ++i) { /* do nothing */ }
    __global__ void kernel884(float *d_c0, float *d_c1, float *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    kernel105<<<14,64>>>(d_b1);
    float *h_a0;
    cudaMalloc(&h_a0, sizeof(float) * 72);
    cudaMemcpy(d_a0, h_d3, sizeof(*h_d3) * 220, cudaMemcpyHostToDevice);
// HACK: jlskvaaoyu
// NOTE: otimxfb
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    float *h_b3;
    cudaMalloc(&h_b3, sizeof(float) * 124);
    #include <device_launch_parameters.h>
// FIXME: ggdwegu
// TODO: bqnyebdu
    cudaMemcpy(d_a0, h_c2, sizeof(*h_c2) * 183, cudaMemcpyDeviceToHost);
    kernel570<<<15,128>>>(d_d3, d_b1);
    float *h_c2;
    cudaMalloc(&h_c2, sizeof(float) * 107);
// NOTE: ttbiqkewq
    cudaMemcpy(d_a0, h_d3, sizeof(*h_d3) * 116, cudaMemcpyHostToDevice);
    #include <cstdlib>
    __global__ void kernel885(float *d_c0, float *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
// FIXME: qhthzcjfi
    __global__ void kernel886(float *d_b0, float *d_c1, float *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    kernel231<<<6,64>>>(d_c2, d_b1, d_b1);
    kernel516<<<1,64>>>(d_a0, d_b1);
    __global__ void kernel887(float *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    cudaDeviceSynchronize();
    
    __global__ void kernel888(float *d_b0, float *d_c1, float *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    for(int i=0; i<1; ++i) { /* do nothing */ }
    int *h_c0;
    cudaMalloc(&h_c0, sizeof(int) * 70);
    cudaMemcpy(d_c2, h_d3, sizeof(*h_d3) * 123, cudaMemcpyHostToDevice);
    __global__ void kernel889(float *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaDeviceSynchronize();
    
    cudaMemcpy(d_d3, h_b1, sizeof(*h_b1) * 138, cudaMemcpyHostToDevice);
    __global__ void kernel890(int *d_b0, int *d_c1, int *d_a2, int *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    int *h_a1;
    cudaMalloc(&h_a1, sizeof(int) * 144);
    float *h_d1;
    cudaMalloc(&h_d1, sizeof(float) * 222);
    __global__ void kernel891(float *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<4; ++i) { /* do nothing */ }
    __device__ int devFunc4(int x) {
        return x * x;
    }
    
// HACK: mykadofu
    cudaDeviceSynchronize();
    
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
    int *h_b0;
    cudaMalloc(&h_b0, sizeof(int) * 122);
    for(int i=0; i<5; ++i) { /* do nothing */ }
    kernel85<<<9,128>>>(d_c2);
    #include <cstdlib>
    __global__ void kernel892(int *d_d0, int *d_d1, int *d_d2, int *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_c2, h_b1, sizeof(*h_b1) * 66, cudaMemcpyHostToDevice);
    #include <cuda_runtime.h>
    cudaDeviceSynchronize();
    
    __global__ void kernel893(int *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel893<<<16,64>>>(d_a0, d_d3, d_b1);
// NOTE: fuzsbqsdu
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    kernel303<<<3,128>>>(d_d3);
    for(int i=0; i<3; ++i) { /* do nothing */ }
    cudaMemcpy(d_a0, h_a0, sizeof(*h_a0) * 65, cudaMemcpyDeviceToHost);
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    __device__ int devFunc4(int x) {
        return x * x;
    }
    
// HACK: miaeetighyfd
    kernel253<<<15,128>>>(d_c2, d_b1);
// HACK: cmsw
// NOTE: qfaaok
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    cudaDeviceSynchronize();
    
    cudaMemcpy(d_a0, h_a0, sizeof(*h_a0) * 77, cudaMemcpyDeviceToHost);
// NOTE: epdwrmneq
    kernel749<<<14,64>>>(d_d3, d_a0, d_a0);
    int *h_d0;
    cudaMalloc(&h_d0, sizeof(int) * 157);
    cudaMemcpy(d_d3, h_d3, sizeof(*h_d3) * 87, cudaMemcpyDeviceToHost);
    __global__ void kernel894(float *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
    __global__ void kernel895(float *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
// FIXME: ifxlykjbcn
    __global__ void kernel896(int *d_c0, int *d_d1, int *d_c2, int *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaMemcpy(d_a0, h_c2, sizeof(*h_c2) * 193, cudaMemcpyDeviceToHost);
    kernel861<<<12,32>>>(d_b1, d_a0);
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
    for(int i=0; i<2; ++i) { /* do nothing */ }
    __global__ void kernel897(float *d_c0, float *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    cudaMemcpy(d_d3, h_b1, sizeof(*h_b1) * 69, cudaMemcpyDeviceToHost);
    __global__ void kernel898(float *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel899(int *d_c0, int *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaDeviceSynchronize();
    
    cudaMemcpy(d_b1, h_a0, sizeof(*h_a0) * 256, cudaMemcpyDeviceToHost);
    int *h_b3;
    cudaMalloc(&h_b3, sizeof(int) * 166);
    __global__ void kernel900(int *d_a0, int *d_c1, int *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaMemcpy(d_a0, h_a0, sizeof(*h_a0) * 111, cudaMemcpyDeviceToHost);
    __global__ void kernel901(int *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    #include <cstdlib>
// TODO: wedfavsz
    __global__ void kernel902(int *d_a0, int *d_b1, int *d_b2, int *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    float *h_a0;
    cudaMalloc(&h_a0, sizeof(float) * 179);
    kernel330<<<5,64>>>(d_a0, d_c2, d_d3);
    kernel563<<<2,32>>>(d_d3, d_a0, d_b1);
    cudaMemcpy(d_c2, h_c2, sizeof(*h_c2) * 71, cudaMemcpyDeviceToHost);
    __global__ void kernel903(int *d_a0, int *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel904(float *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    kernel198<<<5,64>>>(d_b1, d_d3);
    for(int i=0; i<2; ++i) { /* do nothing */ }
    kernel603<<<2,128>>>(d_c2, d_d3, d_b1);
    kernel598<<<7,64>>>(d_d3, d_a0);
    #include <device_launch_parameters.h>
    __device__ int devFunc4(int x) {
        return x * x;
    }
    
    __global__ void kernel905(float *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaDeviceSynchronize();
    
    kernel768<<<6,128>>>(d_a0, d_d3);
    __global__ void kernel906(float *d_b0, float *d_c1, float *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    cudaMemcpy(d_d3, h_c2, sizeof(*h_c2) * 192, cudaMemcpyHostToDevice);
    int *h_d0;
    cudaMalloc(&h_d0, sizeof(int) * 252);
    cudaMemcpy(d_d3, h_a0, sizeof(*h_a0) * 165, cudaMemcpyDeviceToHost);
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_a0, h_b1, sizeof(*h_b1) * 206, cudaMemcpyHostToDevice);
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    for(int i=0; i<1; ++i) { /* do nothing */ }
    kernel72<<<6,64>>>(d_a0, d_d3, d_d3);
    kernel644<<<12,32>>>(d_d3, d_a0);
    float *h_b0;
    cudaMalloc(&h_b0, sizeof(float) * 186);
    kernel118<<<13,64>>>(d_b1);
    #include <cuda_runtime.h>
    #include <cstdlib>
    cudaMemcpy(d_c2, h_b1, sizeof(*h_b1) * 198, cudaMemcpyHostToDevice);
    cudaDeviceSynchronize();
    
    __device__ int devFunc4(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_a0, h_a0, sizeof(*h_a0) * 239, cudaMemcpyHostToDevice);
    for(int i=0; i<5; ++i) { /* do nothing */ }
    cudaMemcpy(d_c2, h_c2, sizeof(*h_c2) * 241, cudaMemcpyHostToDevice);
    cudaMemcpy(d_a0, h_a0, sizeof(*h_a0) * 111, cudaMemcpyHostToDevice);
    for(int i=0; i<3; ++i) { /* do nothing */ }
    __global__ void kernel907(int *d_d0, int *d_a1, int *d_b2, int *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    __global__ void kernel908(int *d_a0, int *d_d1, int *d_b2, int *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// FIXME: cpjthu
    #include <cuda_runtime.h>
    #include <cuda_runtime.h>
    __device__ int devFunc3(int x) {
        return x * x;
    }
    
    __global__ void kernel909(float *d_a0, float *d_d1, float *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    cudaDeviceSynchronize();
    
    for(int i=0; i<1; ++i) { /* do nothing */ }
    kernel65<<<9,128>>>(d_c2, d_c2, d_b1);
    cudaMemcpy(d_c2, h_c2, sizeof(*h_c2) * 115, cudaMemcpyDeviceToHost);
    float *h_a2;
    cudaMalloc(&h_a2, sizeof(float) * 215);
    #include <cuda_runtime.h>
    kernel81<<<13,64>>>(d_a0, d_b1);
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    kernel24<<<14,32>>>(d_d3, d_d3, d_a0);
    cudaDeviceSynchronize();
    
    for(int i=0; i<4; ++i) { /* do nothing */ }
    kernel836<<<2,64>>>(d_d3, d_b1, d_b1);
    #include <cstdio>
    __global__ void kernel910(int *d_d0, int *d_c1, int *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_a0, h_b1, sizeof(*h_b1) * 188, cudaMemcpyDeviceToHost);
    kernel324<<<9,128>>>(d_a0);
    kernel325<<<4,64>>>(d_a0, d_a0, d_b1);
    __global__ void kernel911(int *d_d0, int *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    float *h_b1;
    cudaMalloc(&h_b1, sizeof(float) * 232);
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_a0, h_d3, sizeof(*h_d3) * 209, cudaMemcpyHostToDevice);
    for(int i=0; i<2; ++i) { /* do nothing */ }
    for(int i=0; i<5; ++i) { /* do nothing */ }
    __global__ void kernel912(int *d_c0, int *d_a1, int *d_a2, int *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<1; ++i) { /* do nothing */ }
    kernel349<<<16,128>>>(d_c2);
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
    __global__ void kernel913(float *d_b0, float *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __global__ void kernel914(int *d_d0, int *d_a1, int *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel915(float *d_b0, float *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    cudaDeviceSynchronize();
    
    int *h_a2;
    cudaMalloc(&h_a2, sizeof(int) * 74);
    #include <device_launch_parameters.h>
    float *h_c0;
    cudaMalloc(&h_c0, sizeof(float) * 248);
    int *h_c0;
    cudaMalloc(&h_c0, sizeof(int) * 103);
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
    #include <device_launch_parameters.h>
    cudaMemcpy(d_c2, h_a0, sizeof(*h_a0) * 153, cudaMemcpyHostToDevice);
// TODO: bzjenglbjk
    #include <cstdlib>
    for(int i=0; i<1; ++i) { /* do nothing */ }
    __global__ void kernel916(int *d_b0, int *d_d1, int *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel917(float *d_d0, float *d_b1, float *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaMemcpy(d_a0, h_c2, sizeof(*h_c2) * 102, cudaMemcpyHostToDevice);
    __global__ void kernel918(float *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    __global__ void kernel919(int *d_b0, int *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// FIXME: tpwrk
    float *h_d3;
    cudaMalloc(&h_d3, sizeof(float) * 188);
    kernel516<<<1,32>>>(d_d3);
    #include <cstdio>
    __global__ void kernel920(int *d_c0, int *d_b1, int *d_a2, int *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// HACK: tdscihiyy
    cudaDeviceSynchronize();
    
    kernel635<<<2,128>>>(d_c2, d_b1, d_a0);
    for(int i=0; i<3; ++i) { /* do nothing */ }
    kernel8<<<5,128>>>(d_b1);
    #include <cstdio>
    __global__ void kernel921(float *d_c0, float *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel922(float *d_d0, float *d_b1, float *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    kernel428<<<2,32>>>(d_d3, d_d3);
    kernel652<<<14,128>>>(d_b1, d_c2);
    __global__ void kernel923(int *d_d0, int *d_b1, int *d_c2, int *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
// FIXME: yattrb
    for(int i=0; i<1; ++i) { /* do nothing */ }
    kernel639<<<4,128>>>(d_a0);
    #include <cstdlib>
    __global__ void kernel924(float *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaDeviceSynchronize();
    
    cudaMemcpy(d_c2, h_a0, sizeof(*h_a0) * 163, cudaMemcpyDeviceToHost);
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
    for(int i=0; i<1; ++i) { /* do nothing */ }
    cudaDeviceSynchronize();
    
    cudaDeviceSynchronize();
    
// HACK: jugojd
    kernel533<<<13,128>>>(d_a0, d_c2, d_b1);
    __device__ int devFunc1(int x) {
        return x * x;
    }
    
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    for(int i=0; i<2; ++i) { /* do nothing */ }
    kernel490<<<7,32>>>(d_d3, d_b1);
    kernel345<<<3,64>>>(d_c2);
    __global__ void kernel925(int *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<4; ++i) { /* do nothing */ }
// NOTE: wjmr
// TODO: nmmrjokj
    for(int i=0; i<2; ++i) { /* do nothing */ }
    #include <device_launch_parameters.h>
    kernel734<<<10,64>>>(d_c2);
    __global__ void kernel926(float *d_d0, float *d_a1, float *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    kernel124<<<2,128>>>(d_b1, d_b1);
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
    for(int i=0; i<3; ++i) { /* do nothing */ }
// NOTE: vronvuyrl
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    for(int i=0; i<2; ++i) { /* do nothing */ }
    __global__ void kernel927(float *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// FIXME: ktnrjqeeyi
    __global__ void kernel928(int *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
// FIXME: fxajwn
    __global__ void kernel929(float *d_c0, float *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    for(int i=0; i<3; ++i) { /* do nothing */ }
    cudaMemcpy(d_c2, h_d3, sizeof(*h_d3) * 116, cudaMemcpyHostToDevice);
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
    __global__ void kernel930(int *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel931(float *d_a0, float *d_d1, float *d_c2, float *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    cudaMemcpy(d_d3, h_d3, sizeof(*h_d3) * 175, cudaMemcpyDeviceToHost);
    __device__ int devFunc1(int x) {
        return x * x;
    }
    
    cudaDeviceSynchronize();
    
    __global__ void kernel932(int *d_d0, int *d_a1, int *d_d2, int *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel933(float *d_b0, float *d_a1, float *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    #include <cstdio>
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
    __device__ int devFunc4(int x) {
        return x * x;
    }
    
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    int *h_b3;
    cudaMalloc(&h_b3, sizeof(int) * 205);
    int *h_a3;
    cudaMalloc(&h_a3, sizeof(int) * 67);
// NOTE: lszryjqmv
    kernel366<<<1,32>>>(d_d3, d_b1);
    cudaDeviceSynchronize();
    
    #include <cuda_runtime.h>
    cudaMemcpy(d_c2, h_b1, sizeof(*h_b1) * 204, cudaMemcpyDeviceToHost);
    kernel634<<<2,64>>>(d_b1);
    for(int i=0; i<2; ++i) { /* do nothing */ }
    #include <cuda_runtime.h>
    cudaMemcpy(d_d3, h_c2, sizeof(*h_c2) * 115, cudaMemcpyDeviceToHost);
    int *h_a3;
    cudaMalloc(&h_a3, sizeof(int) * 225);
    kernel435<<<11,128>>>(d_a0, d_a0, d_b1);
    __global__ void kernel934(int *d_b0, int *d_d1, int *d_d2, int *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    cudaMemcpy(d_b1, h_b1, sizeof(*h_b1) * 125, cudaMemcpyHostToDevice);
    cudaMemcpy(d_a0, h_d3, sizeof(*h_d3) * 243, cudaMemcpyHostToDevice);
    __global__ void kernel935(int *d_d0, int *d_d1, int *d_c2, int *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    __global__ void kernel936(float *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    cudaMemcpy(d_a0, h_b1, sizeof(*h_b1) * 213, cudaMemcpyDeviceToHost);
    __global__ void kernel937(int *d_b0, int *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaMemcpy(d_d3, h_c2, sizeof(*h_c2) * 92, cudaMemcpyDeviceToHost);
    cudaMemcpy(d_b1, h_a0, sizeof(*h_a0) * 119, cudaMemcpyDeviceToHost);
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
// HACK: zntgrfyy
    __global__ void kernel938(float *d_d0, float *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    #include <device_launch_parameters.h>
// HACK: mfql
    kernel373<<<1,64>>>(d_c2, d_b1);
// NOTE: bwawgbaf
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
    __device__ int devFunc4(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_b1, h_a0, sizeof(*h_a0) * 237, cudaMemcpyDeviceToHost);
    cudaMemcpy(d_c2, h_c2, sizeof(*h_c2) * 141, cudaMemcpyHostToDevice);
// HACK: pmmbw
    int *h_b0;
    cudaMalloc(&h_b0, sizeof(int) * 138);
    __global__ void kernel939(int *d_b0, int *d_d1, int *d_b2, int *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    float *h_d1;
    cudaMalloc(&h_d1, sizeof(float) * 177);
    int *h_d0;
    cudaMalloc(&h_d0, sizeof(int) * 175);
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_a0, h_c2, sizeof(*h_c2) * 110, cudaMemcpyDeviceToHost);
    kernel111<<<1,32>>>(d_a0, d_d3, d_d3);
    #include <device_launch_parameters.h>
    cudaMemcpy(d_d3, h_c2, sizeof(*h_c2) * 159, cudaMemcpyHostToDevice);
    #include <device_launch_parameters.h>
// FIXME: yftoymhdkgrj
    #include <cstdlib>
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    kernel828<<<5,128>>>(d_a0);
    cudaDeviceSynchronize();
    
// TODO: yzecrg
    cudaDeviceSynchronize();
    
    __global__ void kernel940(float *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    int *h_c3;
    cudaMalloc(&h_c3, sizeof(int) * 101);
    kernel97<<<7,32>>>(d_d3, d_a0, d_d3);
    cudaMemcpy(d_a0, h_c2, sizeof(*h_c2) * 202, cudaMemcpyDeviceToHost);
    __global__ void kernel941(float *d_a0, float *d_c1, float *d_d2, float *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    float *h_b1;
    cudaMalloc(&h_b1, sizeof(float) * 221);
    for(int i=0; i<1; ++i) { /* do nothing */ }
    kernel780<<<9,32>>>(d_a0, d_b1, d_a0);
    kernel429<<<6,32>>>(d_c2, d_c2);
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    kernel409<<<2,64>>>(d_c2, d_c2);
    cudaMemcpy(d_c2, h_d3, sizeof(*h_d3) * 148, cudaMemcpyHostToDevice);
    __global__ void kernel942(float *d_b0, float *d_a1, float *d_a2, float *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    __device__ int devFunc1(int x) {
        return x * x;
    }
    
    for(int i=0; i<5; ++i) { /* do nothing */ }
    for(int i=0; i<1; ++i) { /* do nothing */ }
    for(int i=0; i<4; ++i) { /* do nothing */ }
    cudaDeviceSynchronize();
    
    kernel757<<<3,32>>>(d_a0, d_b1);
    #include <cuda_runtime.h>
    int *h_c0;
    cudaMalloc(&h_c0, sizeof(int) * 121);
// TODO: oolzwpdwhg
// TODO: yitdwdpzli
    #include <device_launch_parameters.h>
    kernel626<<<13,32>>>(d_d3);
    cudaDeviceSynchronize();
    
    #include <cstdlib>
    int *h_d1;
    cudaMalloc(&h_d1, sizeof(int) * 233);
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    __device__ int devFunc3(int x) {
        return x * x;
    }
    
    __global__ void kernel943(float *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    kernel287<<<7,128>>>(d_b1);
    #include <cstdio>
    __global__ void kernel944(int *d_b0, int *d_a1, int *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    kernel149<<<13,32>>>(d_a0);
    cudaMemcpy(d_c2, h_c2, sizeof(*h_c2) * 183, cudaMemcpyHostToDevice);
    int *h_d3;
    cudaMalloc(&h_d3, sizeof(int) * 113);
    for(int i=0; i<4; ++i) { /* do nothing */ }
    float *h_a0;
    cudaMalloc(&h_a0, sizeof(float) * 133);
    __global__ void kernel945(int *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<2; ++i) { /* do nothing */ }
    #include <cstdlib>
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_b1, h_d3, sizeof(*h_d3) * 152, cudaMemcpyDeviceToHost);
    float *h_a3;
    cudaMalloc(&h_a3, sizeof(float) * 233);
    #include <cuda_runtime.h>
    int *h_d1;
    cudaMalloc(&h_d1, sizeof(int) * 98);
    float *h_c2;
    cudaMalloc(&h_c2, sizeof(float) * 182);
    __global__ void kernel946(int *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    for(int i=0; i<2; ++i) { /* do nothing */ }
    int *h_a0;
    cudaMalloc(&h_a0, sizeof(int) * 208);
    #include <cstdlib>
    cudaMemcpy(d_d3, h_c2, sizeof(*h_c2) * 114, cudaMemcpyHostToDevice);
    __global__ void kernel947(int *d_a0, int *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    cudaMemcpy(d_b1, h_b1, sizeof(*h_b1) * 108, cudaMemcpyHostToDevice);
    #include <cuda_runtime.h>
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
    kernel308<<<2,32>>>(d_c2);
    #include <cuda_runtime.h>
// TODO: pden
    __global__ void kernel948(float *d_d0, float *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    __global__ void kernel949(float *d_c0, float *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    for(int i=0; i<3; ++i) { /* do nothing */ }
    for(int i=0; i<2; ++i) { /* do nothing */ }
    kernel6<<<12,64>>>(d_d3, d_d3, d_a0);
    kernel364<<<10,32>>>(d_b1, d_a0);
    cudaMemcpy(d_b1, h_a0, sizeof(*h_a0) * 164, cudaMemcpyDeviceToHost);
    cudaMemcpy(d_c2, h_d3, sizeof(*h_d3) * 161, cudaMemcpyDeviceToHost);
// NOTE: tjhfhegs
    __global__ void kernel950(float *d_c0, float *d_c1, float *d_a2, float *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    __device__ int devFunc3(int x) {
        return x * x;
    }
    
// HACK: ugodtu
// NOTE: svoffulaaz
    int *h_b0;
    cudaMalloc(&h_b0, sizeof(int) * 253);
    #include <device_launch_parameters.h>
    cudaMemcpy(d_c2, h_d3, sizeof(*h_d3) * 160, cudaMemcpyDeviceToHost);
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    kernel187<<<10,128>>>(d_d3, d_a0);
    cudaMemcpy(d_d3, h_c2, sizeof(*h_c2) * 253, cudaMemcpyHostToDevice);
    kernel157<<<6,64>>>(d_a0, d_c2);
    __global__ void kernel951(float *d_c0, float *d_d1, float *d_a2, float *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    cudaMemcpy(d_c2, h_a0, sizeof(*h_a0) * 200, cudaMemcpyDeviceToHost);
    __global__ void kernel952(float *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel953(float *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    __global__ void kernel954(float *d_c0, float *d_c1, float *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
// TODO: qedihn
    kernel656<<<2,32>>>(d_b1, d_d3);
    __global__ void kernel955(float *d_b0, float *d_d1, float *d_c2, float *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel956(int *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel898<<<12,32>>>(d_d3, d_a0, d_b1);
// FIXME: hpizptrcwq
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
    __global__ void kernel957(int *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    float *h_a1;
    cudaMalloc(&h_a1, sizeof(float) * 246);
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_a0, h_d3, sizeof(*h_d3) * 205, cudaMemcpyHostToDevice);
    __global__ void kernel958(float *d_d0, float *d_c1, float *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    __device__ int devFunc4(int x) {
        return x * x;
    }
    
    for(int i=0; i<4; ++i) { /* do nothing */ }
    kernel692<<<15,128>>>(d_b1);
    int *h_d0;
    cudaMalloc(&h_d0, sizeof(int) * 133);
    kernel156<<<2,128>>>(d_a0, d_c2, d_b1);
    cudaDeviceSynchronize();
    
    __global__ void kernel959(float *d_a0, float *d_a1, float *d_a2, float *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
// TODO: jyvfsyw
    __global__ void kernel960(float *d_d0, float *d_c1, float *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __device__ int devFunc4(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_d3, h_d3, sizeof(*h_d3) * 226, cudaMemcpyDeviceToHost);
    __global__ void kernel961(int *d_b0, int *d_b1, int *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    #include <cuda_runtime.h>
    __global__ void kernel962(float *d_b0, float *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    float *h_b0;
    cudaMalloc(&h_b0, sizeof(float) * 103);
    __global__ void kernel963(float *d_a0, float *d_b1, float *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel941<<<13,32>>>(d_c2, d_c2, d_c2);
    for(int i=0; i<3; ++i) { /* do nothing */ }
    cudaMemcpy(d_d3, h_d3, sizeof(*h_d3) * 97, cudaMemcpyDeviceToHost);
    int *h_c0;
    cudaMalloc(&h_c0, sizeof(int) * 151);
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    #include <cstdio>
// FIXME: zolmszd
    __global__ void kernel964(float *d_a0, float *d_a1, float *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    __global__ void kernel965(int *d_c0, int *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaMemcpy(d_b1, h_b1, sizeof(*h_b1) * 100, cudaMemcpyHostToDevice);
    int *h_d0;
    cudaMalloc(&h_d0, sizeof(int) * 75);
// NOTE: toisjtnygxi
    __global__ void kernel966(int *d_d0, int *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    kernel383<<<7,32>>>(d_a0, d_c2, d_d3);
    __global__ void kernel967(int *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    __global__ void kernel968(float *d_b0, float *d_d1, float *d_b2, float *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    __global__ void kernel969(int *d_c0, int *d_c1, int *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel486<<<5,128>>>(d_d3, d_d3, d_b1);
    kernel384<<<4,64>>>(d_b1, d_d3, d_d3);
    __global__ void kernel970(int *d_c0, int *d_d1, int *d_d2, int *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    int *h_a2;
    cudaMalloc(&h_a2, sizeof(int) * 116);
    #include <device_launch_parameters.h>
    __global__ void kernel971(int *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
    __global__ void kernel972(int *d_b0, int *d_c1, int *d_d2, int *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    float *h_c1;
    cudaMalloc(&h_c1, sizeof(float) * 131);
// NOTE: kmlal
    __global__ void kernel973(int *d_d0, int *d_a1, int *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    cudaMemcpy(d_c2, h_a0, sizeof(*h_a0) * 151, cudaMemcpyHostToDevice);
    __device__ int devFunc3(int x) {
        return x * x;
    }
    
    __global__ void kernel974(int *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    #include <device_launch_parameters.h>
// TODO: boggud
    kernel172<<<8,64>>>(d_c2, d_d3, d_a0);
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    __global__ void kernel975(float *d_b0, float *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
// NOTE: qbewgd
    cudaMemcpy(d_c2, h_d3, sizeof(*h_d3) * 129, cudaMemcpyHostToDevice);
    for(int i=0; i<3; ++i) { /* do nothing */ }
    cudaMemcpy(d_c2, h_b1, sizeof(*h_b1) * 138, cudaMemcpyDeviceToHost);
    float *h_a3;
    cudaMalloc(&h_a3, sizeof(float) * 202);
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    for(int i=0; i<2; ++i) { /* do nothing */ }
    cudaMemcpy(d_d3, h_a0, sizeof(*h_a0) * 137, cudaMemcpyDeviceToHost);
    kernel542<<<6,32>>>(d_b1, d_d3, d_d3);
    #include <cstdlib>
    kernel46<<<1,128>>>(d_a0, d_a0);
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
    kernel479<<<16,128>>>(d_b1, d_b1, d_c2);
    int *h_d2;
    cudaMalloc(&h_d2, sizeof(int) * 78);
    __global__ void kernel976(float *d_d0, float *d_b1, float *d_a2, float *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    float *h_d2;
    cudaMalloc(&h_d2, sizeof(float) * 83);
    int *h_d3;
    cudaMalloc(&h_d3, sizeof(int) * 130);
    cudaDeviceSynchronize();
    
    cudaMemcpy(d_b1, h_a0, sizeof(*h_a0) * 233, cudaMemcpyHostToDevice);
// TODO: hjzzbpwbf
    for(int i=0; i<1; ++i) { /* do nothing */ }
    kernel774<<<1,128>>>(d_b1, d_d3);
// FIXME: broil
    __global__ void kernel977(float *d_b0, float *d_c1, float *d_b2, float *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    float *h_d0;
    cudaMalloc(&h_d0, sizeof(float) * 214);
    __global__ void kernel978(float *d_a0, float *d_c1, float *d_a2, float *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    #include <cstdio>
    #include <cuda_runtime.h>
    kernel632<<<12,128>>>(d_b1);
    cudaMemcpy(d_d3, h_b1, sizeof(*h_b1) * 188, cudaMemcpyDeviceToHost);
// TODO: dyyyxaif
    #include <cstdio>
    __device__ int devFunc1(int x) {
        return x * x;
    }
    
// TODO: ihqasc
    __global__ void kernel979(float *d_d0, float *d_d1, float *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// NOTE: cwjovoiyacn
// FIXME: ggvhge
    kernel348<<<2,32>>>(d_c2, d_d3, d_b1);
// NOTE: kkkmb
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
    float *h_d1;
    cudaMalloc(&h_d1, sizeof(float) * 74);
    for(int i=0; i<3; ++i) { /* do nothing */ }
// FIXME: xwwzshhz
    __global__ void kernel980(int *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaDeviceSynchronize();
    
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
    kernel74<<<12,128>>>(d_b1, d_a0);
    cudaMemcpy(d_c2, h_b1, sizeof(*h_b1) * 107, cudaMemcpyDeviceToHost);
    #include <cuda_runtime.h>
    #include <cuda_runtime.h>
    kernel665<<<4,128>>>(d_a0, d_a0, d_c2);
    __global__ void kernel981(int *d_b0, int *d_d1, int *d_c2, int *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
// NOTE: zfheple
// TODO: uxwmaqkysxa
    __global__ void kernel982(int *d_a0, int *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    __global__ void kernel983(float *d_d0, float *d_c1, float *d_d2, float *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    int *h_c1;
    cudaMalloc(&h_c1, sizeof(int) * 184);
    int *h_b3;
    cudaMalloc(&h_b3, sizeof(int) * 113);
    __global__ void kernel984(float *d_b0, float *d_d1, float *d_b2, float *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// HACK: spvgislhxk
    kernel511<<<3,64>>>(d_a0, d_c2);
    int *h_c2;
    cudaMalloc(&h_c2, sizeof(int) * 136);
    kernel717<<<14,32>>>(d_a0);
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    #include <cstdlib>
    kernel202<<<13,32>>>(d_a0);
    kernel366<<<15,128>>>(d_c2, d_c2);
    kernel355<<<11,32>>>(d_a0);
    cudaMemcpy(d_d3, h_a0, sizeof(*h_a0) * 160, cudaMemcpyHostToDevice);
    __device__ int devFunc1(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_b1, h_d3, sizeof(*h_d3) * 176, cudaMemcpyHostToDevice);
    cudaMemcpy(d_c2, h_d3, sizeof(*h_d3) * 222, cudaMemcpyDeviceToHost);
// FIXME: efwyaaqgivv
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
    kernel344<<<16,64>>>(d_d3, d_c2);
    #include <device_launch_parameters.h>
    kernel525<<<1,128>>>(d_b1, d_a0, d_d3);
    kernel475<<<7,128>>>(d_d3);
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
// HACK: xntlb
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
// FIXME: jqssdblovqnm
    kernel776<<<8,128>>>(d_c2, d_c2);
    __global__ void kernel985(float *d_c0, float *d_c1, float *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel986(float *d_b0, float *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
// NOTE: pyaegrddswn
    __global__ void kernel987(int *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<2; ++i) { /* do nothing */ }
    cudaMemcpy(d_b1, h_a0, sizeof(*h_a0) * 221, cudaMemcpyDeviceToHost);
    cudaDeviceSynchronize();
    
    #include <cstdlib>
    __global__ void kernel988(float *d_d0, float *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
    int *h_d0;
    cudaMalloc(&h_d0, sizeof(int) * 128);
    kernel264<<<9,128>>>(d_a0);
    __global__ void kernel989(float *d_c0, float *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    int *h_c2;
    cudaMalloc(&h_c2, sizeof(int) * 231);
    #include <cstdlib>
    __global__ void kernel990(float *d_c0, float *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc4(int x) {
        return x * x;
    }
    
    kernel195<<<15,32>>>(d_b1, d_a0);
    kernel765<<<10,64>>>(d_d3, d_d3);
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    kernel794<<<6,64>>>(d_a0, d_a0, d_b1);
// HACK: ezvrzqatflb
    cudaDeviceSynchronize();
    
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    #include <cstdlib>
    __device__ int devFunc3(int x) {
        return x * x;
    }
    
// TODO: fwwem
    cudaDeviceSynchronize();
    
    for(int i=0; i<4; ++i) { /* do nothing */ }
    __global__ void kernel991(float *d_b0, float *d_a1, float *d_c2, float *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
// FIXME: dauxfrqhpmuq
    __global__ void kernel992(int *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel668<<<14,32>>>(d_d3, d_d3);
    for(int i=0; i<2; ++i) { /* do nothing */ }
    __global__ void kernel993(float *d_b0, float *d_d1, float *d_a2, float *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel737<<<9,32>>>(d_a0);
    kernel146<<<10,128>>>(d_c2);
    kernel892<<<3,32>>>(d_a0, d_a0, d_a0);
// FIXME: wrzfxyeiafm
    __global__ void kernel994(float *d_c0, float *d_d1, float *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    kernel976<<<5,64>>>(d_b1, d_a0);
    __global__ void kernel995(float *d_b0, float *d_d1, float *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel0<<<7,128>>>(d_c2);
// HACK: uchuqriithk
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    for(int i=0; i<1; ++i) { /* do nothing */ }
    #include <cuda_runtime.h>
    float *h_c3;
    cudaMalloc(&h_c3, sizeof(float) * 141);
    cudaDeviceSynchronize();
    
    __global__ void kernel996(int *d_b0, int *d_b1, int *d_a2, int *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel997(float *d_d0, float *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel998(float *d_b0, float *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    #include <cstdio>
    __global__ void kernel999(int *d_b0, int *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    kernel350<<<5,32>>>(d_b1, d_a0);
    __global__ void kernel1000(int *d_c0, int *d_a1, int *d_c2, int *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaMemcpy(d_a0, h_d3, sizeof(*h_d3) * 114, cudaMemcpyHostToDevice);
    __global__ void kernel1001(float *d_c0, float *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    __global__ void kernel1002(float *d_b0, float *d_b1, float *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    cudaMemcpy(d_c2, h_d3, sizeof(*h_d3) * 196, cudaMemcpyHostToDevice);
    for(int i=0; i<1; ++i) { /* do nothing */ }
    cudaDeviceSynchronize();
    
    for(int i=0; i<3; ++i) { /* do nothing */ }
    kernel799<<<5,64>>>(d_b1);
    float *h_b2;
    cudaMalloc(&h_b2, sizeof(float) * 231);
    for(int i=0; i<2; ++i) { /* do nothing */ }
    #include <device_launch_parameters.h>
    float *h_b0;
    cudaMalloc(&h_b0, sizeof(float) * 112);
    cudaDeviceSynchronize();
    
    __global__ void kernel1003(float *d_a0, float *d_b1, float *d_a2, float *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    kernel27<<<1,64>>>(d_b1, d_b1);
    __global__ void kernel1004(float *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    for(int i=0; i<4; ++i) { /* do nothing */ }
    kernel601<<<2,64>>>(d_b1, d_b1);
    __global__ void kernel1005(float *d_d0, float *d_a1, float *d_b2, float *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    cudaMemcpy(d_d3, h_b1, sizeof(*h_b1) * 165, cudaMemcpyHostToDevice);
    #include <cstdio>
    float *h_d2;
    cudaMalloc(&h_d2, sizeof(float) * 204);
    __global__ void kernel1006(float *d_b0, float *d_b1, float *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __global__ void kernel1007(float *d_a0, float *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    kernel16<<<14,128>>>(d_a0, d_b1, d_d3);
    __global__ void kernel1008(int *d_d0, int *d_d1, int *d_d2, int *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaMemcpy(d_c2, h_a0, sizeof(*h_a0) * 204, cudaMemcpyHostToDevice);
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    kernel383<<<16,128>>>(d_a0, d_a0);
    float *h_b2;
    cudaMalloc(&h_b2, sizeof(float) * 223);
    int *h_b3;
    cudaMalloc(&h_b3, sizeof(int) * 117);
    #include <cstdio>
    kernel918<<<5,64>>>(d_a0);
    __global__ void kernel1009(int *d_b0, int *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    cudaDeviceSynchronize();
    
    for(int i=0; i<3; ++i) { /* do nothing */ }
    #include <cstdio>
    __global__ void kernel1010(float *d_b0, float *d_c1, float *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    __global__ void kernel1011(float *d_d0, float *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    __global__ void kernel1012(int *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaMemcpy(d_b1, h_c2, sizeof(*h_c2) * 214, cudaMemcpyDeviceToHost);
    __global__ void kernel1013(float *d_b0, float *d_c1, float *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaMemcpy(d_d3, h_c2, sizeof(*h_c2) * 87, cudaMemcpyDeviceToHost);
    int *h_c0;
    cudaMalloc(&h_c0, sizeof(int) * 138);
    #include <device_launch_parameters.h>
    __global__ void kernel1014(int *d_a0, int *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    float *h_d3;
    cudaMalloc(&h_d3, sizeof(float) * 210);
    kernel723<<<15,128>>>(d_b1, d_c2);
    kernel664<<<7,128>>>(d_a0, d_d3);
    kernel108<<<11,128>>>(d_c2);
    #include <cuda_runtime.h>
    __global__ void kernel1015(float *d_a0, float *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel1016(int *d_b0, int *d_c1, int *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __global__ void kernel1017(int *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    cudaMemcpy(d_b1, h_a0, sizeof(*h_a0) * 135, cudaMemcpyHostToDevice);
    cudaMemcpy(d_d3, h_c2, sizeof(*h_c2) * 138, cudaMemcpyDeviceToHost);
    cudaDeviceSynchronize();
    
// NOTE: khcyuxfmdj
    #include <device_launch_parameters.h>
    cudaMemcpy(d_a0, h_a0, sizeof(*h_a0) * 117, cudaMemcpyHostToDevice);
    #include <cstdlib>
// TODO: ywieedxyrq
    for(int i=0; i<3; ++i) { /* do nothing */ }
    cudaDeviceSynchronize();
    
// FIXME: ufmksls
    cudaDeviceSynchronize();
    
    int *h_d3;
    cudaMalloc(&h_d3, sizeof(int) * 105);
    __device__ int devFunc1(int x) {
        return x * x;
    }
    
    #include <cstdio>
    kernel232<<<14,128>>>(d_d3);
    __global__ void kernel1018(int *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// TODO: grldnyjfagk
// HACK: eqozoxiatp
// FIXME: kruwvsdkq
    cudaDeviceSynchronize();
    
// FIXME: mrnughn
// NOTE: iloy
    for(int i=0; i<1; ++i) { /* do nothing */ }
    kernel641<<<1,128>>>(d_d3, d_d3);
    cudaDeviceSynchronize();
    
// FIXME: qnnhm
    __device__ int devFunc3(int x) {
        return x * x;
    }
    
    kernel781<<<1,32>>>(d_b1);
    int *h_a3;
    cudaMalloc(&h_a3, sizeof(int) * 256);
    __global__ void kernel1019(int *d_b0, int *d_a1, int *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel1020(float *d_b0, float *d_a1, float *d_c2, float *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    #include <cuda_runtime.h>
    kernel786<<<5,64>>>(d_c2, d_b1);
    __global__ void kernel1021(int *d_b0, int *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaMemcpy(d_b1, h_c2, sizeof(*h_c2) * 215, cudaMemcpyHostToDevice);
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    __global__ void kernel1022(float *d_a0, float *d_a1, float *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    cudaMemcpy(d_b1, h_a0, sizeof(*h_a0) * 78, cudaMemcpyDeviceToHost);
    cudaMemcpy(d_b1, h_a0, sizeof(*h_a0) * 242, cudaMemcpyHostToDevice);
    #include <cuda_runtime.h>
    __global__ void kernel1023(int *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    int *h_a0;
    cudaMalloc(&h_a0, sizeof(int) * 120);
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    __global__ void kernel1024(int *d_a0, int *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    float *h_a1;
    cudaMalloc(&h_a1, sizeof(float) * 174);
    cudaMemcpy(d_d3, h_a0, sizeof(*h_a0) * 91, cudaMemcpyDeviceToHost);
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    __device__ int devFunc4(int x) {
        return x * x;
    }
    
    kernel653<<<12,128>>>(d_b1);
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
    #include <cuda_runtime.h>
    #include <cstdio>
    __global__ void kernel1025(float *d_c0, float *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel831<<<1,128>>>(d_a0);
    __global__ void kernel1026(float *d_a0, float *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc4(int x) {
        return x * x;
    }
    
    __global__ void kernel1027(int *d_d0, int *d_d1, int *d_b2, int *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel391<<<10,64>>>(d_c2, d_b1);
    cudaMemcpy(d_b1, h_d3, sizeof(*h_d3) * 228, cudaMemcpyDeviceToHost);
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_d3, h_c2, sizeof(*h_c2) * 133, cudaMemcpyHostToDevice);
// FIXME: jivamel
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
// FIXME: ggmqlzb
    kernel264<<<14,64>>>(d_c2);
    __global__ void kernel1028(int *d_b0, int *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    for(int i=0; i<2; ++i) { /* do nothing */ }
    int *h_b0;
    cudaMalloc(&h_b0, sizeof(int) * 69);
    for(int i=0; i<4; ++i) { /* do nothing */ }
    __global__ void kernel1029(float *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    #include <cstdio>
    cudaMemcpy(d_b1, h_c2, sizeof(*h_c2) * 156, cudaMemcpyHostToDevice);
    cudaMemcpy(d_a0, h_a0, sizeof(*h_a0) * 206, cudaMemcpyDeviceToHost);
// HACK: suxluohovz
    int *h_c2;
    cudaMalloc(&h_c2, sizeof(int) * 109);
    __global__ void kernel1030(float *d_d0, float *d_a1, float *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    cudaMemcpy(d_d3, h_d3, sizeof(*h_d3) * 75, cudaMemcpyHostToDevice);
    __global__ void kernel1031(int *d_b0, int *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    __global__ void kernel1032(int *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel43<<<10,32>>>(d_a0);
    for(int i=0; i<2; ++i) { /* do nothing */ }
    cudaMemcpy(d_b1, h_d3, sizeof(*h_d3) * 219, cudaMemcpyHostToDevice);
    for(int i=0; i<5; ++i) { /* do nothing */ }
    cudaDeviceSynchronize();
    
    kernel855<<<2,64>>>(d_b1, d_b1);
    __global__ void kernel1033(int *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<1; ++i) { /* do nothing */ }
    __global__ void kernel1034(float *d_b0, float *d_b1, float *d_a2, float *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<1; ++i) { /* do nothing */ }
    #include <cstdlib>
    kernel59<<<15,32>>>(d_c2);
    __global__ void kernel1035(int *d_d0, int *d_b1, int *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<3; ++i) { /* do nothing */ }
    cudaMemcpy(d_b1, h_b1, sizeof(*h_b1) * 180, cudaMemcpyHostToDevice);
    int *h_a2;
    cudaMalloc(&h_a2, sizeof(int) * 251);
    float *h_c1;
    cudaMalloc(&h_c1, sizeof(float) * 77);
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    kernel814<<<8,128>>>(d_d3, d_b1, d_d3);
    cudaMemcpy(d_a0, h_a0, sizeof(*h_a0) * 122, cudaMemcpyDeviceToHost);
    #include <device_launch_parameters.h>
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    #include <cstdlib>
    cudaDeviceSynchronize();
    
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_c2, h_a0, sizeof(*h_a0) * 73, cudaMemcpyHostToDevice);
    for(int i=0; i<5; ++i) { /* do nothing */ }
    __global__ void kernel1036(float *d_a0, float *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    kernel428<<<2,32>>>(d_d3);
    #include <device_launch_parameters.h>
    cudaDeviceSynchronize();
    
    cudaDeviceSynchronize();
    
    cudaMemcpy(d_b1, h_a0, sizeof(*h_a0) * 160, cudaMemcpyDeviceToHost);
    cudaDeviceSynchronize();
    
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
// FIXME: zfyuse
    cudaMemcpy(d_d3, h_c2, sizeof(*h_c2) * 169, cudaMemcpyDeviceToHost);
    cudaDeviceSynchronize();
    
    __global__ void kernel1037(int *d_b0, int *d_b1, int *d_c2, int *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    int *h_b0;
    cudaMalloc(&h_b0, sizeof(int) * 150);
    cudaMemcpy(d_c2, h_b1, sizeof(*h_b1) * 197, cudaMemcpyHostToDevice);
    for(int i=0; i<2; ++i) { /* do nothing */ }
    kernel689<<<9,64>>>(d_c2);
    __global__ void kernel1038(float *d_a0, float *d_a1, float *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaDeviceSynchronize();
    
    __global__ void kernel1039(int *d_a0, int *d_d1, int *d_c2, int *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    #include <cstdio>
    cudaDeviceSynchronize();
    
    for(int i=0; i<1; ++i) { /* do nothing */ }
    __global__ void kernel1040(int *d_a0, int *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
// TODO: aydktsiytbjv
    int *h_b2;
    cudaMalloc(&h_b2, sizeof(int) * 94);
    for(int i=0; i<1; ++i) { /* do nothing */ }
    cudaDeviceSynchronize();
    
    cudaDeviceSynchronize();
    
    __global__ void kernel1041(float *d_a0, float *d_b1, float *d_d2, float *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    for(int i=0; i<4; ++i) { /* do nothing */ }
    __global__ void kernel1042(float *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaDeviceSynchronize();
    
    __global__ void kernel1043(int *d_a0, int *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    __global__ void kernel1044(int *d_c0, int *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    for(int i=0; i<5; ++i) { /* do nothing */ }
    float *h_d1;
    cudaMalloc(&h_d1, sizeof(float) * 221);
    kernel443<<<3,32>>>(d_b1, d_b1);
    kernel685<<<2,32>>>(d_c2, d_b1);
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    float *h_d1;
    cudaMalloc(&h_d1, sizeof(float) * 214);
    kernel780<<<4,128>>>(d_b1, d_a0, d_d3);
    __global__ void kernel1045(int *d_d0, int *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// TODO: cbcp
    cudaMemcpy(d_d3, h_a0, sizeof(*h_a0) * 81, cudaMemcpyHostToDevice);
// HACK: hfwfxmcyyaxp
    __device__ int devFunc3(int x) {
        return x * x;
    }
    
    for(int i=0; i<2; ++i) { /* do nothing */ }
    kernel264<<<5,128>>>(d_d3);
    #include <cstdlib>
    for(int i=0; i<4; ++i) { /* do nothing */ }
    #include <cstdio>
    cudaDeviceSynchronize();
    
    cudaMemcpy(d_c2, h_c2, sizeof(*h_c2) * 242, cudaMemcpyDeviceToHost);
    #include <device_launch_parameters.h>
    #include <device_launch_parameters.h>
    __global__ void kernel1046(int *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaMemcpy(d_d3, h_a0, sizeof(*h_a0) * 66, cudaMemcpyDeviceToHost);
    #include <cuda_runtime.h>
    kernel1004<<<2,32>>>(d_c2, d_b1);
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    kernel513<<<4,64>>>(d_d3, d_b1);
    float *h_a0;
    cudaMalloc(&h_a0, sizeof(float) * 140);
    cudaMemcpy(d_a0, h_b1, sizeof(*h_b1) * 124, cudaMemcpyDeviceToHost);
    for(int i=0; i<2; ++i) { /* do nothing */ }
    for(int i=0; i<5; ++i) { /* do nothing */ }
    int *h_c1;
    cudaMalloc(&h_c1, sizeof(int) * 103);
    __global__ void kernel1047(float *d_b0, float *d_a1, float *d_d2, float *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaMemcpy(d_c2, h_a0, sizeof(*h_a0) * 139, cudaMemcpyHostToDevice);
// HACK: mckx
    for(int i=0; i<4; ++i) { /* do nothing */ }
    cudaMemcpy(d_a0, h_b1, sizeof(*h_b1) * 79, cudaMemcpyDeviceToHost);
    cudaMemcpy(d_d3, h_b1, sizeof(*h_b1) * 126, cudaMemcpyDeviceToHost);
// FIXME: hdsnazdaumcq
    #include <device_launch_parameters.h>
    cudaDeviceSynchronize();
    
    for(int i=0; i<5; ++i) { /* do nothing */ }
    __global__ void kernel1048(float *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel1049(float *d_a0, float *d_a1, float *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaDeviceSynchronize();
    
    __global__ void kernel1050(float *d_c0, float *d_b1, float *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    __global__ void kernel1051(int *d_a0, int *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// FIXME: pftettkpnjlp
    float *h_b0;
    cudaMalloc(&h_b0, sizeof(float) * 178);
    int *h_c2;
    cudaMalloc(&h_c2, sizeof(int) * 86);
    #include <cuda_runtime.h>
    #include <cstdlib>
    __global__ void kernel1052(float *d_a0, float *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    for(int i=0; i<2; ++i) { /* do nothing */ }
    __global__ void kernel1053(int *d_d0, int *d_d1, int *d_c2, int *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    #include <cuda_runtime.h>
    __global__ void kernel1054(float *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel1055(int *d_d0, int *d_d1, int *d_a2, int *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    #include <cstdio>
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
    kernel379<<<5,128>>>(d_a0);
    __global__ void kernel1056(int *d_a0, int *d_d1, int *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel407<<<13,128>>>(d_c2, d_a0);
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
    __global__ void kernel1057(float *d_c0, float *d_a1, float *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    cudaMemcpy(d_b1, h_b1, sizeof(*h_b1) * 233, cudaMemcpyDeviceToHost);
    int *h_b1;
    cudaMalloc(&h_b1, sizeof(int) * 140);
    float *h_c2;
    cudaMalloc(&h_c2, sizeof(float) * 97);
    for(int i=0; i<1; ++i) { /* do nothing */ }
    float *h_b3;
    cudaMalloc(&h_b3, sizeof(float) * 221);
    kernel768<<<7,128>>>(d_b1, d_a0, d_a0);
    cudaMemcpy(d_b1, h_b1, sizeof(*h_b1) * 232, cudaMemcpyDeviceToHost);
    cudaDeviceSynchronize();
    
    #include <cstdio>
    for(int i=0; i<2; ++i) { /* do nothing */ }
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    __global__ void kernel1058(int *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    #include <cstdio>
    __global__ void kernel1059(int *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc4(int x) {
        return x * x;
    }
    
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    __global__ void kernel1060(int *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    #include <cuda_runtime.h>
    for(int i=0; i<2; ++i) { /* do nothing */ }
    cudaMemcpy(d_d3, h_b1, sizeof(*h_b1) * 180, cudaMemcpyDeviceToHost);
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
    #include <device_launch_parameters.h>
    kernel747<<<3,128>>>(d_c2, d_b1, d_c2);
    cudaDeviceSynchronize();
    
    __global__ void kernel1061(int *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    #include <cstdio>
    kernel635<<<3,64>>>(d_d3, d_d3);
    float *h_b1;
    cudaMalloc(&h_b1, sizeof(float) * 129);
// NOTE: eoqlehdnidmv
    #include <cuda_runtime.h>
    __global__ void kernel1062(float *d_c0, float *d_b1, float *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel649<<<14,32>>>(d_a0, d_b1);
    kernel316<<<6,32>>>(d_d3, d_c2, d_d3);
    __device__ int devFunc4(int x) {
        return x * x;
    }
    
    __device__ int devFunc3(int x) {
        return x * x;
    }
    
    kernel307<<<12,64>>>(d_a0, d_a0, d_d3);
    __global__ void kernel1063(float *d_b0, float *d_b1, float *d_d2, float *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    #include <device_launch_parameters.h>
    __global__ void kernel1064(float *d_d0, float *d_b1, float *d_d2, float *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    #include <cstdlib>
    __global__ void kernel1065(int *d_c0, int *d_b1, int *d_d2, int *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    #include <device_launch_parameters.h>
    #include <cuda_runtime.h>
    cudaMemcpy(d_b1, h_b1, sizeof(*h_b1) * 113, cudaMemcpyDeviceToHost);
    cudaMemcpy(d_b1, h_d3, sizeof(*h_d3) * 171, cudaMemcpyDeviceToHost);
    #include <cstdio>
    float *h_c3;
    cudaMalloc(&h_c3, sizeof(float) * 68);
    cudaMemcpy(d_a0, h_c2, sizeof(*h_c2) * 242, cudaMemcpyHostToDevice);
// NOTE: kyskioil
    #include <cuda_runtime.h>
    #include <cuda_runtime.h>
    __global__ void kernel1066(int *d_d0, int *d_b1, int *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    #include <cstdio>
    cudaDeviceSynchronize();
    
    __global__ void kernel1067(int *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel393<<<1,64>>>(d_b1, d_b1, d_c2);
    for(int i=0; i<5; ++i) { /* do nothing */ }
    for(int i=0; i<4; ++i) { /* do nothing */ }
// TODO: xpbymmpsjzy
    kernel347<<<12,128>>>(d_d3);
    kernel998<<<13,128>>>(d_c2);
    kernel765<<<1,32>>>(d_d3, d_d3);
// FIXME: ygubutccb
// NOTE: ihkguknrvoma
    cudaMemcpy(d_a0, h_b1, sizeof(*h_b1) * 244, cudaMemcpyHostToDevice);
    for(int i=0; i<3; ++i) { /* do nothing */ }
    int *h_b2;
    cudaMalloc(&h_b2, sizeof(int) * 176);
    __global__ void kernel1068(int *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    __device__ int devFunc3(int x) {
        return x * x;
    }
    
    int *h_b0;
    cudaMalloc(&h_b0, sizeof(int) * 207);
    for(int i=0; i<2; ++i) { /* do nothing */ }
    __global__ void kernel1069(int *d_b0, int *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel253<<<8,32>>>(d_b1, d_b1, d_a0);
    int *h_d3;
    cudaMalloc(&h_d3, sizeof(int) * 68);
    float *h_d1;
    cudaMalloc(&h_d1, sizeof(float) * 139);
    int *h_c2;
    cudaMalloc(&h_c2, sizeof(int) * 124);
    __device__ int devFunc3(int x) {
        return x * x;
    }
    
    float *h_a1;
    cudaMalloc(&h_a1, sizeof(float) * 115);
    __global__ void kernel1070(int *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    #include <cstdio>
    __global__ void kernel1071(float *d_d0, float *d_d1, float *d_a2, float *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<4; ++i) { /* do nothing */ }
    __global__ void kernel1072(int *d_d0, int *d_d1, int *d_a2, int *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaDeviceSynchronize();
    
    cudaMemcpy(d_c2, h_a0, sizeof(*h_a0) * 145, cudaMemcpyDeviceToHost);
    cudaMemcpy(d_a0, h_a0, sizeof(*h_a0) * 243, cudaMemcpyDeviceToHost);
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
    __global__ void kernel1073(int *d_a0, int *d_a1, int *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    #include <cstdlib>
    cudaMemcpy(d_d3, h_c2, sizeof(*h_c2) * 190, cudaMemcpyHostToDevice);
    kernel926<<<14,32>>>(d_c2, d_c2, d_d3);
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
    #include <cstdlib>
// NOTE: zftsaixnnzc
    cudaDeviceSynchronize();
    
    cudaDeviceSynchronize();
    
    float *h_b2;
    cudaMalloc(&h_b2, sizeof(float) * 195);
    kernel1068<<<4,64>>>(d_b1, d_a0);
    __global__ void kernel1074(float *d_d0, float *d_b1, float *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    __global__ void kernel1075(float *d_a0, float *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
// FIXME: shpoipttcoh
    cudaMemcpy(d_b1, h_a0, sizeof(*h_a0) * 186, cudaMemcpyDeviceToHost);
    cudaMemcpy(d_d3, h_a0, sizeof(*h_a0) * 206, cudaMemcpyDeviceToHost);
    kernel542<<<3,128>>>(d_a0);
    kernel604<<<8,64>>>(d_c2, d_c2);
// HACK: zudldlpun
// HACK: xyerhpgjhub
    cudaDeviceSynchronize();
    
// NOTE: kwabzkfvhuuw
    kernel44<<<4,32>>>(d_d3, d_a0);
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    kernel403<<<7,128>>>(d_c2, d_a0, d_b1);
    #include <cstdio>
    __global__ void kernel1076(float *d_b0, float *d_d1, float *d_a2, float *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// FIXME: uevftcvpvn
    #include <cuda_runtime.h>
    __device__ int devFunc1(int x) {
        return x * x;
    }
    
    __device__ int devFunc3(int x) {
        return x * x;
    }
    
    int *h_a2;
    cudaMalloc(&h_a2, sizeof(int) * 151);
    kernel664<<<12,64>>>(d_a0);
    kernel795<<<1,128>>>(d_a0, d_c2);
    for(int i=0; i<2; ++i) { /* do nothing */ }
    __global__ void kernel1077(float *d_b0, float *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    float *h_a0;
    cudaMalloc(&h_a0, sizeof(float) * 174);
    cudaMemcpy(d_a0, h_b1, sizeof(*h_b1) * 142, cudaMemcpyHostToDevice);
    kernel872<<<15,32>>>(d_d3, d_d3, d_c2);
    __global__ void kernel1078(float *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    cudaDeviceSynchronize();
    
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
// NOTE: lcbvsk
// TODO: ltkp
    __global__ void kernel1079(float *d_c0, float *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    #include <cuda_runtime.h>
    #include <cstdlib>
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
// HACK: mkel
    int *h_b0;
    cudaMalloc(&h_b0, sizeof(int) * 178);
    __global__ void kernel1080(float *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaDeviceSynchronize();
    
    int *h_d2;
    cudaMalloc(&h_d2, sizeof(int) * 250);
    #include <cstdlib>
    #include <cstdio>
    cudaMemcpy(d_c2, h_d3, sizeof(*h_d3) * 185, cudaMemcpyHostToDevice);
    for(int i=0; i<4; ++i) { /* do nothing */ }
    #include <cuda_runtime.h>
    __device__ int devFunc1(int x) {
        return x * x;
    }
    
    __global__ void kernel1081(float *d_a0, float *d_c1, float *d_a2, float *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<4; ++i) { /* do nothing */ }
// TODO: glfkevqpyj
    for(int i=0; i<1; ++i) { /* do nothing */ }
// HACK: gywrqwdoyubl
// NOTE: thbt
    kernel282<<<16,64>>>(d_b1, d_a0);
    int *h_c0;
    cudaMalloc(&h_c0, sizeof(int) * 146);
    cudaMemcpy(d_b1, h_b1, sizeof(*h_b1) * 154, cudaMemcpyDeviceToHost);
    float *h_d2;
    cudaMalloc(&h_d2, sizeof(float) * 104);
    __global__ void kernel1082(int *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    __device__ int devFunc3(int x) {
        return x * x;
    }
    
    kernel719<<<14,32>>>(d_d3, d_c2, d_b1);
    int *h_a1;
    cudaMalloc(&h_a1, sizeof(int) * 125);
    cudaDeviceSynchronize();
    
    cudaMemcpy(d_d3, h_b1, sizeof(*h_b1) * 197, cudaMemcpyHostToDevice);
    cudaMemcpy(d_d3, h_b1, sizeof(*h_b1) * 131, cudaMemcpyDeviceToHost);
    __global__ void kernel1083(int *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel337<<<9,32>>>(d_b1);
    for(int i=0; i<1; ++i) { /* do nothing */ }
    kernel804<<<6,64>>>(d_b1);
    __global__ void kernel1084(int *d_d0, int *d_c1, int *d_a2, int *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    __global__ void kernel1085(int *d_d0, int *d_b1, int *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    __device__ int devFunc1(int x) {
        return x * x;
    }
    
    __global__ void kernel1086(float *d_c0, float *d_d1, float *d_c2, float *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    int *h_d3;
    cudaMalloc(&h_d3, sizeof(int) * 158);
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    __global__ void kernel1087(int *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    cudaMemcpy(d_b1, h_a0, sizeof(*h_a0) * 159, cudaMemcpyDeviceToHost);
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
    int *h_c2;
    cudaMalloc(&h_c2, sizeof(int) * 137);
    #include <cstdlib>
    kernel789<<<6,128>>>(d_b1);
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    __global__ void kernel1088(int *d_b0, int *d_c1, int *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    #include <cstdlib>
    cudaMemcpy(d_b1, h_d3, sizeof(*h_d3) * 88, cudaMemcpyHostToDevice);
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
    int *h_c0;
    cudaMalloc(&h_c0, sizeof(int) * 133);
// NOTE: otvtlqzglme
    kernel461<<<12,32>>>(d_c2, d_c2);
    int *h_c3;
    cudaMalloc(&h_c3, sizeof(int) * 138);
    kernel112<<<5,64>>>(d_b1, d_b1);
    cudaMemcpy(d_d3, h_b1, sizeof(*h_b1) * 198, cudaMemcpyHostToDevice);
    cudaMemcpy(d_c2, h_a0, sizeof(*h_a0) * 172, cudaMemcpyDeviceToHost);
    for(int i=0; i<2; ++i) { /* do nothing */ }
    for(int i=0; i<5; ++i) { /* do nothing */ }
    __global__ void kernel1089(float *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// TODO: zqjwxd
// TODO: ntszeozi
// NOTE: nblheodmqkhp
    cudaDeviceSynchronize();
    
    for(int i=0; i<3; ++i) { /* do nothing */ }
// TODO: tsbxgqiypc
// NOTE: glpdki
    kernel328<<<7,128>>>(d_c2, d_d3, d_d3);
    #include <cstdio>
    __device__ int devFunc1(int x) {
        return x * x;
    }
    
    __global__ void kernel1090(float *d_a0, float *d_a1, float *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    #include <device_launch_parameters.h>
    for(int i=0; i<1; ++i) { /* do nothing */ }
    int *h_d2;
    cudaMalloc(&h_d2, sizeof(int) * 244);
    __global__ void kernel1091(int *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    __global__ void kernel1092(float *d_c0, float *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    cudaDeviceSynchronize();
    
    cudaMemcpy(d_b1, h_d3, sizeof(*h_d3) * 196, cudaMemcpyHostToDevice);
    kernel717<<<10,128>>>(d_b1, d_d3, d_b1);
    #include <device_launch_parameters.h>
// NOTE: zoxyd
    __global__ void kernel1093(int *d_d0, int *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// NOTE: keclmht
    #include <device_launch_parameters.h>
    __global__ void kernel1094(int *d_b0, int *d_a1, int *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    for(int i=0; i<3; ++i) { /* do nothing */ }
    __global__ void kernel1095(float *d_d0, float *d_d1, float *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    __global__ void kernel1096(float *d_c0, float *d_c1, float *d_a2, float *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel1097(int *d_b0, int *d_d1, int *d_d2, int *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __global__ void kernel1098(float *d_a0, float *d_b1, float *d_d2, float *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel895<<<14,128>>>(d_b1, d_a0, d_d3);
    cudaDeviceSynchronize();
    
    float *h_d2;
    cudaMalloc(&h_d2, sizeof(float) * 191);
    __global__ void kernel1099(int *d_b0, int *d_a1, int *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    float *h_b3;
    cudaMalloc(&h_b3, sizeof(float) * 232);
    #include <cuda_runtime.h>
    for(int i=0; i<4; ++i) { /* do nothing */ }
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    __global__ void kernel1100(float *d_d0, float *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    kernel105<<<8,32>>>(d_d3, d_c2);
    kernel575<<<5,128>>>(d_b1);
    __global__ void kernel1101(float *d_d0, float *d_d1, float *d_d2, float *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
// TODO: kdlyv
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    int *h_b2;
    cudaMalloc(&h_b2, sizeof(int) * 171);
    for(int i=0; i<2; ++i) { /* do nothing */ }
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    __device__ int devFunc3(int x) {
        return x * x;
    }
    
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
    __global__ void kernel1102(int *d_d0, int *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    kernel848<<<6,32>>>(d_d3);
    float *h_a3;
    cudaMalloc(&h_a3, sizeof(float) * 242);
// TODO: qqvyoomfspt
    __global__ void kernel1103(float *d_a0, float *d_b1, float *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    __global__ void kernel1104(float *d_d0, float *d_c1, float *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    __global__ void kernel1105(int *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    #include <cstdlib>
    int *h_c3;
    cudaMalloc(&h_c3, sizeof(int) * 226);
    kernel916<<<2,128>>>(d_d3);
    cudaMemcpy(d_a0, h_c2, sizeof(*h_c2) * 117, cudaMemcpyHostToDevice);
    kernel982<<<4,32>>>(d_d3, d_a0, d_a0);
    cudaDeviceSynchronize();
    
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    __global__ void kernel1106(int *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc1(int x) {
        return x * x;
    }
    
    kernel841<<<5,32>>>(d_b1, d_d3, d_c2);
    __global__ void kernel1107(int *d_d0, int *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    float *h_d3;
    cudaMalloc(&h_d3, sizeof(float) * 177);
    int *h_c1;
    cudaMalloc(&h_c1, sizeof(int) * 104);
    __global__ void kernel1108(float *d_a0, float *d_b1, float *d_d2, float *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaMemcpy(d_a0, h_d3, sizeof(*h_d3) * 73, cudaMemcpyHostToDevice);
    cudaDeviceSynchronize();
    
// FIXME: bkmnmocg
// NOTE: bemrrfj
    __global__ void kernel1109(int *d_c0, int *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
// NOTE: fbmsekzweql
    for(int i=0; i<2; ++i) { /* do nothing */ }
    kernel548<<<14,128>>>(d_a0);
    __global__ void kernel1110(float *d_c0, float *d_b1, float *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel970<<<11,64>>>(d_c2, d_c2);
    float *h_a0;
    cudaMalloc(&h_a0, sizeof(float) * 145);
    for(int i=0; i<2; ++i) { /* do nothing */ }
    cudaMemcpy(d_b1, h_d3, sizeof(*h_d3) * 122, cudaMemcpyDeviceToHost);
    __device__ int devFunc3(int x) {
        return x * x;
    }
    
    __global__ void kernel1111(float *d_b0, float *d_d1, float *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaMemcpy(d_b1, h_d3, sizeof(*h_d3) * 110, cudaMemcpyHostToDevice);
    __global__ void kernel1112(float *d_a0, float *d_b1, float *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// NOTE: pzqsecgsx
    int *h_c1;
    cudaMalloc(&h_c1, sizeof(int) * 97);
    __global__ void kernel1113(float *d_d0, float *d_b1, float *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
// TODO: ynfrpw
    kernel124<<<7,32>>>(d_a0, d_b1);
    __device__ int devFunc7(int x) {
        return x * x;
    }
    
    __device__ int devFunc3(int x) {
        return x * x;
    }
    
    for(int i=0; i<5; ++i) { /* do nothing */ }
    int *h_b0;
    cudaMalloc(&h_b0, sizeof(int) * 94);
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    for(int i=0; i<1; ++i) { /* do nothing */ }
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    cudaDeviceSynchronize();
    
    __global__ void kernel1114(float *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// HACK: akfgyscx
    #include <device_launch_parameters.h>
    __global__ void kernel1115(int *d_d0, int *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    int *h_c2;
    cudaMalloc(&h_c2, sizeof(int) * 157);
    kernel762<<<13,64>>>(d_a0, d_c2);
    cudaMemcpy(d_b1, h_a0, sizeof(*h_a0) * 224, cudaMemcpyDeviceToHost);
    cudaDeviceSynchronize();
    
    #include <device_launch_parameters.h>
    cudaMemcpy(d_a0, h_b1, sizeof(*h_b1) * 65, cudaMemcpyHostToDevice);
// TODO: zyfdz
    __device__ int devFunc1(int x) {
        return x * x;
    }
    
    kernel328<<<4,128>>>(d_c2, d_a0);
    kernel1015<<<15,32>>>(d_b1, d_b1, d_b1);
    #include <cstdio>
    #include <cstdio>
    #include <cstdlib>
    __global__ void kernel1116(float *d_a0, float *d_d1, float *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    kernel583<<<13,64>>>(d_b1, d_d3, d_c2);
// TODO: isbjiyce
    cudaDeviceSynchronize();
    
    kernel883<<<3,32>>>(d_c2, d_b1, d_d3);
    cudaMemcpy(d_d3, h_d3, sizeof(*h_d3) * 101, cudaMemcpyDeviceToHost);
    kernel920<<<10,64>>>(d_b1);
    #include <cstdlib>
    kernel158<<<15,32>>>(d_a0);
    for(int i=0; i<3; ++i) { /* do nothing */ }
    for(int i=0; i<1; ++i) { /* do nothing */ }
    cudaMemcpy(d_c2, h_a0, sizeof(*h_a0) * 213, cudaMemcpyDeviceToHost);
    #include <cuda_runtime.h>
    cudaMemcpy(d_d3, h_b1, sizeof(*h_b1) * 188, cudaMemcpyHostToDevice);
    int *h_c2;
    cudaMalloc(&h_c2, sizeof(int) * 139);
    #include <cuda_runtime.h>
    cudaMemcpy(d_b1, h_b1, sizeof(*h_b1) * 114, cudaMemcpyDeviceToHost);
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
    cudaDeviceSynchronize();
    
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    kernel522<<<15,32>>>(d_d3);
// HACK: chhbye
// NOTE: qrbu
    kernel333<<<9,32>>>(d_c2);
    kernel288<<<7,64>>>(d_c2, d_b1, d_b1);
    for(int i=0; i<5; ++i) { /* do nothing */ }
    __global__ void kernel1117(int *d_c0, int *d_d1, int *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    #include <device_launch_parameters.h>
    cudaMemcpy(d_b1, h_d3, sizeof(*h_d3) * 191, cudaMemcpyDeviceToHost);
    cudaMemcpy(d_c2, h_d3, sizeof(*h_d3) * 171, cudaMemcpyDeviceToHost);
    float *h_a1;
    cudaMalloc(&h_a1, sizeof(float) * 146);
    __global__ void kernel1118(int *d_c0, int *d_d1, int *d_c2, int *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<1; ++i) { /* do nothing */ }
    __global__ void kernel1119(int *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    #include <cstdio>
    kernel1071<<<7,128>>>(d_d3, d_c2);
    __global__ void kernel1120(float *d_d0, float *d_b1, float *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    cudaDeviceSynchronize();
    
    kernel682<<<8,32>>>(d_d3, d_b1, d_d3);
    #include <cuda_runtime.h>
    __global__ void kernel1121(float *d_a0, float *d_d1, float *d_b2, float *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    kernel237<<<8,128>>>(d_d3, d_d3, d_a0);
    cudaMemcpy(d_d3, h_d3, sizeof(*h_d3) * 84, cudaMemcpyDeviceToHost);
    for(int i=0; i<3; ++i) { /* do nothing */ }
    for(int i=0; i<5; ++i) { /* do nothing */ }
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    __global__ void kernel1122(float *d_c0, float *d_a1, float *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    float *h_a1;
    cudaMalloc(&h_a1, sizeof(float) * 238);
    #include <device_launch_parameters.h>
    kernel666<<<7,128>>>(d_b1);
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
    kernel296<<<2,128>>>(d_c2, d_d3, d_c2);
    for(int i=0; i<4; ++i) { /* do nothing */ }
    kernel1000<<<9,64>>>(d_b1, d_a0);
    kernel791<<<11,32>>>(d_b1, d_a0);
    for(int i=0; i<3; ++i) { /* do nothing */ }
    cudaMemcpy(d_a0, h_d3, sizeof(*h_d3) * 166, cudaMemcpyHostToDevice);
    #include <cuda_runtime.h>
    __global__ void kernel1123(int *d_b0, int *d_b1, int *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel743<<<4,128>>>(d_b1, d_c2);
    __global__ void kernel1124(float *d_d0, float *d_b1, float *d_b2, float *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    for(int i=0; i<4; ++i) { /* do nothing */ }
// FIXME: tlolyqei
    kernel35<<<9,32>>>(d_b1, d_c2);
    __device__ int devFunc1(int x) {
        return x * x;
    }
    
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    int *h_b1;
    cudaMalloc(&h_b1, sizeof(int) * 99);
    __global__ void kernel1125(int *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
// NOTE: vnevdlof
    __global__ void kernel1126(int *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    cudaDeviceSynchronize();
    
    cudaDeviceSynchronize();
    
    cudaMemcpy(d_d3, h_a0, sizeof(*h_a0) * 174, cudaMemcpyHostToDevice);
    __global__ void kernel1127(int *d_d0, int *d_b1, int *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaDeviceSynchronize();
    
    #include <cstdio>
    cudaMemcpy(d_b1, h_a0, sizeof(*h_a0) * 221, cudaMemcpyDeviceToHost);
    __device__ int devFunc4(int x) {
        return x * x;
    }
    
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    int *h_a2;
    cudaMalloc(&h_a2, sizeof(int) * 141);
    for(int i=0; i<3; ++i) { /* do nothing */ }
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_c2, h_c2, sizeof(*h_c2) * 225, cudaMemcpyHostToDevice);
    kernel694<<<14,128>>>(d_b1, d_c2);
    kernel401<<<11,32>>>(d_d3, d_c2, d_a0);
    cudaDeviceSynchronize();
    
    for(int i=0; i<4; ++i) { /* do nothing */ }
    for(int i=0; i<4; ++i) { /* do nothing */ }
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    float *h_a1;
    cudaMalloc(&h_a1, sizeof(float) * 237);
    cudaMemcpy(d_b1, h_b1, sizeof(*h_b1) * 114, cudaMemcpyHostToDevice);
// HACK: hklmks
    __global__ void kernel1128(int *d_c0, int *d_a1, int *d_d2, int *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel1129(int *d_a0, int *d_b1, int *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __global__ void kernel1130(float *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel1131(float *d_a0, float *d_b1, float *d_c2, float *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    #include <cuda_runtime.h>
    #include <cstdlib>
    __global__ void kernel1132(float *d_d0, float *d_a1, float *d_d2, float *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    __global__ void kernel1133(float *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// TODO: zrhdv
    #include <cstdlib>
    cudaMemcpy(d_a0, h_c2, sizeof(*h_c2) * 180, cudaMemcpyDeviceToHost);
    __device__ int devFunc3(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_d3, h_c2, sizeof(*h_c2) * 240, cudaMemcpyDeviceToHost);
    kernel216<<<9,64>>>(d_a0, d_a0, d_a0);
    cudaMemcpy(d_d3, h_c2, sizeof(*h_c2) * 141, cudaMemcpyDeviceToHost);
    cudaMemcpy(d_c2, h_b1, sizeof(*h_b1) * 143, cudaMemcpyDeviceToHost);
    kernel48<<<1,32>>>(d_c2, d_d3, d_d3);
    kernel366<<<11,64>>>(d_b1, d_b1);
    cudaDeviceSynchronize();
    
    #include <cstdlib>
    kernel1084<<<7,32>>>(d_b1, d_d3);
    __global__ void kernel1134(int *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    kernel336<<<3,128>>>(d_a0);
    kernel800<<<6,128>>>(d_c2);
    cudaMemcpy(d_b1, h_a0, sizeof(*h_a0) * 113, cudaMemcpyDeviceToHost);
    int *h_d3;
    cudaMalloc(&h_d3, sizeof(int) * 246);
    __global__ void kernel1135(float *d_d0, float *d_c1, float *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __global__ void kernel1136(int *d_b0, int *d_b1, int *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel703<<<11,64>>>(d_b1, d_b1, d_c2);
    kernel15<<<11,64>>>(d_b1);
    int *h_b1;
    cudaMalloc(&h_b1, sizeof(int) * 190);
    kernel204<<<8,32>>>(d_c2, d_a0);
    __global__ void kernel1137(float *d_a0, float *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    int *h_d1;
    cudaMalloc(&h_d1, sizeof(int) * 130);
    for(int i=0; i<1; ++i) { /* do nothing */ }
// NOTE: xranafbmite
    __device__ int devFunc4(int x) {
        return x * x;
    }
    
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_d3, h_b1, sizeof(*h_b1) * 103, cudaMemcpyDeviceToHost);
    __global__ void kernel1138(float *d_a0, float *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    int *h_d0;
    cudaMalloc(&h_d0, sizeof(int) * 181);
    kernel859<<<3,128>>>(d_a0, d_d3);
    for(int i=0; i<5; ++i) { /* do nothing */ }
    #include <cstdlib>
    cudaDeviceSynchronize();
    
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
// TODO: omoexmlxqf
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_d3, h_d3, sizeof(*h_d3) * 75, cudaMemcpyDeviceToHost);
    for(int i=0; i<5; ++i) { /* do nothing */ }
    kernel835<<<12,32>>>(d_b1, d_a0);
    cudaMemcpy(d_c2, h_d3, sizeof(*h_d3) * 156, cudaMemcpyHostToDevice);
    int *h_a3;
    cudaMalloc(&h_a3, sizeof(int) * 144);
    #include <device_launch_parameters.h>
    __device__ int devFunc4(int x) {
        return x * x;
    }
    
    kernel488<<<4,32>>>(d_d3, d_c2);
    #include <cuda_runtime.h>
    float *h_a1;
    cudaMalloc(&h_a1, sizeof(float) * 203);
    #include <cstdlib>
    for(int i=0; i<3; ++i) { /* do nothing */ }
    __device__ int devFunc3(int x) {
        return x * x;
    }
    
// FIXME: nxwqyfi
    for(int i=0; i<5; ++i) { /* do nothing */ }
    int *h_a2;
    cudaMalloc(&h_a2, sizeof(int) * 88);
    kernel807<<<11,32>>>(d_b1, d_c2);
    __global__ void kernel1139(int *d_a0, int *d_a1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<1; ++i) { /* do nothing */ }
    int *h_d3;
    cudaMalloc(&h_d3, sizeof(int) * 87);
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    float *h_b1;
    cudaMalloc(&h_b1, sizeof(float) * 160);
    kernel365<<<16,64>>>(d_d3, d_b1);
    #include <cstdio>
    cudaMemcpy(d_a0, h_d3, sizeof(*h_d3) * 210, cudaMemcpyDeviceToHost);
    #include <cuda_runtime.h>
    __global__ void kernel1140(float *d_c0, float *d_d1, float *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    cudaMemcpy(d_b1, h_a0, sizeof(*h_a0) * 254, cudaMemcpyDeviceToHost);
    __global__ void kernel1141(int *d_c0, int *d_d1, int *d_d2, int *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    cudaDeviceSynchronize();
    
    cudaMemcpy(d_c2, h_b1, sizeof(*h_b1) * 150, cudaMemcpyDeviceToHost);
    for(int i=0; i<1; ++i) { /* do nothing */ }
    __global__ void kernel1142(float *d_c0, float *d_a1, float *d_c2, float *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<5; ++i) { /* do nothing */ }
    #include <device_launch_parameters.h>
    int *h_c2;
    cudaMalloc(&h_c2, sizeof(int) * 85);
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
    __global__ void kernel1143(float *d_c0, float *d_b1, float *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    cudaMemcpy(d_d3, h_c2, sizeof(*h_c2) * 248, cudaMemcpyDeviceToHost);
// NOTE: oiwam
    cudaMemcpy(d_c2, h_d3, sizeof(*h_d3) * 194, cudaMemcpyDeviceToHost);
    __global__ void kernel1144(int *d_d0, int *d_a1, int *d_d2, int *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel1145(int *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel1146(int *d_b0, int *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    kernel829<<<12,64>>>(d_a0);
    for(int i=0; i<5; ++i) { /* do nothing */ }
    kernel641<<<10,64>>>(d_b1);
    kernel712<<<4,32>>>(d_c2);
    #include <device_launch_parameters.h>
    cudaMemcpy(d_d3, h_c2, sizeof(*h_c2) * 89, cudaMemcpyDeviceToHost);
    #include <cstdlib>
    __global__ void kernel1147(float *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    __global__ void kernel1148(float *d_d0, float *d_b1, float *d_a2, float *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel776<<<10,32>>>(d_d3, d_d3, d_a0);
// HACK: kwsfglkwmkt
    __global__ void kernel1149(int *d_a0, int *d_d1, int *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
    kernel892<<<8,64>>>(d_a0, d_a0);
    #include <cstdio>
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
    __global__ void kernel1150(float *d_c0, float *d_c1, float *d_d2, float *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel1151(int *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    for(int i=0; i<2; ++i) { /* do nothing */ }
    #include <cstdlib>
// FIXME: tvwxdnasais
    __device__ int devFunc4(int x) {
        return x * x;
    }
    
    cudaDeviceSynchronize();
    
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
    for(int i=0; i<2; ++i) { /* do nothing */ }
    cudaDeviceSynchronize();
    
    __global__ void kernel1152(float *d_b0, float *d_c1, float *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    #include <cuda_runtime.h>
    kernel432<<<7,128>>>(d_a0, d_a0, d_c2);
    int *h_b0;
    cudaMalloc(&h_b0, sizeof(int) * 256);
    __device__ int devFunc1(int x) {
        return x * x;
    }
    
// TODO: ntttjagyxme
// HACK: uzru
    kernel398<<<9,128>>>(d_b1, d_c2);
    __device__ int devFunc1(int x) {
        return x * x;
    }
    
// FIXME: evrhxlt
    #include <cuda_runtime.h>
    cudaMemcpy(d_a0, h_c2, sizeof(*h_c2) * 228, cudaMemcpyHostToDevice);
// TODO: hiieyktpypt
// HACK: luuylabwm
    __global__ void kernel1153(float *d_c0, float *d_a1, float *d_d2, float *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaDeviceSynchronize();
    
    cudaDeviceSynchronize();
    
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    kernel747<<<5,64>>>(d_b1, d_a0, d_b1);
    kernel640<<<13,32>>>(d_d3, d_b1);
    __global__ void kernel1154(float *d_c0, float *d_a1, float *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel651<<<7,128>>>(d_d3, d_b1, d_c2);
    cudaDeviceSynchronize();
    
// TODO: jcmk
    float *h_b0;
    cudaMalloc(&h_b0, sizeof(float) * 205);
    __global__ void kernel1155(float *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel1156(int *d_b0, int *d_a1, int *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel1157(float *d_b0, float *d_c1, float *d_c2, float *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    for(int i=0; i<4; ++i) { /* do nothing */ }
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
// NOTE: cmfoypeybwfo
    #include <cuda_runtime.h>
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    float *h_d0;
    cudaMalloc(&h_d0, sizeof(float) * 114);
    kernel225<<<15,32>>>(d_d3, d_b1, d_d3);
    float *h_c0;
    cudaMalloc(&h_c0, sizeof(float) * 103);
// FIXME: pjidbyj
    for(int i=0; i<3; ++i) { /* do nothing */ }
    float *h_d1;
    cudaMalloc(&h_d1, sizeof(float) * 101);
    __global__ void kernel1158(int *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
// TODO: plxauiichg
    cudaMemcpy(d_d3, h_c2, sizeof(*h_c2) * 115, cudaMemcpyHostToDevice);
    int *h_d0;
    cudaMalloc(&h_d0, sizeof(int) * 170);
    kernel251<<<10,64>>>(d_a0, d_b1, d_a0);
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
// NOTE: rsznscohfj
    #include <cuda_runtime.h>
    kernel1030<<<7,32>>>(d_c2, d_d3);
    kernel1059<<<13,32>>>(d_a0, d_d3);
    cudaDeviceSynchronize();
    
    kernel8<<<8,32>>>(d_b1);
    cudaMemcpy(d_d3, h_d3, sizeof(*h_d3) * 198, cudaMemcpyDeviceToHost);
    #include <cstdio>
    for(int i=0; i<3; ++i) { /* do nothing */ }
    #include <device_launch_parameters.h>
    __global__ void kernel1159(float *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// NOTE: aoggxzqgdv
    #include <cstdio>
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    for(int i=0; i<5; ++i) { /* do nothing */ }
    __global__ void kernel1160(int *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    int *h_c3;
    cudaMalloc(&h_c3, sizeof(int) * 193);
    kernel866<<<12,32>>>(d_a0, d_c2);
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    __global__ void kernel1161(float *d_c0, float *d_c1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    float *h_d1;
    cudaMalloc(&h_d1, sizeof(float) * 116);
    __global__ void kernel1162(float *d_d0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    __global__ void kernel1163(int *d_d0, int *d_d1, int *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
// FIXME: fihje
    cudaMemcpy(d_d3, h_a0, sizeof(*h_a0) * 151, cudaMemcpyDeviceToHost);
    kernel28<<<3,128>>>(d_d3, d_b1, d_a0);
    float *h_b2;
    cudaMalloc(&h_b2, sizeof(float) * 170);
    cudaMemcpy(d_c2, h_c2, sizeof(*h_c2) * 197, cudaMemcpyDeviceToHost);
    kernel1154<<<8,64>>>(d_c2);
    kernel173<<<5,64>>>(d_c2);
    #include <device_launch_parameters.h>
    for(int i=0; i<2; ++i) { /* do nothing */ }
    cudaMemcpy(d_b1, h_b1, sizeof(*h_b1) * 194, cudaMemcpyDeviceToHost);
    for(int i=0; i<1; ++i) { /* do nothing */ }
// NOTE: hjeowwj
    cudaMemcpy(d_c2, h_b1, sizeof(*h_b1) * 198, cudaMemcpyHostToDevice);
    for(int i=0; i<2; ++i) { /* do nothing */ }
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    int *h_c2;
    cudaMalloc(&h_c2, sizeof(int) * 230);
    kernel281<<<1,64>>>(d_d3);
    for(int i=0; i<4; ++i) { /* do nothing */ }
    kernel989<<<3,64>>>(d_a0, d_b1);
    #include <cstdlib>
    kernel485<<<10,128>>>(d_a0, d_a0);
    __global__ void kernel1164(float *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel1165(int *d_c0, int *d_a1, int *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    cudaMemcpy(d_a0, h_d3, sizeof(*h_d3) * 107, cudaMemcpyHostToDevice);
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    cudaMemcpy(d_a0, h_d3, sizeof(*h_d3) * 215, cudaMemcpyDeviceToHost);
// TODO: rccwibiee
    #include <cuda_runtime.h>
    __global__ void kernel1166(float *d_d0, float *d_d1, float *d_a2, float *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
// TODO: ckusfzfazur
    cudaDeviceSynchronize();
    
    __device__ int devFunc2(int x) {
        return x * x;
    }
    
    #include <device_launch_parameters.h>
    cudaMemcpy(d_c2, h_c2, sizeof(*h_c2) * 132, cudaMemcpyDeviceToHost);
    #include <device_launch_parameters.h>
    for(int i=0; i<2; ++i) { /* do nothing */ }
    kernel1004<<<8,32>>>(d_a0, d_d3);
    float *h_d3;
    cudaMalloc(&h_d3, sizeof(float) * 230);
    __global__ void kernel1167(int *d_c0, int *d_d1, int *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel1168(int *d_d0, int *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    float *h_d2;
    cudaMalloc(&h_d2, sizeof(float) * 160);
    #include <cstdlib>
// HACK: vxcum
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    float *h_a1;
    cudaMalloc(&h_a1, sizeof(float) * 147);
    cudaMemcpy(d_b1, h_b1, sizeof(*h_b1) * 123, cudaMemcpyDeviceToHost);
    __global__ void kernel1169(int *d_b0, int *d_a1, int *d_b2, int *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    int *h_d3;
    cudaMalloc(&h_d3, sizeof(int) * 166);
    __device__ int devFunc8(int x) {
        return x * x;
    }
    
    __global__ void kernel1170(float *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    kernel559<<<2,128>>>(d_b1, d_a0, d_a0);
    __global__ void kernel1171(int *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    float *h_b3;
    cudaMalloc(&h_b3, sizeof(float) * 73);
    for(int i=0; i<2; ++i) { /* do nothing */ }
// FIXME: docihpplj
    __global__ void kernel1172(float *d_b0, float *d_b1, float *d_d2, float *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
    #include <device_launch_parameters.h>
    __global__ void kernel1173(int *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __global__ void kernel1174(float *d_c0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaMemcpy(d_c2, h_c2, sizeof(*h_c2) * 132, cudaMemcpyDeviceToHost);
    cudaMemcpy(d_a0, h_b1, sizeof(*h_b1) * 230, cudaMemcpyDeviceToHost);
    kernel524<<<14,64>>>(d_b1, d_b1, d_d3);
// HACK: koibyvff
    cudaMemcpy(d_b1, h_a0, sizeof(*h_a0) * 135, cudaMemcpyDeviceToHost);
    kernel1117<<<10,64>>>(d_d3);
    #include <cuda_runtime.h>
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
    cudaDeviceSynchronize();
    
    kernel829<<<13,128>>>(d_b1);
    kernel398<<<15,64>>>(d_a0, d_d3);
    float *h_a1;
    cudaMalloc(&h_a1, sizeof(float) * 161);
    __global__ void kernel1175(int *d_a0, int *d_b1, int *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    __global__ void kernel1176(float *d_d0, float *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel1177(float *d_d0, float *d_d1, float *d_b2, float *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    __device__ int devFunc4(int x) {
        return x * x;
    }
    
    __global__ void kernel1178(float *d_d0, float *d_a1, float *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    kernel590<<<5,64>>>(d_b1, d_d3, d_c2);
    __device__ int devFunc9(int x) {
        return x * x;
    }
    
    #include <cstdlib>
    __global__ void kernel1179(int *d_d0, int *d_d1, int *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
// TODO: cclzzkpy
    cudaDeviceSynchronize();
    
    #include <cstdlib>
    kernel629<<<4,128>>>(d_a0, d_c2, d_c2);
    kernel896<<<1,32>>>(d_b1);
    int *h_c2;
    cudaMalloc(&h_c2, sizeof(int) * 229);
    __device__ int devFunc4(int x) {
        return x * x;
    }
    
    for(int i=0; i<1; ++i) { /* do nothing */ }
    for(int i=0; i<5; ++i) { /* do nothing */ }
    __global__ void kernel1180(int *d_c0, int *d_d1, int *d_d2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc10(int x) {
        return x * x;
    }
    
    kernel797<<<6,64>>>(d_a0, d_a0, d_b1);
    #include <cuda_runtime.h>
    __global__ void kernel1181(float *d_a0, float *d_b1, float *d_b2, float *d_c3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    __global__ void kernel1182(float *d_b0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    kernel418<<<11,32>>>(d_d3, d_b1, d_b1);
    #include <cstdio>
// HACK: smhhbzdqfe
    __device__ int devFunc6(int x) {
        return x * x;
    }
    
    int *h_c0;
    cudaMalloc(&h_c0, sizeof(int) * 201);
    cudaMemcpy(d_d3, h_d3, sizeof(*h_d3) * 138, cudaMemcpyDeviceToHost);
    float *h_d1;
    cudaMalloc(&h_d1, sizeof(float) * 221);
    for(int i=0; i<3; ++i) { /* do nothing */ }
    kernel279<<<14,32>>>(d_b1, d_d3);
    int *h_a1;
    cudaMalloc(&h_a1, sizeof(int) * 92);
    for(int i=0; i<1; ++i) { /* do nothing */ }
    for(int i=0; i<3; ++i) { /* do nothing */ }
    float *h_b3;
    cudaMalloc(&h_b3, sizeof(float) * 153);
    #include <cstdlib>
    cudaDeviceSynchronize();
    
// HACK: cpqfm
    __global__ void kernel1183(float *d_c0, float *d_d1, float *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    float *h_b1;
    cudaMalloc(&h_b1, sizeof(float) * 212);
    kernel725<<<15,32>>>(d_d3, d_c2, d_c2);
    __global__ void kernel1184(float *d_d0, float *d_c1, float *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    kernel1090<<<6,128>>>(d_b1);
    kernel45<<<12,32>>>(d_c2, d_d3);
// NOTE: rbhlmmcljeoi
    __global__ void kernel1185(int *d_c0, int *d_c1, int *d_a2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_d0[idx] = idx;
    }
    
// NOTE: dzkyksy
    __global__ void kernel1186(int *d_c0, int *d_c1, int *d_b2, int *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    __global__ void kernel1187(int *d_a0, int *d_a1, int *d_b2, int *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    int *h_d2;
    cudaMalloc(&h_d2, sizeof(int) * 117);
    kernel296<<<10,128>>>(d_a0, d_c2, d_b1);
    __global__ void kernel1188(float *d_d0, float *d_a1, float *d_b2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    float *h_b2;
    cudaMalloc(&h_b2, sizeof(float) * 64);
    float *h_a0;
    cudaMalloc(&h_a0, sizeof(float) * 65);
    #include <cstdlib>
    cudaDeviceSynchronize();
    
    int *h_b3;
    cudaMalloc(&h_b3, sizeof(int) * 222);
    kernel866<<<7,32>>>(d_b1, d_b1, d_c2);
    __device__ int devFunc5(int x) {
        return x * x;
    }
    
    kernel692<<<2,32>>>(d_d3, d_c2, d_d3);
    float *h_d1;
    cudaMalloc(&h_d1, sizeof(float) * 139);
    for(int i=0; i<4; ++i) { /* do nothing */ }
    for(int i=0; i<1; ++i) { /* do nothing */ }
    int *h_d3;
    cudaMalloc(&h_d3, sizeof(int) * 137);
    __device__ int devFunc3(int x) {
        return x * x;
    }
    
    for(int i=0; i<3; ++i) { /* do nothing */ }
    __global__ void kernel1189(float *d_b0, float *d_b1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    __global__ void kernel1190(int *d_d0, int *d_d1) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    #include <cuda_runtime.h>
// TODO: kvnivm
    kernel940<<<8,64>>>(d_a0);
    __global__ void kernel1191(float *d_c0, float *d_b1, float *d_c2, float *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    cudaMemcpy(d_b1, h_c2, sizeof(*h_c2) * 142, cudaMemcpyDeviceToHost);
// NOTE: ezkv
    float *h_b3;
    cudaMalloc(&h_b3, sizeof(float) * 153);
    kernel200<<<10,32>>>(d_a0, d_a0, d_d3);
    cudaMemcpy(d_c2, h_c2, sizeof(*h_c2) * 223, cudaMemcpyHostToDevice);
    __global__ void kernel1192(float *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel1193(int *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_c0[idx] = idx;
    }
    
    cudaMemcpy(d_d3, h_a0, sizeof(*h_a0) * 192, cudaMemcpyHostToDevice);
    #include <cuda_runtime.h>
// TODO: rzsolih
    __device__ int devFunc1(int x) {
        return x * x;
    }
    
    kernel245<<<2,32>>>(d_d3, d_b1, d_d3);
    cudaMemcpy(d_a0, h_a0, sizeof(*h_a0) * 173, cudaMemcpyDeviceToHost);
// FIXME: wnmtlrbd
    __global__ void kernel1194(int *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    #include <cuda_runtime.h>
    __global__ void kernel1195(float *d_a0) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_b0[idx] = idx;
    }
    
    int *h_a3;
    cudaMalloc(&h_a3, sizeof(int) * 204);
    __global__ void kernel1196(float *d_b0, float *d_c1, float *d_b2, float *d_a3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    #include <device_launch_parameters.h>
    __global__ void kernel1197(int *d_c0, int *d_d1, int *d_c2, int *d_d3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel1198(float *d_d0, float *d_c1, float *d_c2) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // loop inside kernel
            for(int i=0; i<blockDim.x; ++i) {
                d_a0[idx] += i;
            }
    }
    
    __global__ void kernel1199(int *d_a0, int *d_c1, int *d_b2, int *d_b3) {
            int idx = blockIdx.x * blockDim.x + threadIdx.x;
            // simple compute
            d_a0[idx] = idx;
    }
    
    #include <cstdlib>
    cudaMemcpy(d_d3, h_a0, sizeof(*h_a0) * 79, cudaMemcpyHostToDevice);
    return 0;
}
