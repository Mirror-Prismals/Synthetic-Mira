// Auto-generated JUCE code for SynthApp

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// Generated on seed None

// End of synthetic JUCE boilerplate

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// Generated on seed None

// FIXME: SynthApp

// End of synthetic JUCE boilerplate

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// FIXME: SynthApp

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

START_JUCE_APPLICATION (SynthApp);
START_JUCE_APPLICATION (SynthApp);
class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

START_JUCE_APPLICATION (SynthApp);
class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// HACK: SynthApp

#include <JuceHeader.h>

// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// Generated on seed None

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// FIXME: SynthApp

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// End of synthetic JUCE boilerplate

START_JUCE_APPLICATION (SynthApp);
// End of synthetic JUCE boilerplate

START_JUCE_APPLICATION (SynthApp);
// Generated on seed None

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

START_JUCE_APPLICATION (SynthApp);
// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// Generated on seed None

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// End of synthetic JUCE boilerplate

// Generated on seed None

// Generated on seed None

// End of synthetic JUCE boilerplate

// End of synthetic JUCE boilerplate

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// TODO: SynthApp

// HACK: SynthApp

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// NOTE: SynthApp

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

// Generated on seed None

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

START_JUCE_APPLICATION (SynthApp);
// FIXME: SynthApp

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

// End of synthetic JUCE boilerplate

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

START_JUCE_APPLICATION (SynthApp);
// End of synthetic JUCE boilerplate

// End of synthetic JUCE boilerplate

// End of synthetic JUCE boilerplate

// Generated on seed None

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// End of synthetic JUCE boilerplate

START_JUCE_APPLICATION (SynthApp);
class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// End of synthetic JUCE boilerplate

START_JUCE_APPLICATION (SynthApp);
// TODO: SynthApp

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

// End of synthetic JUCE boilerplate

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// Generated on seed None

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// TODO: SynthApp

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

START_JUCE_APPLICATION (SynthApp);
// Generated on seed None

// NOTE: SynthApp

// Generated on seed None

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// Generated on seed None

// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// Generated on seed None

START_JUCE_APPLICATION (SynthApp);
// Generated on seed None

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

START_JUCE_APPLICATION (SynthApp);
class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// Generated on seed None

// End of synthetic JUCE boilerplate

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// Generated on seed None

// End of synthetic JUCE boilerplate

// Generated on seed None

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// HACK: SynthApp

START_JUCE_APPLICATION (SynthApp);
class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// NOTE: SynthApp

// Generated on seed None

// End of synthetic JUCE boilerplate

// Generated on seed None

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// FIXME: SynthApp

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// End of synthetic JUCE boilerplate

// TODO: SynthApp

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// NOTE: SynthApp

// NOTE: SynthApp

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// Generated on seed None

START_JUCE_APPLICATION (SynthApp);
class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// TODO: SynthApp

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

START_JUCE_APPLICATION (SynthApp);
class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

START_JUCE_APPLICATION (SynthApp);
START_JUCE_APPLICATION (SynthApp);
// End of synthetic JUCE boilerplate

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// FIXME: SynthApp

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// End of synthetic JUCE boilerplate

START_JUCE_APPLICATION (SynthApp);
class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// Generated on seed None

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

START_JUCE_APPLICATION (SynthApp);
// Generated on seed None

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// Generated on seed None

START_JUCE_APPLICATION (SynthApp);
// NOTE: SynthApp

// End of synthetic JUCE boilerplate

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// Generated on seed None

// Generated on seed None

// Generated on seed None

// HACK: SynthApp

// Generated on seed None

// Generated on seed None

// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// Generated on seed None

START_JUCE_APPLICATION (SynthApp);
// End of synthetic JUCE boilerplate

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// End of synthetic JUCE boilerplate

// Generated on seed None

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

// Generated on seed None

// TODO: SynthApp

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

START_JUCE_APPLICATION (SynthApp);
class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// Generated on seed None

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// NOTE: SynthApp

// End of synthetic JUCE boilerplate

// End of synthetic JUCE boilerplate

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// Generated on seed None

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

START_JUCE_APPLICATION (SynthApp);
// End of synthetic JUCE boilerplate

// FIXME: SynthApp

START_JUCE_APPLICATION (SynthApp);
class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// End of synthetic JUCE boilerplate

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// Generated on seed None

// Generated on seed None

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// Generated on seed None

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// Generated on seed None

// Generated on seed None

// FIXME: SynthApp

START_JUCE_APPLICATION (SynthApp);
class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// HACK: SynthApp

// End of synthetic JUCE boilerplate

// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// FIXME: SynthApp

// End of synthetic JUCE boilerplate

// Generated on seed None

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// Generated on seed None

// Generated on seed None

START_JUCE_APPLICATION (SynthApp);
// Generated on seed None

// NOTE: SynthApp

// End of synthetic JUCE boilerplate

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// End of synthetic JUCE boilerplate

// TODO: SynthApp

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

START_JUCE_APPLICATION (SynthApp);
class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// End of synthetic JUCE boilerplate

// End of synthetic JUCE boilerplate

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

START_JUCE_APPLICATION (SynthApp);
class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

START_JUCE_APPLICATION (SynthApp);
class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

START_JUCE_APPLICATION (SynthApp);
// Generated on seed None

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// Generated on seed None

// HACK: SynthApp

// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// FIXME: SynthApp

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

START_JUCE_APPLICATION (SynthApp);
START_JUCE_APPLICATION (SynthApp);
START_JUCE_APPLICATION (SynthApp);
class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// Generated on seed None

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// FIXME: SynthApp

// End of synthetic JUCE boilerplate

// Generated on seed None

// End of synthetic JUCE boilerplate

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

START_JUCE_APPLICATION (SynthApp);
class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// Generated on seed None

// End of synthetic JUCE boilerplate

// Generated on seed None

// Generated on seed None

// End of synthetic JUCE boilerplate

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// Generated on seed None

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// HACK: SynthApp

// HACK: SynthApp

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// Generated on seed None

// FIXME: SynthApp

// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// FIXME: SynthApp

// End of synthetic JUCE boilerplate

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// End of synthetic JUCE boilerplate

// End of synthetic JUCE boilerplate

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// Generated on seed None

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// Generated on seed None

// Generated on seed None

START_JUCE_APPLICATION (SynthApp);
// FIXME: SynthApp

// End of synthetic JUCE boilerplate

// NOTE: SynthApp

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

START_JUCE_APPLICATION (SynthApp);
// FIXME: SynthApp

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// Generated on seed None

START_JUCE_APPLICATION (SynthApp);
class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// Generated on seed None

// End of synthetic JUCE boilerplate

// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// NOTE: SynthApp

// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// HACK: SynthApp

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// Generated on seed None

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// End of synthetic JUCE boilerplate

// Generated on seed None

// End of synthetic JUCE boilerplate

// HACK: SynthApp

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// End of synthetic JUCE boilerplate

// End of synthetic JUCE boilerplate

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

START_JUCE_APPLICATION (SynthApp);
class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// End of synthetic JUCE boilerplate

START_JUCE_APPLICATION (SynthApp);
START_JUCE_APPLICATION (SynthApp);
// Generated on seed None

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// HACK: SynthApp

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// End of synthetic JUCE boilerplate

// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// Generated on seed None

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// Generated on seed None

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// End of synthetic JUCE boilerplate

// Generated on seed None

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// FIXME: SynthApp

// NOTE: SynthApp

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// End of synthetic JUCE boilerplate

// Generated on seed None

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// End of synthetic JUCE boilerplate

START_JUCE_APPLICATION (SynthApp);
class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

START_JUCE_APPLICATION (SynthApp);
class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

START_JUCE_APPLICATION (SynthApp);
// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// Generated on seed None

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

START_JUCE_APPLICATION (SynthApp);
// End of synthetic JUCE boilerplate

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// TODO: SynthApp

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

START_JUCE_APPLICATION (SynthApp);
class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// TODO: SynthApp

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// End of synthetic JUCE boilerplate

// HACK: SynthApp

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

// End of synthetic JUCE boilerplate

// End of synthetic JUCE boilerplate

// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

START_JUCE_APPLICATION (SynthApp);
// End of synthetic JUCE boilerplate

// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// Generated on seed None

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

START_JUCE_APPLICATION (SynthApp);
// End of synthetic JUCE boilerplate

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// NOTE: SynthApp

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

// End of synthetic JUCE boilerplate

// End of synthetic JUCE boilerplate

// Generated on seed None

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// End of synthetic JUCE boilerplate

// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// TODO: SynthApp

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

START_JUCE_APPLICATION (SynthApp);
// End of synthetic JUCE boilerplate

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// Generated on seed None

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// Generated on seed None

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// Generated on seed None

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// Generated on seed None

// End of synthetic JUCE boilerplate

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// End of synthetic JUCE boilerplate

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

START_JUCE_APPLICATION (SynthApp);
START_JUCE_APPLICATION (SynthApp);
class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

// End of synthetic JUCE boilerplate

// End of synthetic JUCE boilerplate

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

// FIXME: SynthApp

// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

START_JUCE_APPLICATION (SynthApp);
class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// Generated on seed None

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

START_JUCE_APPLICATION (SynthApp);
class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// Generated on seed None

// Generated on seed None

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// FIXME: SynthApp

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// NOTE: SynthApp

// NOTE: SynthApp

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

// End of synthetic JUCE boilerplate

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// End of synthetic JUCE boilerplate

// TODO: SynthApp

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// Generated on seed None

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// End of synthetic JUCE boilerplate

// HACK: SynthApp

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

// TODO: SynthApp

// TODO: SynthApp

START_JUCE_APPLICATION (SynthApp);
// FIXME: SynthApp

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// Generated on seed None

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// End of synthetic JUCE boilerplate

// Generated on seed None

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// Generated on seed None

// NOTE: SynthApp

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

START_JUCE_APPLICATION (SynthApp);
class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// TODO: SynthApp

// FIXME: SynthApp

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// FIXME: SynthApp

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// FIXME: SynthApp

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// TODO: SynthApp

// NOTE: SynthApp

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// End of synthetic JUCE boilerplate

// FIXME: SynthApp

// End of synthetic JUCE boilerplate

// FIXME: SynthApp

START_JUCE_APPLICATION (SynthApp);
// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// NOTE: SynthApp

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

START_JUCE_APPLICATION (SynthApp);
// End of synthetic JUCE boilerplate

// Generated on seed None

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// TODO: SynthApp

// Generated on seed None

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// End of synthetic JUCE boilerplate

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// End of synthetic JUCE boilerplate

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

// Generated on seed None

// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// End of synthetic JUCE boilerplate

// TODO: SynthApp

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// End of synthetic JUCE boilerplate

// Generated on seed None

// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// End of synthetic JUCE boilerplate

// End of synthetic JUCE boilerplate

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

START_JUCE_APPLICATION (SynthApp);
// End of synthetic JUCE boilerplate

// Generated on seed None

START_JUCE_APPLICATION (SynthApp);
class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// FIXME: SynthApp

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// End of synthetic JUCE boilerplate

// Generated on seed None

// HACK: SynthApp

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// TODO: SynthApp

// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// End of synthetic JUCE boilerplate

// Generated on seed None

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// Generated on seed None

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// Generated on seed None

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// Generated on seed None

// End of synthetic JUCE boilerplate

// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// NOTE: SynthApp

// Generated on seed None

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// NOTE: SynthApp

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// Generated on seed None

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// NOTE: SynthApp

START_JUCE_APPLICATION (SynthApp);
class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// Generated on seed None

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

START_JUCE_APPLICATION (SynthApp);
START_JUCE_APPLICATION (SynthApp);
START_JUCE_APPLICATION (SynthApp);
class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

START_JUCE_APPLICATION (SynthApp);
class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// Generated on seed None

// TODO: SynthApp

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

// TODO: SynthApp

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

START_JUCE_APPLICATION (SynthApp);
// Generated on seed None

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// Generated on seed None

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

// Generated on seed None

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

START_JUCE_APPLICATION (SynthApp);
START_JUCE_APPLICATION (SynthApp);
class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// Generated on seed None

// Generated on seed None

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

// End of synthetic JUCE boilerplate

// End of synthetic JUCE boilerplate

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// NOTE: SynthApp

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// Generated on seed None

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

START_JUCE_APPLICATION (SynthApp);
class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

// HACK: SynthApp

// HACK: SynthApp

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// End of synthetic JUCE boilerplate

// Generated on seed None

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// FIXME: SynthApp

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

// Generated on seed None

// Generated on seed None

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

START_JUCE_APPLICATION (SynthApp);
// End of synthetic JUCE boilerplate

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// End of synthetic JUCE boilerplate

// Generated on seed None

// End of synthetic JUCE boilerplate

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// End of synthetic JUCE boilerplate

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// Generated on seed None

// FIXME: SynthApp

// End of synthetic JUCE boilerplate

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// NOTE: SynthApp

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// Generated on seed None

// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// NOTE: SynthApp

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// Generated on seed None

// End of synthetic JUCE boilerplate

// Generated on seed None

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// End of synthetic JUCE boilerplate

// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

// End of synthetic JUCE boilerplate

// TODO: SynthApp

START_JUCE_APPLICATION (SynthApp);
class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// Generated on seed None

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// End of synthetic JUCE boilerplate

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// Generated on seed None

START_JUCE_APPLICATION (SynthApp);
class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// End of synthetic JUCE boilerplate

// End of synthetic JUCE boilerplate

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// End of synthetic JUCE boilerplate

// End of synthetic JUCE boilerplate

// NOTE: SynthApp

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

// End of synthetic JUCE boilerplate

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

class MainComponent  : public juce::Component
{
public:
    MainComponent()
    {
        setSize (600, 400);
    }

    ~MainComponent() override = default;

    void paint (juce::Graphics& g) override
    {
        g.fillAll (juce::Colours::darkgrey);
        g.setColour (juce::Colours::lightblue);
        g.drawRect (getLocalBounds(), 2);
    }

    void resized() override
    {
        // TODO: add component layout here
    }
};

// Generated on seed None

// End of synthetic JUCE boilerplate

class SynthApp  : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override       { return "SynthApp"; }
    const juce::String getApplicationVersion() override    { return "1.0.0"; }
    void initialise (const juce::String&) override         { mainWindow.reset (new MainWindow ("SynthApp Window", new MainComponent(), *this)); }
    void shutdown() override                               { mainWindow = nullptr; }

private:
    class MainWindow    : public juce::DocumentWindow
    {
    public:
        MainWindow (juce::String name, juce::Component* c, JUCEApplication& a)
            : juce::DocumentWindow (name, juce::Colours::lightgrey, DocumentWindow::allButtons), app (a)
        {
            setUsingNativeTitleBar (true);
            setContentOwned (c, true);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed() override
        {
            app.systemRequestedQuit();
        }

    private:
        JUCEApplication& app;
    };

    std::unique_ptr<MainWindow> mainWindow;
};

// End of synthetic JUCE boilerplate

